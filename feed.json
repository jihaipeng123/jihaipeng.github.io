{
    "version": "https://jsonfeed.org/version/1",
    "title": 123,
    "subtitle": 456,
    "icon": "https://jihaipeng123.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://jihaipeng123.github.io",
    "items": [
        {
            "id": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB/",
            "url": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB/",
            "title": "回顾总结大一生活",
            "date_published": "2023-08-28T12:13:18.000Z",
            "content_html": "<p>从何说起呢？好问题</p>\n<p>看着反复删除的开头，和我这缓慢的打字速度，我猜这篇总结可能会在黑暗中终结吧。</p>\n<p>想说什么却又不敢说，无所谓啦，想起什么就写什么了，反正能没人看到我写的，某些人看到的话 --- 就当分享给朋友也是可以的。我还是有朋友的，有朋友的感觉真的不错；</p>\n<p>今天晚上不学了，收拾一下心情，反省自己，换副姿态，重新开始・；</p>\n<p>回归正题：</p>\n<p>今天是 2023 年 8 月 28 日，我开始做我对过去的总结，人生的第一次，哈哈，曾经无数次的想要养成做日常笔记的习惯，感觉很帅。高中的时候，舍友每天都会拿起自己的小本本总结一下。想来，别提了，我太懒；以后我会经常的更新我的日常生活，分享心情。说出来就是痛快，放个小歌 ，喝个小酒，随意的敲击键盘...</p>\n<p>不知不觉大一转眼就过去了，时间真的不等人啊！从曾经刚来学校的不停吐槽的我到如今只能自我安慰随遇而安的摆烂的我，早已没有了当年的那股傲气，想想曾经高中奋斗的 3 年，真的满是不甘，想想高一的第一，高二的前几，高三的几十，想想智学网上那一次次的考试，想想那 3 次模拟 5 百六七的感觉，再想想高考的 506，哎，过去的都过去了，想想网上那些安慰高考失利的孩子的话，高考只是通向成功的一条道路，想想有道理勇敢的。于是我奔向未知的前方，来到了石家庄学院。</p>\n<p>这算我人生的起点了吧，以后出去找工作别人会说自己是哪哪 981，211，自己这算在起跑线都输了吧，哎，无所谓，走一步看一步啦，今天路途的风景都没有看够呢，为什么要想以后呢？今天的我只需要保质保量做好我今天的事，相信未来的路途一定不会差；说到以后，我一定要考研，不知道自己到备考的时候是否还会有现在的决心。当你走出校门的那一刻，意味着你真正的长大了，你的青春就结束了，你永远都不会在踏进学校的大门，你的目标就成为了工作。我希望我可以一直学下去，一直享受学生的那种无忧。考研目标现在还没有呢，容我下去认真的研究研究。</p>\n<p>大一一年的时间，问自己一个问题 “这一年你干了什么，有什么收获？” 又是一个好问题，让我好好的回味一下这个问题。</p>\n<p>干了什么？？？干了一堆荒唐事，容我慢慢道来。</p>\n<p>先说选班委的事情吧，真得很想当学习委员，真的很想，为啥吧，我个人单纯认为：首先可以先在老师面前刷个脸缘，有助于更好的和老师打好关系，多多请教些问题，真的是再好不过了，不会的问题我都敢问三遍，哎，后来吧自己也社恐，看着班级群里天天聊天早已和学长学，同学们打好关系的抢着当学委的那些..... 我放弃了，如果再给我一次机会，我一定会有信心的去争。做什么都不要轻言放弃，你都未曾开始，哪里来的” 我就一定会失败 “。我就是我，我就是那个桀骜不驯的我，你们都是大白菜，我都瞧不起，不要迷恋哥，哥只是个传说，哥略微出手，就已是这个分段的极限。来玩笑的，我就是妥妥的菜狗。</p>\n<p>还有就是，这个哎，浅提一下吧，暗恋过一个小姑娘吧，也不算吧单纯好感，至于结果吧，我是沙雕，阳光开朗大男孩，女生都是神秘物种，都是开渔塘的，有对象还到处瞎聊，也对，大学生这年龄也就是瞎玩的年龄，哦不对，还是有真爱的，比如特例：王某某同学呀，由衷的祝福他们（真心的，骗人是小狗）。搞对象无非是牵着别人牵过的手，亲这别人亲过的嘴，搂着别人摸过的腿，没意思。（在我的律师到来之前，我拒绝发言，有对象的人别动手，实在不行轻点打。）所以我觉得：在我有绝对的实力和金钱之前，我愿意做一条单生狗。听说搞对象老花钱哩，对于我这种月花 600 块钱的刚刚解决温饱的人来说，俩个字：要命；况且 lihuibear 大师说过一句名言：没前途，女生有那俩行代码好看吗，有那时间不如多敲一敲代码，说这话是那鄙夷的目光现在还记忆犹新；因此一句话总结：智者不如爱河，冥王一路硕博；</p>\n<p>还有一件事吧，哎，更丢人，还想当学习委员的我做梦也想不到我挂科了，离谱，离了个大谱。大一下学期我的网修课程挂了，就是人们口中所说的水课，挂个脚本自己就可以刷的课，而且还挂了 2 门，我觉得：这将可能是我大学生活里永远不能忘记的事了。有句话说到没挂过科的大学不算上过大学，哈哈我已经把大学读完了，从此什么评优可能都与我擦肩而过了吧！！！我曾还埋怨过那些班团怎么不提醒，别的班都提醒了，哎，就只是为我的无知为我的愚蠢找个借口吧，多大的人了，做错事情总事要为自己的错误买单。人家有什么义务替你操心，自己的事情一定要自己放到心上。</p>\n<p>应该是我最后一件事吧，我的第一次 4 级考试 401，距离 425 差的好远，哎，接着学吧。从我参加报名到考试中间也有小一段时间，想想这段时间我干了什么，干了什么我忘了，但是我清楚的记得我没有学英语。考试那天早晨，我在网上查着要靠什么题型，你们可能会很震惊？不骗你们，事实真的就是这样，虽然脑中真的记着这件事情，嘴上也说着要学英语，但是成绩不会骗人，没学就是没学，你要过了就是对那些学习的人的不公平，我认。有时候，学习不是你咋呼咋呼就来的，是那种脚踏实地，一步一步的积累起来的。我英语一直都差，英语差的无非都是懒，但勤快点也不至于如此。。。话说到这里，突然想起自己一直说着要好好学算法，惭愧惭愧，又过嘴瘾了，想抽自己大嘴巴子。哎，从明天开始，我得详细得做个计划了，每天打卡。总结一下：学习不是你说说就能学会的，不能懒，要扎扎实实地去做，行动起来。</p>\n<p>有些事情要说做就做，一定不能拖拉。一直想参加一些能够学习的社团，比赛。结果大一下学期才进入算法社团，有点小晚。但是只要学多会都不晚，加油，太空慢步的皮卡丘，不就是迟进了社团嘛，晓得后来者居上嘛！！！看着别人在老师的带领下拿奖，纯纯羡慕。当班团确实是真的有好处啊，俺想参加还没机会哩～～～妙不可言。。。所以有些事情要自己决定，机会总会留给有准备的人，一定要有勇气，多请教学长老师，<span *pink=\"\">再次提</span>一下王铭颢学长，真的给我解了很多疑惑。感谢学长（不要问为什么是再次提一下）哈哈～</p>\n<p>至于大一学到了什么，我做过的每一件事都让我学到了很多很多。浅浅的提一下具体学习历程吧：先是在图书馆度过了无数的啃书时间（傻笑，没有无数，也就是除了上课时间，晚上回宿舍睡觉，其余时间差不多都在吧)，后来就来到项目组蹭空调，抛弃了我的 “同伙”。等大二开学，一定叫他来陪我。一年内学过没用的物理，学完高数，线代，英语，C 语言，数据结构。。。学啥忘啥，主打经典白学，哎，别提了。。</p>\n<p>时间不早了，22 点 43 了，要回宿舍了，今天的总结草草的就收尾了。。</p>\n<p>汝欲醉眠吾且去，明朝有意抱琴来....</p>\n",
            "tags": [
                "自能成羽翼，何必仰云梯"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/2-Linux%E5%AE%9E%E6%93%8D/",
            "url": "https://jihaipeng123.github.io/2-Linux%E5%AE%9E%E6%93%8D/",
            "title": "2.Linux实操",
            "date_published": "2023-08-28T09:02:21.000Z",
            "content_html": "<h1 id=\"关机重启\"><a class=\"anchor\" href=\"#关机重启\">#</a> 关机 &amp; 重启</h1>\n<h2 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<ol>\n<li>\n<p>shutdown  –h  now</p>\n<p>立该进行关机</p>\n</li>\n<li>\n<p>shudown  -h  1</p>\n<p>&quot;hello,1 分钟后会关机了&quot;</p>\n</li>\n<li>\n<p>shutdown  –r  now</p>\n<p>现在重新启动计算机</p>\n</li>\n<li>\n<p>halt</p>\n<p>关机，作用和上面一样.</p>\n</li>\n<li>\n<p>reboot</p>\n<p>现在重新启动计算机</p>\n</li>\n<li>\n<p>sync</p>\n<p>把内存的数据同步到磁盘</p>\n</li>\n</ol>\n<p>注意：</p>\n<ul>\n<li>\n<p>不管是重启系统还是关闭系统，首先要运行<span class=\"orange\"> sync 命令</span>，把内存中的数据写到磁盘中</p>\n</li>\n<li>\n<p>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync</p>\n</li>\n</ul>\n<h1 id=\"用户登录和注销\"><a class=\"anchor\" href=\"#用户登录和注销\">#</a> 用户登录和注销</h1>\n<ol>\n<li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。</li>\n<li>可以利用普通用户登录，登录后再用”su - 用户名 &quot; 命令来切换成系统管理员身份.</li>\n<li>在提示符下输入 logout 即可注销用户</li>\n</ol>\n<p>logout -- 注销指令在图形运行级别无效，在运行级别 3 下有效</p>\n<h1 id=\"用户管理\"><a class=\"anchor\" href=\"#用户管理\">#</a> 用户管理</h1>\n<p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828172007329.png\" alt=\"image-20230828172007329\" /></p>\n<h2 id=\"添加用户\"><a class=\"anchor\" href=\"#添加用户\">#</a> 添加用户</h2>\n<ol>\n<li>useradd   用户名</li>\n</ol>\n<p>添加一个用户 milan, 默认该用户的家目录在 /home/milan</p>\n<p>当创建用户成功后，会自动的创建和用户同名的家目录</p>\n<p>也可以通过    useradd   -d    指定目录   新的用户名，给新创建的用户指定家目录</p>\n<h2 id=\"指定修改密码\"><a class=\"anchor\" href=\"#指定修改密码\">#</a> 指定 / 修改密码</h2>\n<ol>\n<li>passwd   用户名</li>\n</ol>\n<h2 id=\"显示当前用户所在的目录\"><a class=\"anchor\" href=\"#显示当前用户所在的目录\">#</a> 显示当前用户所在的目录</h2>\n<ol>\n<li>pwd</li>\n</ol>\n<h2 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h2>\n<ol>\n<li>userdel   用户名</li>\n</ol>\n<ul>\n<li>\n<p>删除用户 milan，但是要保留家目录，userdel   milan</p>\n</li>\n<li>\n<p>删除用户以及用户主目录，userdel   -r    tom</p>\n</li>\n</ul>\n<h2 id=\"查询用户信息\"><a class=\"anchor\" href=\"#查询用户信息\">#</a> 查询用户信息</h2>\n<ul>\n<li>id  用户名</li>\n</ul>\n<h2 id=\"切换用户\"><a class=\"anchor\" href=\"#切换用户\">#</a> 切换用户</h2>\n<p>在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root</p>\n<ol>\n<li>su  - 切换用户名</li>\n</ol>\n<ul>\n<li>\n<p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p>\n</li>\n<li>\n<p>当需要返回到原来用户时，使用 exit/logout 指令</p>\n</li>\n</ul>\n<h2 id=\"查看当前用户登录用户\"><a class=\"anchor\" href=\"#查看当前用户登录用户\">#</a> 查看当前用户 / 登录用户</h2>\n<ol>\n<li>whoami 或 who  am  I</li>\n</ol>\n<h1 id=\"用户组\"><a class=\"anchor\" href=\"#用户组\">#</a> 用户组</h1>\n<p>类似于角色，系统可以对有共性 / 权限的多个用户进行统一的管理</p>\n<h2 id=\"新增组\"><a class=\"anchor\" href=\"#新增组\">#</a> 新增组</h2>\n<ol>\n<li>\n<p>groupadd   组名</p>\n</li>\n<li>\n<p>增加用户时直接加上组</p>\n<p>指令 (基本语法):useradd   –g   用户组   用户名</p>\n<ul>\n<li>增加一个用户 zwj, 直接将他指定到 wudang</li>\n<li>groupadd  wudang</li>\n<li>useradd  -g   wudang  zwj</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"删除组\"><a class=\"anchor\" href=\"#删除组\">#</a> 删除组</h2>\n<ol>\n<li>groupdel   组名</li>\n</ol>\n<h2 id=\"修改用户的组\"><a class=\"anchor\" href=\"#修改用户的组\">#</a> 修改用户的组</h2>\n<ol>\n<li>usermod   –g   用户组   用户名\n<ul>\n<li>创建一个组 mojiao，把 zwj 放入到 mojiao</li>\n<li>指令:usermod   -g   mojiao   zwj</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"指定运行级别\"><a class=\"anchor\" href=\"#指定运行级别\">#</a> 指定运行级别</h1>\n<pre><code>0：关机\n1：单用户【找回丢失密码】\n2：多用户状态没有网络服务\n3：多用户状态有网络服务\n4：系统未使用保留给用户\n5：图形界面\n6：系统重启\n</code></pre>\n<ul>\n<li>init[0123456]</li>\n</ul>\n<p>通过 init 来切换不同的运行级别，常用运行级别是 3 和 5</p>\n<h1 id=\"指令大全\"><a class=\"anchor\" href=\"#指令大全\">#</a> 指令大全</h1>\n<p>man</p>\n<ol>\n<li>基本语法：man  [命令或配置文件]</li>\n</ol>\n<p>查看 ls 命令的帮助信息  man  ls</p>\n<p>在隐藏文件是以。开头，选项可以组合使用比如 ls   -al, 比如 man ls  -al/root</p>\n<ol>\n<li>help</li>\n</ol>\n<p>基本语法：help  命令（功能描述：获得 shell 内置命令的帮助信息）</p>\n<p>百度</p>\n<p>帮助更直接如果英语不太好的，也可以直接百度靠谱。(以上俩种没毛用)</p>\n<h1 id=\"文件目录类\"><a class=\"anchor\" href=\"#文件目录类\">#</a> 文件目录类</h1>\n<h2 id=\"pwd指令\"><a class=\"anchor\" href=\"#pwd指令\">#</a> pwd 指令</h2>\n<ol>\n<li>基本语法：pwd    (功能描述：显示当前工作目录的绝对路径)</li>\n</ol>\n<p>应用实例：显示当前工作目录的绝对路径</p>\n<h2 id=\"ls指令\"><a class=\"anchor\" href=\"#ls指令\">#</a> ls 指令</h2>\n<ol>\n<li>基本语法：ls   [选项]   [目录或文件]</li>\n</ol>\n<p>[选项]：</p>\n<ul>\n<li>-a：显示当前目录所有的文件和目录，包括隐藏的。</li>\n<li>-l：以列表的方式显示信息  简写 ll</li>\n</ul>\n<p>案例：查看当前目录的所有内容信息  ll</p>\n<h2 id=\"cd指令\"><a class=\"anchor\" href=\"#cd指令\">#</a> cd 指令</h2>\n<ol>\n<li>基本语法：cd  [参数]</li>\n</ol>\n<p>(功能描述：切换到指定目录)</p>\n<p>理解：绝对路径和相对路径</p>\n<ul>\n<li>cd ~  回到自己的家目录，比如你是 root，cd  ~  到 /root</li>\n<li>cd ..  回到当前目录的上一级目录</li>\n</ul>\n<p>案例 1：使用绝对路径切换到 root 目录，cd  /root</p>\n<p>案例 2: 使用相对路径到 /root 目录，比如在 /home/tom,cd  ../../root</p>\n<p>案例 3：表示回到当前目录的上一级目录，cd ..</p>\n<p>案例 4：回到家目录，cd  ~</p>\n<h2 id=\"mkdir指令\"><a class=\"anchor\" href=\"#mkdir指令\">#</a> mkdir 指令</h2>\n<p>mkdir 创建目录</p>\n<ol>\n<li>基本语法：mkdir   [选项]   要创建的目录</li>\n</ol>\n<p>常用 [选项]  -p：创建多级目录</p>\n<p>案例 1: 创建一个目录 mkdir   /home/dog</p>\n<p>案例 2: 创建多级目录 mkdir   -p   /home/animal/tiger</p>\n<h2 id=\"rmdir指令\"><a class=\"anchor\" href=\"#rmdir指令\">#</a> rmdir 指令</h2>\n<p>rmdir 删除空目录</p>\n<ol>\n<li>基本语法   rmdir   [选项]   要删除的空目录</li>\n</ol>\n<p>案例：删除一个目录   rmdir/home/dog</p>\n<p>使用细节:   rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p>\n<p>提示：如果需要删除非空目录，需要使用  rm  -  rf 要删除的目录比如：rm  -rf  /home/animal</p>\n<h2 id=\"touch指令\"><a class=\"anchor\" href=\"#touch指令\">#</a> touch 指令</h2>\n<p>touch 指令创建空文件</p>\n<ol>\n<li>基本语法   touch   文件名称</li>\n</ol>\n<p>案例：在 /home 目录下，创建一个空文件 hello.txt</p>\n<h2 id=\"cp指令\"><a class=\"anchor\" href=\"#cp指令\">#</a> cp 指令</h2>\n<p>cp 指令拷贝文件到指定目录</p>\n<ol>\n<li>基本语法  cp   [选项]   source dest</li>\n</ol>\n<p>常用 [选项]  -r  ：递归复制整个文件夹</p>\n<p>案例 1: 将 /home/hello.txt 拷贝到 /home/bbb 目录下  cp  hello.txt    /home/bbb</p>\n<p>案例 2: 递归复制整个文件夹，比如将 /home/bbb 整个目录，拷贝到 /opt cp-r/home/bbb   /opt</p>\n<p>强制覆盖不提示的方法：\\cp,  \\cp  -r  /home/bbb   /opt</p>\n<h2 id=\"rm指令\"><a class=\"anchor\" href=\"#rm指令\">#</a> rm 指令</h2>\n<p>rm 指令移除文件或目录</p>\n<ol>\n<li>基本语法  rm   [选项]   要删除的文件或目录</li>\n</ol>\n<p>常用 [选项]</p>\n<ul>\n<li>-r：递归删除整个文件夹</li>\n<li>-f ：强制删除不提示</li>\n</ul>\n<p>案例 1: 将 /home/hello.txt 删除，rm  /home/hello.txt</p>\n<p>案例 2: 递归删除整个文件夹 /home/bbb,   rm -rf  /home/bbb   [删除整个文件夹，不提示]</p>\n<p>使用细节强制删除不提示的方法：带上 - f 参数即可</p>\n<h2 id=\"mv指令\"><a class=\"anchor\" href=\"#mv指令\">#</a> mv 指令</h2>\n<p>mv 移动文件与目录或重命名</p>\n<p>基本语法</p>\n<ol>\n<li>mv   oldNameFile   newNameFile (功能描述：重命名)</li>\n<li>mv   /temp/movefile   /targetFolder (功能描述：移动文件)</li>\n</ol>\n<p>案例 1: 将 /home/cat.txt 文件重新命名为 pig.txt</p>\n<p>案例 2: 将 /home/pig.txt 文件移动到 /root 目录下</p>\n<p>案例 3: 移动整个目录，比如将 /opt/bbb 移动到 /home 下 mv   /opt/bbb   /home/</p>\n<h2 id=\"cat指令\"><a class=\"anchor\" href=\"#cat指令\">#</a> cat 指令</h2>\n<p>cat 查看文件内容</p>\n<ol>\n<li>基本语法  cat  [选项] 要查看的文件</li>\n</ol>\n<p>常用 [选项]  -n ：显示行号</p>\n<p>使用细节  cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 | more</p>\n<ul>\n<li>cat   -n   /etc/profile  |  more [进行交互]</li>\n</ul>\n<h2 id=\"more指令\"><a class=\"anchor\" href=\"#more指令\">#</a> more 指令</h2>\n<p>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键 (交互的指令)，详见操作说明</p>\n<ol>\n<li>基本语法  more   要查看的文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828191014263.png\" alt=\"image-20230828191014263\" /></p>\n<h2 id=\"less指令\"><a class=\"anchor\" href=\"#less指令\">#</a> less 指令</h2>\n<p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p>\n<ol>\n<li>基本语法  less  要查看的文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828191125138.png\" alt=\"image-20230828191125138\" /></p>\n<p>案例：采用 less 查看一个大文件文件 /opt/ 杂文.txt     less   /opt/ 杂文.txt</p>\n<h2 id=\"echo指令\"><a class=\"anchor\" href=\"#echo指令\">#</a> echo 指令</h2>\n<p>echo 输出内容到控制台</p>\n<ol>\n<li>基本语法  echo   [选项]  [输出内容]</li>\n</ol>\n<p>案例：使用 echo 指令输出环境变量，比如输出 $PATH  ,  $HOSTNAME,</p>\n<p>echo   $HOSTNAME</p>\n<p>案例：使用 echo 指令输出 hello,world!</p>\n<h2 id=\"head指令\"><a class=\"anchor\" href=\"#head指令\">#</a> head 指令</h2>\n<p>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p>\n<p>基本语法</p>\n<ol>\n<li>head   文件 (功能描述：查看文件头 10 行内容)</li>\n<li>head   -n  5  文件  (功能描述：查看文件头 5 行内容，5 可以是任意行数)</li>\n</ol>\n<p>案例：查看 /etc/profile 的前面 5 行代码  head   -n   5   /etc/profile</p>\n<h2 id=\"tail指令\"><a class=\"anchor\" href=\"#tail指令\">#</a> tail 指令</h2>\n<p>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。</p>\n<p>基本语法</p>\n<ol>\n<li>tail   文件（功能描述：查看文件尾 10 行内容）</li>\n<li>tail   -n  5  文件（功能描述：查看文件尾 5 行内容，5 可以是任意行数）</li>\n<li>tail  -f  文件（功能描述：实时追踪该文档的所有更新）</li>\n</ol>\n<p>案例 1: 查看 /etc/profile 最后 5 行的代码  tail  -n  5  /etc/profile</p>\n<p>案例 2: 实时监控 mydate.txt, 看看到文件有变化时，是否看到，实时的追加 hello,world</p>\n<p>tail  -f  /home/mydate.txt</p>\n<h2 id=\"指令和指令\"><a class=\"anchor\" href=\"#指令和指令\">#</a> &gt; 指令和 &gt;&gt; 指令</h2>\n<p>&gt; 输出重定向和 &gt;&gt; 追加</p>\n<p>基本语法</p>\n<ol>\n<li>ls  -l  &gt;  文件（功能描述：列表的内容写入文件 a.txt 中（覆盖写））</li>\n<li>ls  -al  &gt;&gt; 文件（功能描述：列表的内容追加到文件 aa.txt 的末尾）</li>\n<li>cat  文件 1  &gt; 文件 2（功能描述：将文件 1 的内容覆盖到文件 2）</li>\n<li>echo  &quot;内容&quot;  &gt;&gt; 文件 (追加)</li>\n</ol>\n<p>案例 1: 将 /home 目录下的文件列表写入到 /home/info.txt 中，覆盖写入 ls  -l  /home  &gt;  /home/info.txt [如果 info.txt 没有，则会创建]</p>\n<p>案例 2: 将当前日历信息追加到 /home/mycal 文件中指令为：cal  &gt;&gt;  /home/mycal</p>\n<h2 id=\"history指令\"><a class=\"anchor\" href=\"#history指令\">#</a> history 指令</h2>\n<p>查看已经执行过历史命令，也可以执行历史指令</p>\n<ol>\n<li>基本语法 history（功能描述：查看已经执行过历史命令）</li>\n</ol>\n<p>案例 1: 显示所有的历史命令  history</p>\n<p>案例 2: 显示最近使用过的 10 个指令。history  10</p>\n<p>案例 3：执行历史编号为 5 的指令！5</p>\n<h1 id=\"时间日期类\"><a class=\"anchor\" href=\"#时间日期类\">#</a> 时间日期类</h1>\n<h2 id=\"date指令\"><a class=\"anchor\" href=\"#date指令\">#</a> date 指令</h2>\n<h3 id=\"显示当前日期\"><a class=\"anchor\" href=\"#显示当前日期\">#</a> 显示当前日期</h3>\n<p>基本语法</p>\n<ol>\n<li>date（功能描述：显示当前时间）</li>\n<li>date+% Y（功能描述：显示当前年份）</li>\n<li>date+% m（功能描述：显示当前月份）</li>\n<li>date+% d（功能描述：显示当前是哪一天）</li>\n<li>date&quot;+% Y-% m-% d% H:% M:% S&quot;（功能描述：显示年月日时分秒）</li>\n</ol>\n<h3 id=\"指令-设置日期\"><a class=\"anchor\" href=\"#指令-设置日期\">#</a> 指令 - 设置日期</h3>\n<p>基本语法</p>\n<ol>\n<li>date  -s  字符串时间</li>\n</ol>\n<p>案例 1: 设置系统当前时间，比如设置成 2020-11-0320:02:10   date  -s  “2020-11-0320:02:10</p>\n<h2 id=\"cal指令\"><a class=\"anchor\" href=\"#cal指令\">#</a> cal 指令</h2>\n<p>查看日历指令</p>\n<p>基本语法</p>\n<ol>\n<li>cal  [选项]（功能描述：不加选项，显示本月日历）</li>\n</ol>\n<p>案例：显示 2020 年日历:cal  2020</p>\n<h1 id=\"搜索查找类\"><a class=\"anchor\" href=\"#搜索查找类\">#</a> 搜索查找类</h1>\n<h2 id=\"find指令\"><a class=\"anchor\" href=\"#find指令\">#</a> find 指令</h2>\n<p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p>\n<ol>\n<li>基本语法  find   [搜索范围]   [选项]</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828193151543.png\" alt=\"image-20230828193151543\" /></p>\n<p>案例 1: 按文件名：根据名称查找 /home 目录下的 hello.txt 文件   find   /home   -name   hello.txt</p>\n<p>案例 2：按拥有者：查找 /opt 目录下，用户名称为 nobody 的文件   find   /opt   -user   nobody</p>\n<p>案例 3：查找整个系统下大于 200M 的文件（+n 大于 - n 小于 n 等于，单位有 k,M,G）find /  -size +200M</p>\n<h2 id=\"grep指令和管道符号\"><a class=\"anchor\" href=\"#grep指令和管道符号\">#</a> grep 指令和管道符号 |</h2>\n<p>grep 过滤查找，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p>\n<ol>\n<li>grep  [选项]  查找内容源文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828193511230.png\" alt=\"image-20230828193511230\" /></p>\n<p>案例 1: 请在 hello.txt 文件中，查找 &quot;yes&quot; 所在行，并且显示行号</p>\n<p>写法 1:cat  /home/hello.txt   |   grep &quot;yes&quot;</p>\n<p>写法 2: grep  -n &quot;yes&quot;  /home/hello.txt</p>\n<h1 id=\"压缩和解压类\"><a class=\"anchor\" href=\"#压缩和解压类\">#</a> 压缩和解压类</h1>\n<h2 id=\"gzipgunzip指令\"><a class=\"anchor\" href=\"#gzipgunzip指令\">#</a> gzip/gunzip 指令</h2>\n<p>gzip 用于压缩文件，gunzip 用于解压的</p>\n<p>基本语法</p>\n<ol>\n<li>gzip   文件（功能描述：压缩文件，只能将文件压缩为 *.gz 文件）</li>\n<li>gunzip   文件.gz（功能描述：解压缩文件命令）</li>\n</ol>\n<p>案例 1:gzip 压缩，将 /home 下的 hello.txt 文件进行压缩   gzip   /home/hello.txt</p>\n<p>案例 2:gunzip 压缩，将 /home 下的 hello.txt.gz 文件进行解压缩  gunzip  /home/hello.txt.gz</p>\n<h2 id=\"zipunzip指令\"><a class=\"anchor\" href=\"#zipunzip指令\">#</a> zip/unzip 指令</h2>\n<p>zip 用于压缩文件，unzip 用于解压的，这个在项目打包发布中很有用的</p>\n<p>基本语法</p>\n<ol>\n<li>zip  [选项]   XXX.zip  将要压缩的内容（功能描述：压缩文件和目录的命令）</li>\n<li>unzip  [选项]  XXX.zip（功能描述：解压缩文件）</li>\n<li>zip 常用选项  -r  ：递归压缩，即压缩目录</li>\n<li>unzip 的常用选项 -d &lt;目录&gt; ：指定解压后文件的存放目录</li>\n</ol>\n<p>案例 1: 将 /home 下的所有文件 / 文件夹进行压缩成 myhome.zip ；  zip  -r  myhome.zip  /home/ [将 home 目录及其包含的文件和子文件夹都压缩]</p>\n<p>案例 2: 将 myhome.zip 解压到 /opt/tmp 目录下； unzip  -d   /opt/tmp   /home/myhome.zip</p>\n<h2 id=\"tar指令\"><a class=\"anchor\" href=\"#tar指令\">#</a> tar 指令</h2>\n<p>tar 指令是打包指令，最后打包后的文件是.tar.gz 的文件。</p>\n<ol>\n<li>基本语法  tar  [选项]  XXX.tar.gz   打包的内容  (功能描述：打包目录，压缩后的文件格式.tar.gz)</li>\n</ol>\n<p>案例 1: 压缩多个文件，将 /home/pig.txt 和 /home/cat.txt 压缩成 pc.tar.gz</p>\n<p>tar    -zcvf  pc.tar.gz   /home/pig.txt  /home/cat.txt</p>\n<p>案例 2: 将 /home 的文件夹压缩成 myhome.tar.gz</p>\n<p>tar   -zcvf   myhome.tar.gz   /home/</p>\n<p>案例 3: 将 pc.tar.gz 解压到当前目录</p>\n<p>tar  -zxvf   pc.tar.gz</p>\n<p>案例 4: 将 myhome.tar.gz 解压到 /opt/tmp2 目录下</p>\n<p>tar  -zxvf   /home/myhome.tar.gz  -C  /opt/tmp2</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/1-Linux%E5%85%A5%E9%97%A8/",
            "url": "https://jihaipeng123.github.io/1-Linux%E5%85%A5%E9%97%A8/",
            "title": "1.Linux入门",
            "date_published": "2023-08-28T07:07:37.000Z",
            "content_html": "<h1 id=\"应用领域\"><a class=\"anchor\" href=\"#应用领域\">#</a> 应用领域</h1>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828151126324.png\" alt=\"image-20230828151126324\" /></p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828154542640.png\" alt=\"image-20230828154542640\" /></p>\n<h2 id=\"服务器领域\"><a class=\"anchor\" href=\"#服务器领域\">#</a> 服务器领域</h2>\n<p>​\t服务器领域 linux 在服务器领域的应用是最强的。linux 免费、稳定、高效等特点在这里得到了很好的体现，尤其在一些高端领域尤为广泛（c/c++/php/java/python/go）。</p>\n<h2 id=\"嵌入式领域\"><a class=\"anchor\" href=\"#嵌入式领域\">#</a> 嵌入式领域</h2>\n<p>​\t嵌入式领域 linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、智能硬件等都是其应用领域。以后在物联网中应用会更加广泛。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<ol>\n<li>linux 是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目 (c/c++/php/python/java/go) 都会部署到 Linux/unix 系统上。</li>\n<li>常见的操作系统 (windows、IOS、Android、MacOS,Linux,Unix)</li>\n<li>xLinux 之父 -----LinusTorvalds-----Git 创作者 ----- 世界著名黑客</li>\n<li>Linux 主要的发行版：Ubuntu (乌班图)、RedHat (红帽)、CentOS、Debain [蝶变]、Fedora、SuSE、OpenSUS</li>\n</ol>\n<p>Linux 和 Unix 的关系</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828155310706.png\" alt=\"image-20230828155310706\" /></p>\n<h2 id=\"vm和linux的安装\"><a class=\"anchor\" href=\"#vm和linux的安装\">#</a> VM 和 Linux 的安装</h2>\n<p>先安装 virtualmachine15.52.  ---- 官方地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudm13YXJlLmNvbS9jbi5odG1s\">https://www.vmware.com/cn.html</span></p>\n<p>再安装 Linux (CentOS7.6/centOS8.1)</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162218104.png\" alt=\"image-20230828162218104\" /></p>\n<h2 id=\"centos安装\"><a class=\"anchor\" href=\"#centos安装\">#</a> CentOS 安装</h2>\n<p>1. 创建虚拟机</p>\n<p>2. 开始安装系统 (CentOS7.6) 的步骤 https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso</p>\n<p>3. 提示生成复杂密码:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWlqaW1pbWFzaGVuZ2NoZW5nLjUxMjQwLmNvbS8zLkNlbnRPUw==\">https://suijimimashengcheng.51240.com/3.CentOS</span></p>\n<p>安装难点 - 网络连接方式理解</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162428999.png\" alt=\"image-20230828162428999\" /></p>\n<h2 id=\"虚拟机快照\"><a class=\"anchor\" href=\"#虚拟机快照\">#</a> 虚拟机快照</h2>\n<p>如果你在使用虚拟机系统的时候 (比如 linux)，你想回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理。</p>\n<h2 id=\"虚拟机迁移和删除\"><a class=\"anchor\" href=\"#虚拟机迁移和删除\">#</a> 虚拟机迁移和删除</h2>\n<p>​    虚拟系统安装好了，它的本质就是文件 (放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安装好的虚拟系统这个文件夹整体拷贝或者剪切到另外位置使用。删除也很简单，用 vmware 进行移除，再点击菜单 -&gt; 从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹即可</p>\n<h2 id=\"安装vmtools\"><a class=\"anchor\" href=\"#安装vmtools\">#</a> 安装 vmtools</h2>\n<p>1) 进入 centos</p>\n<p>2) 点击 vm 菜单的 -&gt;installvmwaretools</p>\n<p>3) centos 会出现一个 vm 的安装包，xx.tar.gz</p>\n<p>4) 拷贝到 /opt</p>\n<p>5) 使用解压命令 tar, 得到一个安装文件 cd/opt [进入到 opt 目录] tar-zxvfxx.tar.gz</p>\n<p>6) 进入该 vm 解压的目录，/opt 目录下 cdvmware...</p>\n<p>7) 安装./vmware-install.pl</p>\n<p>8) 全部使用默认设置即可，就可以安装成功</p>\n<p>9) 注意：安装 vmtools 需要有 gcc.gcc-v</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162921575.png\" alt=\"image-20230828162921575\" /></p>\n<h1 id=\"目录详解\"><a class=\"anchor\" href=\"#目录详解\">#</a> 目录详解</h1>\n<ol>\n<li>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录 “/”，然后在此目录下再创建其他的目录。</li>\n<li>深刻理解 linux 树状文件目录是非常重要的记住一句经典的话：在 Linux 世界里，一切皆文件</li>\n</ol>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828163147597.png\" alt=\"image-20230828163147597\" /></p>\n<ol>\n<li>/bin  常用（/usr/bin、/usr/local/bin）是 Binary 的缩写，这个目录存放着最经常使用的命令</li>\n<li>/sbin  (/usr/sbin、/usr/local/sbin) SuperUser，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/home 常用 存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</li>\n<li>/root  常用  该目录为系统管理员，也称作超级权限者的用户主目录</li>\n<li>/lib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</li>\n<li>/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li>\n<li>/etc  常用  所有的系统管理所需要的配置文件和子目录，比如安装 mysql 数据库 my.conf</li>\n<li>/usr   常用   这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 programfiles 目录。</li>\n<li>/boot   常用   存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</li>\n<li>/proc    不能动    这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</li>\n<li>/srv   不能动   service 缩写，该目录存放一些服务启动之后需要提取的数据</li>\n<li>/sys  不能动   这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs=》【别动】</li>\n<li>/tmp  这个目录是用来存放一些临时文件的</li>\n<li>/dev   类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</li>\n<li>/media   常用   linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</li>\n<li>/mnt    常用   系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，然后进入该目录就可以查看里的内容了。d:/myshare</li>\n<li>/opt   这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</li>\n<li>/usr/local   常用   这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li>\n<li>/var    常用    这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</li>\n<li>/selinux     [security-enhancedlinux] SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置.</li>\n</ol>\n<h1 id=\"linux-xshell7\"><a class=\"anchor\" href=\"#linux-xshell7\">#</a> Linux-Xshell7</h1>\n<h2 id=\"远程登录\"><a class=\"anchor\" href=\"#远程登录\">#</a> 远程登录</h2>\n<p>1) linux 服务器是开发小组共享</p>\n<p>2) 正式上线的项目是运行在公网</p>\n<p>3) 因此程序员需要远程登录到 Linux 进行项目管理或者开发</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164146308.png\" alt=\"image-20230828164146308\" /></p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<ul>\n<li>Xshell 是目前最好的远程登录到 Linux 操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。</li>\n<li>Xshell 是一个强大的安全终端模拟软件，它支持 SSH1,SSH2, 以及 MicrosoftWindows 平台的 TELNET 协议。</li>\n<li>Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的</li>\n</ul>\n<h2 id=\"安装配置和使用\"><a class=\"anchor\" href=\"#安装配置和使用\">#</a> 安装配置和使用</h2>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164529802.png\" alt=\"image-20230828164529802\" /></p>\n<p>解决中文乱码<img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164543283.png\" alt=\"image-20230828164543283\" /></p>\n<h2 id=\"vi和vim编辑器\"><a class=\"anchor\" href=\"#vi和vim编辑器\">#</a> Vi 和 Vim 编辑器</h2>\n<p>Linux 系统会内置 vi 文本编辑器 Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。vi 和 vim 常用的三种模式</p>\n<ol>\n<li>正常模式以 vim 打开一个档案就直接进入一般模式了 (这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、粘贴』来处理你的文件数据。</li>\n<li>插入模式按下 i,I,o,O,a,A,r,R 等任何一个字母之后才会进入编辑模式，一般来说按 i 即可.</li>\n<li>命令行模式输入 esc 再输入：在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开 vim、显示行号等的动作则是在此模式中达成的！</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>拷贝当前行yy<span class=\"token punctuation\">,</span>拷贝当前行向下的<span class=\"token number\">5</span>行<span class=\"token number\">5</span>yy，并粘贴（输入p）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>删除当前行dd<span class=\"token punctuation\">,</span>删除当前行向下的<span class=\"token number\">5</span>行<span class=\"token number\">5d</span>d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>在文件中查找某个单词<span class=\"token punctuation\">[</span>命令行下<span class=\"token operator\">/</span>关键字，回车查找<span class=\"token punctuation\">,</span>输入n就是查找下一个<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>设置文件的行号，取消文件的行号<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>命令行下<span class=\"token operator\">:</span>setnu和<span class=\"token operator\">:</span>setnonu<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>编辑<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile文件，在一般模式下<span class=\"token punctuation\">,</span>使用快捷键到该文档的最末行<span class=\"token punctuation\">[</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">]</span>和最首行<span class=\"token punctuation\">[</span>gg<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>在一个文件中输入<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>在一般模式下<span class=\"token punctuation\">,</span>然后又撤销这个动作u</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span>编辑<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile文件，在一般模式下<span class=\"token punctuation\">,</span>并将光标移动到<span class=\"token punctuation\">,</span>输入<span class=\"token number\">20</span><span class=\"token punctuation\">,</span>再输入shift<span class=\"token operator\">+</span>g</pre></td></tr></table></figure><p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828165435437.png\" alt=\"image-20230828165435437\" /></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/11-redis/",
            "url": "https://jihaipeng123.github.io/11-redis/",
            "title": "11.redis",
            "date_published": "2023-08-28T04:38:04.000Z",
            "content_html": "<p><img data-src=\"../pictures/11-redis/image-20230824171703738.png\" alt=\"image-20230824171703738\" /></p>\n<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>redis 是一款高性能的 NOSQL 系列的非关系型数据库</p>\n<pre><code>1.什么是NOSQL\n\tNoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。\n\t随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。\n\t1.1. NOSQL和关系型数据库比较\n\t\t优点：\n\t\t1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。\n\t\t2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。\n\t\t3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。\n\t\t4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。\n\t\t缺点：\n\t\t1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。\n\t\t2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。\n\t\t3）不提供关系型数据库对事务的处理。\n\n\t\t1.2. 非关系型数据库的优势：\n\t\t1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。\n\t\t2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。\n\n\t\t1.3. 关系型数据库的优势：\n\t\t1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。\n\t\t2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。\n\t\t\n\t\t1.4. 总结\n\t\t关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，\n\t\t让NoSQL数据库对关系型数据库的不足进行弥补。\n\t\t一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据\n\n2.主流的NOSQL产品\n\t•\t键值(Key-Value)存储数据库\n\t\t相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB\n\t\t典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 \n\t\t数据模型： 一系列键值对\n\t\t优势： 快速查询\n\t\t劣势： 存储的数据缺少结构化\n\t•\t列存储数据库\n\t\t相关产品：Cassandra, HBase, Riak\n\t\t典型应用：分布式的文件系统\n\t\t数据模型：以列簇式存储，将同一列数据存在一起\n\t\t优势：查找速度快，可扩展性强，更容易进行分布式扩展\n\t\t劣势：功能相对局限\n\t•\t文档型数据库\n\t\t相关产品：CouchDB、MongoDB\n\t\t典型应用：Web应用（与Key-Value类似，Value是结构化的）\n\t\t数据模型： 一系列键值对\n\t\t优势：数据结构要求不严格\n\t\t劣势： 查询性能不高，而且缺乏统一的查询语法\n\t•\t图形(Graph)数据库\n\t\t相关数据库：Neo4J、InfoGrid、Infinite Graph\n\t\t典型应用：社交网络\n\t\t数据模型：图结构\n\t\t优势：利用图结构相关算法。\n\t\t劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。\n3 什么是Redis\n\tRedis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：\n\t\t1) 字符串类型 string\n\t\t2) 哈希类型 hash\n\t\t3) 列表类型 list\n\t\t4) 集合类型 set\n\t\t5) 有序集合类型 sortedset\n\t3.1 redis的应用场景\n\t\t•\t缓存（数据查询、短连接、新闻内容、商品内容等等）\n\t\t•\t聊天室的在线好友列表\n\t\t•\t任务队列。（秒杀、抢购、12306等等）\n\t\t•\t应用排行榜\n\t\t•\t网站访问统计\n\t\t•\t数据过期处理（可以精确到毫秒\n\t\t•\t分布式集群架构中的session分离\n</code></pre>\n<h1 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h1>\n<pre><code>\t1. 官网：https://redis.io\n\t2. 中文网：http://www.redis.net.cn/\n\t3. 解压直接可以使用：\n\t\t* redis.windows.conf：配置文件\n\t\t* redis-cli.exe：redis的客户端\n\t\t* redis-server.exe：redis服务器端\n</code></pre>\n<h1 id=\"命令操作\"><a class=\"anchor\" href=\"#命令操作\">#</a> 命令操作</h1>\n<pre><code>1. redis的数据结构：\n\t* redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构\n\t* value的数据结构：\n\t\t\t1 字符串类型 string\n\t\t\t2 哈希类型 hash ： map格式  \n\t\t\t3 列表类型 list ： linkedlist格式。支持重复元素\n\t\t\t4 集合类型 set  ： 不允许重复元素\n\t\t\t5 有序集合类型 sortedset：不允许重复元素，且元素有顺序\n\t\t\n2. 字符串类型 string\n\t1. 存储： set key value\n\t\t127.0.0.1:6379&gt; set username zhangsan\n\t\tOK\n\t2. 获取： get key\n\t\t127.0.0.1:6379&gt; get username\n\t\t&quot;zhangsan&quot;\n\t3. 删除： del key\n\t\t127.0.0.1:6379&gt; del age\n\t\t(integer) 1\n3. 哈希类型 hash\n\t1. 存储： hset key field value\n\t\t127.0.0.1:6379&gt; hset myhash username lisi\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; hset myhash password 123\n\t\t(integer) 1\n\t2. 获取： \n\t\t* hget key field: 获取指定的field对应的值\n\t\t\t127.0.0.1:6379&gt; hget myhash username\n\t\t\t&quot;lisi&quot;\n\t\t* hgetall key：获取所有的field和value\n\t\t\t127.0.0.1:6379&gt; hgetall myhash\n\t\t\t1) &quot;username&quot;\n\t\t\t2) &quot;lisi&quot;\n\t\t\t3) &quot;password&quot;\n\t\t\t4) &quot;123&quot;\t\t\n\t3. 删除： hdel key field\n\t\t\t127.0.0.1:6379&gt; hdel myhash username\n\t\t\t(integer) 1\n\t\n4. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）\n\t1. 添加：\n\t\t1. lpush key value: 将元素加入列表左表\n\t\t2. rpush key value：将元素加入列表右边\t\n\t\t\t127.0.0.1:6379&gt; lpush myList a\n\t\t\t(integer) 1\n\t\t\t127.0.0.1:6379&gt; lpush myList b\n\t\t\t(integer) 2\n\t\t\t127.0.0.1:6379&gt; rpush myList c\n\t\t\t(integer) 3\n\t2. 获取：\n\t\t* lrange key start end ：范围获取\n\t\t\t127.0.0.1:6379&gt; lrange myList 0 -1\n\t\t\t1) &quot;b&quot;\n\t\t\t2) &quot;a&quot;\n\t\t\t3) &quot;c&quot;\n\t3. 删除：\n\t\t* lpop key： 删除列表最左边的元素，并将元素返回\n\t\t* rpop key： 删除列表最右边的元素，并将元素返回\n5. 集合类型 set ： 不允许重复元素\n\t1. 存储：sadd key value\n\t\t127.0.0.1:6379&gt; sadd myset a\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; sadd myset a\n\t\t(integer) 0\n\t2. 获取：smembers key:获取set集合中所有元素\n\t\t127.0.0.1:6379&gt; smembers myset\n\t\t1) &quot;a&quot;\n\t3. 删除：srem key value:删除set集合中的某个元素\t\n\t\t127.0.0.1:6379&gt; srem myset a\n\t\t(integer) 1\n6. 有序集合类型 sortedset\n\t不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\t1. 存储：zadd key score value\n\t\t127.0.0.1:6379&gt; zadd mysort 60 zhangsan\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; zadd mysort 50 lisi\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; zadd mysort 80 wangwu\n\t\t(integer) 1\n\t2. 获取：zrange key start end [withscores]\n\t\t127.0.0.1:6379&gt; zrange mysort 0 -1\n\t\t1) &quot;lisi&quot;\n\t\t2) &quot;zhangsan&quot;\n\t\t3) &quot;wangwu&quot;\n\t\t127.0.0.1:6379&gt; zrange mysort 0 -1 withscores\n\t\t1) &quot;zhangsan&quot;\n\t\t2) &quot;60&quot;\n\t\t3) &quot;wangwu&quot;\n\t\t4) &quot;80&quot;\n\t\t5) &quot;lisi&quot;\n\t\t6) &quot;500&quot;\n\t3. 删除：zrem key value\n\t\t127.0.0.1:6379&gt; zrem mysort lisi\n\t\t(integer) 1\n7. 通用命令\n\t1. keys * : 查询所有的键\n\t2. type key ： 获取键对应的value的类型\n\t3. del key：删除指定的key value\n</code></pre>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<pre><code>   1. redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。\n   2. redis持久化机制：\n\t\t1. RDB：默认方式，不需要进行配置，默认就使用这种机制\n\t\t\t* 在一定的间隔时间中，检测key的变化情况，然后持久化数据\n\t\t\t1. 编辑redis.windwos.conf文件\n\t\t\t\t#   after 900 sec (15 min) if at least 1 key changed\n\t\t\t\tsave 900 1\n\t\t\t\t#   after 300 sec (5 min) if at least 10 keys changed\n\t\t\t\tsave 300 10\n\t\t\t\t#   after 60 sec if at least 10000 keys changed\n\t\t\t\tsave 60 10000\n\t\t\t\t\n\t\t\t2. 重新启动redis服务器，并指定配置文件名称\n\t\t\t\tD:\\JavaWeb2018\\day23_redis\\资料\\redis\\windows-64\\redis-2.8.9&gt;redis-server.exe redis.windows.conf\t\n\t\t\t\n\t\t2. AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据\n\t\t\t1. 编辑redis.windwos.conf文件\n\t\t\t\tappendonly no（关闭aof） --&gt; appendonly yes （开启aof）\n\t\t\t\t\n\t\t\t\t# appendfsync always ： 每一次操作都进行持久化\n\t\t\t\tappendfsync everysec ： 每隔一秒进行一次持久化\n\t\t\t\t# appendfsync no\t ： 不进行持久化\n</code></pre>\n<p>​</p>\n<h1 id=\"java客户端-jedis\"><a class=\"anchor\" href=\"#java客户端-jedis\">#</a> Java 客户端 Jedis</h1>\n<ul>\n<li>Jedis: 一款 java 操作 redis 数据库的工具.</li>\n<li>使用步骤：\n<ol>\n<li>下载 jedis 的 jar 包</li>\n<li>使用</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tjedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tjedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"jedis操作各种redis中的数据结构\"><a class=\"anchor\" href=\"#jedis操作各种redis中的数据结构\">#</a> Jedis 操作各种 redis 中的数据结构</h1>\n<h2 id=\"字符串类型-string\"><a class=\"anchor\" href=\"#字符串类型-string\">#</a> 字符串类型 string</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// 存储</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 可以使用 setex () 方法存储可以指定过期时间的 key value\t\t        jedis.setex (\"activecode\",20,\"hehe\");// 将 activecode：hehe 键值对存入 redis，并且 20 秒后自动删除该键值对</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"哈希类型-hash\"><a class=\"anchor\" href=\"#哈希类型-hash\">#</a> 哈希类型 hash :</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map格式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hget</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hgetAll</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 存储 hash</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 获取 hash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取 hash 的所有 map 中的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> user <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// keyset</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t            <span class=\"token comment\">// 获取 value</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"列表类型-list\"><a class=\"anchor\" href=\"#列表类型-list\">#</a> 列表类型 list</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>linkedlist格式。支持重复元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tlpush <span class=\"token operator\">/</span> rpush</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tlpop <span class=\"token operator\">/</span> rpop</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tlrange start end <span class=\"token operator\">:</span> 范围获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t <span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        <span class=\"token comment\">//list 存储</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lpush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从左边存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">rpush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从右边存</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        <span class=\"token comment\">//list 范围获取</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mylist <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        <span class=\"token comment\">//list 弹出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t        <span class=\"token class-name\">String</span> element1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lpop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token class-name\">String</span> element2 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">rpop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t        <span class=\"token comment\">//list 范围获取</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mylist2 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mylist2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t        <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"集合类型-set\"><a class=\"anchor\" href=\"#集合类型-set\">#</a> 集合类型 set</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不允许重复元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tsadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tsmembers<span class=\"token operator\">:</span>获取所有元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        <span class=\"token comment\">//set 存储</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myset\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"php\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t     <span class=\"token comment\">//set 获取</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myset <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"有序集合类型-sortedset\"><a class=\"anchor\" href=\"#有序集合类型-sortedset\">#</a> 有序集合类型 sortedset</h2>\n<p>​</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不允许重复元素，且元素有顺序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tzadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tzrange</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token comment\">//sortedset 存储</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"亚瑟\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"后裔\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t        <span class=\"token comment\">//sortedset 获取</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mysortedset <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mysortedset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t      jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​</p>\n<p>​</p>\n<h1 id=\"jedis连接池-jedispool\"><a class=\"anchor\" href=\"#jedis连接池-jedispool\">#</a> jedis 连接池： JedisPool</h1>\n<ul>\n<li>\n<p>使用：<br />\n​\t\t\t\t1. 创建 JedisPool 连接池对象<br />\n​\t\t\t\t2. 调用方法 getResource () 方法获取 Jedis 连接<br />\n​</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>​\t<span class=\"token comment\">//0. 创建一个配置对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">JedisPoolConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ​\t\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     ​\t\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     ​\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//1. 创建 Jedis 连接池对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">JedisPool</span> jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ​\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//2. 获取连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//3. 使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     ​\t\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"heihei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>​\t\t\t            <span class=\"token comment\">//4. 关闭 归还到连接池中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​\t\t\t           jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>​</pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"连接池工具类\"><a class=\"anchor\" href=\"#连接池工具类\">#</a> 连接池工具类</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisPoolUtils</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t        <span class=\"token comment\">// 读取配置文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token class-name\">JedisPoolUtils</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jedis.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t        <span class=\"token comment\">// 创建 Properties 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t        <span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t        <span class=\"token comment\">// 关联文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t            pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t        <span class=\"token comment\">// 获取数据，设置到 JedisPoolConfig 中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t        <span class=\"token class-name\">JedisPoolConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxTotal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxIdle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t        <span class=\"token comment\">// 初始化 JedisPool</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t        jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t     * 获取连接方法</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t\t\t<br />\n​</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p><img data-src=\"../pictures/11-redis/image-20230825100655015.png\" alt=\"image-20230825100655015\" /></p>\n<p>案例需求：<br />\n1. 提供 index.html 页面，页面中有一个省份 下拉列表<br />\n 2. 当 页面加载完成后 发送 ajax 请求，加载所有省份</p>\n<ul>\n<li>注意：使用 redis 缓存一些不经常发生变化的数据。\n<ul>\n<li>数据库的数据一旦发生改变，则需要更新缓存。\n<ul>\n<li>数据库的表执行 增删改的相关操作，需要将 redis 缓存数据情况，再次存入</li>\n<li>在 service 对应的增删改方法中，将 redis 数据删除。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/10-Ajax-Json/",
            "url": "https://jihaipeng123.github.io/10-Ajax-Json/",
            "title": "10.Ajax&Json",
            "date_published": "2023-08-28T04:25:53.000Z",
            "content_html": "<h1 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> AJAX</h1>\n<pre><code>1. 概念： ASynchronous JavaScript And XML\t异步的JavaScript 和 XML\n\t1. 异步和同步：客户端和服务器端相互通信的基础上\n\t\t* 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。\n\t\t* 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。\n\t\tAjax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1] \n\t\t通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\t\t传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。\n\t\t提升用户的体验\n\n2. 实现方式：\n\t1. 原生的JS实现方式（了解）\n\t\t//1.创建核心对象\n\t            var xmlhttp;\n\t            if (window.XMLHttpRequest)\n\t            &#123;// code for IE7+, Firefox, Chrome, Opera, Safari\n\t                xmlhttp=new XMLHttpRequest();\n\t            &#125;\n\t            else\n\t            &#123;// code for IE6, IE5\n\t                xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n\t            &#125;\n\t\n\t    //2. 建立连接\n\t            /* 参数：\n\t                    1. 请求方式：GET、POST\n\t                        * get方式，请求参数在URL后边拼接。send方法为空参\n\t                        * post方式，请求参数在send方法中定义\n\t                    2. 请求的URL：\n\t                    3. 同步或异步请求：true（异步）或 false（同步）*/\n\t            xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);\n\t\n\t    //3.发送请求\n\t            xmlhttp.send();\n\t\n\t    //4.接受并处理来自服务器的响应结果\n\t    //获取方式 ：xmlhttp.responseText\n\t    //什么时候获取？当服务器响应成功后再获取\n\t\n\t    //当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。\n\t            xmlhttp.onreadystatechange=function()\n\t            &#123;\n\t                //判断readyState就绪状态是否为4，判断status响应状态码是否为200\n\t                if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)\n\t                &#123;\n\t                   //获取服务器的响应结果\n\t                    var responseText = xmlhttp.responseText;\n\t                    alert(responseText);\n\t                &#125;\n\t            &#125;\n\t2. JQeury实现方式\n\t\t1. $.ajax()\n\t\t\t* 语法：$.ajax(&#123;键值对&#125;);\n\t\t\t //使用$.ajax()发送异步请求\n\t            $.ajax(&#123;\n\t                url:&quot;ajaxServlet1111&quot; , // 请求路径\n\t                type:&quot;POST&quot; , //请求方式,默认get\n\t                //data: &quot;username=jack&amp;age=23&quot;,//请求参数\n\t                data:&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23&#125;,\n\t                success:function (data) &#123;\n\t                    alert(data);\n\t                &#125;,//响应成功后的回调函数\n\t                error:function () &#123;\n\t                    alert(&quot;出错啦...&quot;)\n\t                &#125;,//表示如果请求响应出现错误，会执行的回调函数\n\t                dataType:&quot;text&quot;//设置接受到的响应数据的格式\n\t            &#125;);\n\t\t2. $.get()：发送get请求\n\t\t\t* 语法：$.get(url, [data], [callback], [type])\n\t\t\t\t* 参数：\n\t\t\t\t\t* url：请求路径\n\t\t\t\t\t* data：请求参数\n\t\t\t\t\t* callback：回调函数\n\t\t\t\t\t* type：响应结果的类型\n\n\t\t3. $.post()：发送post请求\n\t\t\t* 语法：$.post(url, [data], [callback], [type])\n\t\t\t\t* 参数：\n\t\t\t\t\t* url：请求路径\n\t\t\t\t\t* data：请求参数\n\t\t\t\t\t* callback：回调函数\n\t\t\t\t\t* type：响应结果的类型\n</code></pre>\n<p><img data-src=\"../pictures/10-Ajax-Json/image-20230824091008576.png\" alt=\"image-20230824091008576\" /></p>\n<h1 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h1>\n<pre><code>1. 概念： JavaScript Object Notation\t\tJavaScript对象表示法\n\tPerson p = new Person();\n\tp.setName(&quot;张三&quot;);\n\tp.setAge(23);\n\tp.setGender(&quot;男&quot;);\n\n\tvar p = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;;\n\n\t* json现在多用于存储和交换文本信息的语法\n\t* 进行数据的传输\n\t* JSON 比 XML 更小、更快，更易解析。\n\n2. 语法：\n\t1. 基本规则\n\t\t* 数据在名称/值对中：json数据是由键值对构成的\n\t\t\t* 键用引号(单双都行)引起来，也可以不使用引号\n\t\t\t* 值得取值类型：\n\t\t\t\t1. 数字（整数或浮点数）\n\t\t\t\t2. 字符串（在双引号中）\n\t\t\t\t3. 逻辑值（true 或 false）\n\t\t\t\t4. 数组（在方括号中）\t&#123;&quot;persons&quot;:[&#123;&#125;,&#123;&#125;]&#125;\n\t\t\t\t5. 对象（在花括号中） &#123;&quot;address&quot;:&#123;&quot;province&quot;：&quot;陕西&quot;....&#125;&#125;\n\t\t\t\t6. null\n\t\t* 数据由逗号分隔：多个键值对由逗号分隔\n\t\t* 花括号保存对象：使用&#123;&#125;定义json 格式\n\t\t* 方括号保存数组：[]\n\t2. 获取数据:\n\t\t1. json对象.键名\n\t\t2. json对象[&quot;键名&quot;]\n\t\t3. 数组对象[索引]\n\t\t4. 遍历\n\t\t\t//1.定义基本格式\n\t\t        var person = &#123;&quot;name&quot;: &quot;张三&quot;, age: 23, 'gender': true&#125;;\n\t\t\n\t\t        var ps = [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,\n\t\t            &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true&#125;,\n\t\t            &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false&#125;];\n\t\t          //获取person对象中所有的键和值\n\t\t\t  //for in 循环\n\t\t\t       /* for(var key in person)&#123;\n\t\t\t            //这样的方式获取不行。因为相当于  person.&quot;name&quot;\n\t\t\t            //alert(key + &quot;:&quot; + person.key);\n\t\t\t            alert(key+&quot;:&quot;+person[key]);\n\t\t\t        &#125;*/\n\t\t\t//获取ps中的所有值\n\t\t        for (var i = 0; i &lt; ps.length; i++) &#123;\n\t\t            var p = ps[i];\n\t\t            for(var key in p)&#123;\n\t\t                alert(key+&quot;:&quot;+p[key]);\n\t\t            &#125;\n\t\t        &#125;\n\n\n3. JSON数据和Java对象的相互转换\n\n\t* JSON解析器：\n\t\t* 常见的解析器：Jsonlib，Gson，fastjson，jackson\n\t\n\t1. JSON转为Java对象\n\t\t1. 导入jackson的相关jar包\n\t\t2. 创建Jackson核心对象 ObjectMapper\n\t\t3. 调用ObjectMapper的相关方法进行转换\n\t\t\t1. readValue(json字符串数据,Class)\n\t2. Java对象转换JSON\n\t\t1. 使用步骤：\n\t\t\t1. 导入jackson的相关jar包\n\t\t\t2. 创建Jackson核心对象 ObjectMapper\n\t\t\t3. 调用ObjectMapper的相关方法进行转换\n\t\t\t\t1. 转换方法：\n\t\t\t\t\t* writeValue(参数1，obj):\n\t                    参数1：\n\t              File：将obj对象转换为JSON字符串，并保存到指定的文件中\n\t              Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中\n\t              OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中\n\t                * writeValueAsString(obj):将对象转为json字符串\n\t\t\t\t2. 注解：\n\t\t\t\t\t1. @JsonIgnore：排除属性。\n\t\t\t\t\t2. @JsonFormat：属性值得格式化\n\t\t\t\t\t\t* @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)\n\t\t\t\t3. 复杂java对象转换\n\t\t\t\t\t1. List：数组\n\t\t\t\t\t2. Map：对象格式一致\n</code></pre>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例：</h1>\n<pre><code>* 校验用户名是否存在\n\t1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：\n\t\t1. $.get(type):将最后一个参数type指定为&quot;json&quot;\n\t\t2. 在服务器端设置MIME类型\n\t\t\tresponse.setContentType(&quot;application/json;charset=utf-8&quot;);\n</code></pre>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/9-JQuery/",
            "url": "https://jihaipeng123.github.io/9-JQuery/",
            "title": "9.JQuery",
            "date_published": "2023-08-28T03:31:17.000Z",
            "content_html": "<h1 id=\"jquery-基础\"><a class=\"anchor\" href=\"#jquery-基础\">#</a> JQuery 基础</h1>\n<ol>\n<li>概念： 一个 JavaScript 框架。简化 JS 开发</li>\n</ol>\n<ul>\n<li>\n<p>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库（或 JavaScript 框架）。jQuery 设计的宗旨\t是 “write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装 JavaScript 常用的功能代码，提供一种简便的 JavaScript 设计模式，优\t化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。</p>\n</li>\n<li>\n<p>JavaScript 框架：本质上就是一些 js 文件，封装了 js 的原生代码而已</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>快速入门</p>\n</li>\n<li>\n<p>步骤：<br />\n1. 下载 JQuery</p>\n<ul>\n<li>目前 jQuery 有三个大版本：<br />\n1.x：兼容 ie678, 使用最为广泛的，官方只做 BUG 维护，<br />\n功能不再新增。因此一般项目来说，使用 1.x 版本就可以了，<br />\n最终版本：1.12.4 (2016 年 5 月 20 日)<br />\n 2.x：不兼容 ie678，很少有人使用，官方只做 BUG 维护，<br />\n功能不再新增。如果不考虑兼容低版本的浏览器可以使用 2.x，<br />\n最终版本：2.2.4 (2016 年 5 月 20 日)<br />\n 3.x：不兼容 ie678，只支持最新的浏览器。除非特殊要求，<br />\n一般不会使用 3.x 版本的，很多老的 jQuery 插件不支持这个版本。<br />\n目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017 年 3 月 20 日）</li>\n<li>jquery-xxx.js 与 jquery-xxx.min.js 区别：\n<ol>\n<li>jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</li>\n<li>jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p>导入 JQuery 的 js 文件：导入 min.js 文件</p>\n<p>使用</p>\n<pre><code>  var div1 = $(&quot;#div1&quot;);\n  alert(div1.html());\n</code></pre>\n<p>JQuery 对象和 JS 对象区别与转换</p>\n<p>JQuery 对象在操作时，更加方便。</p>\n<p>JQuery 对象和 js 对象方法不通用的.</p>\n<p>两者相互转换</p>\n<ul>\n<li>jq -- &gt; js : jq 对象 [索引] 或者 jq 对象.get (索引)</li>\n<li>js -- &gt; jq : $(js 对象)</li>\n</ul>\n<p>选择器：筛选具有相似特征的元素 (标签)</p>\n<ol>\n<li>事件绑定<br />\n<a href=\"//1.xn--b1-wi6co09cbr2bwjv\"> //1. 获取 b1 按钮</a><br />\n $(&quot;#b1&quot;).click (function (){</li>\n</ol>\n<pre><code>alert(&quot;abc&quot;);\n &#125;);\n</code></pre>\n<ol start=\"2\">\n<li>入口函数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">(</span>function <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>window.onload  和 $(function) 区别</p>\n<pre><code> * window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉\n    $(function)可以定义多次的。\n</code></pre>\n<ol start=\"3\">\n<li>样式控制：css 方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// $(\"#div1\").css(\"background-color\",\"red\");</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t$<span class=\"token punctuation\">(</span><span class=\"token string\">\"#div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"backgroundColor\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​</p>\n<h1 id=\"选择器分类\"><a class=\"anchor\" href=\"#选择器分类\">#</a> 选择器分类</h1>\n<h2 id=\"基本选择器\"><a class=\"anchor\" href=\"#基本选择器\">#</a> 基本选择器</h2>\n<ol>\n<li>\n<p>标签选择器（元素选择器）</p>\n<ul>\n<li>语法： $(&quot;html 标签名&quot;) 获得所有匹配标签名称的元素语法： $(&quot;html 标签名&quot;) 获得所有匹配标签名称的元素</li>\n</ul>\n</li>\n<li>\n<p>id 选择器</p>\n<ul>\n<li>语法： $(&quot;#id 的属性值&quot;) 获得与指定 id 属性值匹配的元素</li>\n</ul>\n</li>\n<li>\n<p>类选择器</p>\n<ul>\n<li>语法： $(&quot;.class 的属性值&quot;) 获得与指定的 class 属性值匹配的元素</li>\n</ul>\n</li>\n<li>\n<p>并集选择器：</p>\n<ul>\n<li>语法： $(&quot;选择器 1, 选择器 2....&quot;) 获取多个选择器选中的所有元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"层级选择器\"><a class=\"anchor\" href=\"#层级选择器\">#</a> 层级选择器</h2>\n<ol>\n<li>\n<p>后代选择器</p>\n<ul>\n<li>语法： $(&quot;A B&quot;) 选择 A 元素内部的所有 B 元素</li>\n</ul>\n</li>\n<li>\n<p>子选择器</p>\n<ul>\n<li>语法： $(&quot;A&gt; B&quot;) 选择 A 元素内部的所有 B 子元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"属性选择器\"><a class=\"anchor\" href=\"#属性选择器\">#</a> 属性选择器</h2>\n<ol>\n<li>\n<p>属性名称选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名]&quot;) 包含指定属性的选择器</li>\n</ul>\n</li>\n<li>\n<p>属性选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名 =' 值 ']&quot;) 包含指定属性等于指定值的选择器</li>\n</ul>\n</li>\n<li>\n<p>复合属性选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名 =' 值 '][]...&quot;) 包含多个属性条件的选择器</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"过滤选择器\"><a class=\"anchor\" href=\"#过滤选择器\">#</a> 过滤选择器</h2>\n<ol>\n<li>\n<p>首元素选择器</p>\n<ul>\n<li>语法： :first 获得选择的元素中的第一个元素</li>\n</ul>\n</li>\n<li>\n<p>尾元素选择器</p>\n<ul>\n<li>语法： :last 获得选择的元素中的最后一个元素</li>\n</ul>\n</li>\n<li>\n<p>非元素选择器</p>\n<ul>\n<li>语法： :not (selector) 不包括指定内容的元素</li>\n</ul>\n</li>\n<li>\n<p>偶数选择器</p>\n<ul>\n<li>语法： :even 偶数，从 0 开始计数</li>\n</ul>\n</li>\n<li>\n<p>奇数选择器</p>\n<ul>\n<li>语法： :odd 奇数，从 0 开始计数</li>\n</ul>\n</li>\n<li>\n<p>等于索引选择器</p>\n<ul>\n<li>语法： :eq (index) 指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>大于索引选择器</p>\n<ul>\n<li>语法： :gt (index) 大于指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>小于索引选择器</p>\n<ul>\n<li>语法： :lt (index) 小于指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>标题选择器</p>\n<ul>\n<li>语法： :header 获得标题（h1~h6）元素，固定写法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"表单过滤选择器\"><a class=\"anchor\" href=\"#表单过滤选择器\">#</a> 表单过滤选择器</h2>\n<ol>\n<li>\n<p>可用元素选择器</p>\n<ul>\n<li>语法： :enabled 获得可用元素</li>\n</ul>\n</li>\n<li>\n<p>不可用元素选择器</p>\n<ul>\n<li>语法： :disabled 获得不可用元素</li>\n</ul>\n</li>\n<li>\n<p>选中选择器</p>\n<ul>\n<li>语法： :checked 获得单选 / 复选框选中的元素</li>\n</ul>\n</li>\n<li>\n<p>选中选择器</p>\n<ul>\n<li>语法： :selected 获得下拉框选中的元素</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"dom操作\"><a class=\"anchor\" href=\"#dom操作\">#</a> DOM 操作</h1>\n<h2 id=\"内容操作\"><a class=\"anchor\" href=\"#内容操作\">#</a> 内容操作</h2>\n<ol>\n<li>html (): 获取 / 设置元素的标签体内容   &lt;a&gt;&lt;font &gt; 内容 &lt;/font&gt;&lt;/a&gt;  --&gt; &lt;font &gt; 内容 &lt;/font&gt;</li>\n<li>text (): 获取 / 设置元素的标签体纯文本内容   &lt;a&gt;&lt;font &gt; 内容 &lt;/font&gt;&lt;/a&gt; --&gt; 内容</li>\n<li>val ()： 获取 / 设置元素的 value 属性值</li>\n</ol>\n<h2 id=\"属性操作\"><a class=\"anchor\" href=\"#属性操作\">#</a> 属性操作</h2>\n<ol>\n<li>通用属性操作\n<ol>\n<li>attr (): 获取 / 设置元素的属性</li>\n<li>removeAttr (): 删除属性</li>\n<li>prop (): 获取 / 设置元素的属性</li>\n<li>removeProp (): 删除属性</li>\n</ol>\n<ul>\n<li>attr 和 prop 区别？<br />\n1. 如果操作的是元素的固有属性，则建议使用 prop<br />\n2. 如果操作的是元素自定义的属性，则建议使用 attr</li>\n</ul>\n</li>\n<li>对 class 属性操作\n<ol>\n<li>addClass (): 添加 class 属性值</li>\n<li>removeClass (): 删除 class 属性值</li>\n<li>toggleClass (): 切换 class 属性</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>toggleClass(&quot;one&quot;):\n<ul>\n<li>判断如果元素对象上存在 class=&quot;one&quot;，则将属性值 one 删除掉。  如果元素对象上不存在 class=&quot;one&quot;，则添加</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"crud操作\"><a class=\"anchor\" href=\"#crud操作\">#</a> CRUD 操作</h2>\n<ol>\n<li>\n<p>append (): 父元素将子元素追加到末尾</p>\n<ul>\n<li>对象 1.append (对象 2): 将对象 2 添加到对象 1 元素内部，并且在末尾</li>\n</ul>\n</li>\n<li>\n<p>prepend (): 父元素将子元素追加到开头</p>\n<ul>\n<li>对象 1.prepend (对象 2): 将对象 2 添加到对象 1 元素内部，并且在开头</li>\n</ul>\n</li>\n<li>\n<p>appendTo():</p>\n<ul>\n<li>对象 1.appendTo (对象 2): 将对象 1 添加到对象 2 内部，并且在末尾</li>\n</ul>\n</li>\n<li>\n<p>prependTo()：</p>\n<ul>\n<li>对象 1.prependTo (对象 2): 将对象 1 添加到对象 2 内部，并且在开头</li>\n</ul>\n</li>\n<li>\n<p>after (): 添加元素到元素后边</p>\n<ul>\n<li>对象 1.after (对象 2)： 将对象 2 添加到对象 1 后边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>before (): 添加元素到元素前边</p>\n<ul>\n<li>对象 1.before (对象 2)： 将对象 2 添加到对象 1 前边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>insertAfter()</p>\n<ul>\n<li>对象 1.insertAfter (对象 2)：将对象 2 添加到对象 1 后边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>insertBefore()</p>\n<ul>\n<li>对象 1.insertBefore (对象 2)： 将对象 2 添加到对象 1 前边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>remove (): 移除元素</p>\n<ul>\n<li>对象.remove (): 将对象删除掉</li>\n</ul>\n</li>\n<li>\n<p>empty (): 清空元素的所有后代元素。</p>\n<ul>\n<li>对象.empty (): 将对象的后代元素全部清空，但是保留当前对象以及其属性节点<br />\n注意： $(&quot;#b&quot;).clone (); 克隆所有 b 元素；</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"jquery-高级\"><a class=\"anchor\" href=\"#jquery-高级\">#</a> JQuery 高级</h1>\n<h1 id=\"动画\"><a class=\"anchor\" href=\"#动画\">#</a> 动画</h1>\n<ol>\n<li>三种方式显示和隐藏元素\n<ol>\n<li>\n<p>默认显示和隐藏方式</p>\n<ol>\n<li>\n<p>show([speed,[easing],[fn]])</p>\n<ol>\n<li>speed：动画的速度。三个预定义的值 (&quot;slow&quot;,&quot;normal&quot;, &quot;fast&quot;) 或表示动画时长的毫秒数值 (如：1000)</li>\n<li>easing：用来指定切换效果，默认是 &quot;swing&quot;，可用参数 &quot;linear&quot;\n<ul>\n<li>swing：动画执行时效果是 先慢，中间快，最后又慢</li>\n<li>linear：动画执行时速度是匀速的</li>\n</ul>\n</li>\n<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>\n</ol>\n</li>\n<li>\n<p>hide([speed,[easing],[fn]])</p>\n</li>\n<li>\n<p>toggle([speed],[easing],[fn])</p>\n</li>\n</ol>\n</li>\n<li>\n<p>滑动显示和隐藏方式</p>\n<ol>\n<li>slideDown([speed],[easing],[fn])</li>\n<li>slideUp([speed,[easing],[fn]])</li>\n<li>slideToggle([speed],[easing],[fn])</li>\n</ol>\n</li>\n<li>\n<p>淡入淡出显示和隐藏方式</p>\n<ol>\n<li>fadeIn([speed],[easing],[fn])</li>\n<li>fadeOut([speed],[easing],[fn])</li>\n<li>fadeToggle([speed,[easing],[fn]])</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"遍历\"><a class=\"anchor\" href=\"#遍历\">#</a> 遍历</h1>\n<ol>\n<li>js 的遍历方式\n<ul>\n<li>for (初始化值；循环结束条件；步长)</li>\n</ul>\n</li>\n<li>jq 的遍历方式\n<ol>\n<li>jq 对象.each (callback)\n<ol>\n<li>\n<p>语法：<br />\njquery 对象.each (function (index,element){});<br />\n* index: 就是元素在集合中的索引<br />\n * element：就是集合中的每一个元素对象</p>\n<p>​    * this：集合中的每一个元素对象</p>\n</li>\n<li>\n<p>回调函数返回值：</p>\n<ul>\n<li>true: 如果当前 function 返回为 false，则结束循环 (break)。</li>\n<li>false: 如果当前 function 返回为 true，则结束本次循环，继续下次循环 (continue)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>$.each(object, [callback])</li>\n<li>for..of: jquery 3.0 版本之后提供的方式<br />\n for (元素对象 of 容器对象)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"事件绑定\"><a class=\"anchor\" href=\"#事件绑定\">#</a> 事件绑定</h1>\n<ol>\n<li>jquery 标准的绑定方式\n<ul>\n<li>jq 对象。事件方法 (回调函数)；</li>\n<li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</li>\n<li>表单对象.submit ();// 让表单提交</li>\n</ul>\n</li>\n<li>on 绑定事件 /off 解除绑定\n<ul>\n<li>jq 对象.on (&quot;事件名称&quot;, 回调函数)</li>\n<li>jq 对象.off (&quot;事件名称&quot;)</li>\n<li>如果 off 方法不传递任何参数，则将组件上的所有事件全部解绑</li>\n</ul>\n</li>\n<li>事件切换：toggle\n<ul>\n<li>\n<p>jq 对象.toggle (fn1,fn2...)</p>\n</li>\n<li>\n<p>当单击 jq 对象对应的组件后，会执行 fn1. 第二次点击会执行 fn2.....</p>\n</li>\n<li>\n<p>注意：1.9 版本 .toggle () 方法删除，jQuery Migrate（迁移）插件可以恢复此功能。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/jquery-migrate-1.0.0.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p>见代码</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/8JSP-EL-JSTL/",
            "url": "https://jihaipeng123.github.io/8JSP-EL-JSTL/",
            "title": "8.JSP&EL&JSTL",
            "date_published": "2023-08-28T02:08:20.000Z",
            "content_html": "<h1 id=\"jsp入门学习\"><a class=\"anchor\" href=\"#jsp入门学习\">#</a> JSP：入门学习</h1>\n<ol>\n<li>\n<p>概念：</p>\n<ul>\n<li>Java Server Pages： java 服务器端页面\n<ul>\n<li>可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>\n<li>用于简化书写！！！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>原理</p>\n<ul>\n<li>JSP 本质上就是一个 Servlet</li>\n</ul>\n</li>\n<li>\n<p>JSP 的脚本：JSP 定义 Java 代码的方式</p>\n<ol>\n<li>&lt;%  代码 %&gt;：定义的 java 代码，在 service 方法中。service 方法中可以定义什么，该脚本中就可以定义什么。</li>\n<li>&lt;%! 代码 %&gt;：定义的 java 代码，在 jsp 转换后的 java 类的成员位置。</li>\n<li>&lt;%= 代码 %&gt;：定义的 java 代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li>\n</ol>\n</li>\n<li>\n<p>JSP 的内置对象：</p>\n<ul>\n<li>在 jsp 页面中不需要获取和创建，可以直接使用的对象</li>\n<li>jsp 一共有 9 个内置对象。</li>\n<li>今天学习 3 个：\n<ul>\n<li>request</li>\n<li>response</li>\n<li>out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似\n<ul>\n<li>response.getWriter () 和 out.write () 的区别：\n<ul>\n<li>在 tomcat 服务器真正给客户端做出响应之前，会先找 response 缓冲区数据，再找 out 缓冲区数据。</li>\n<li>response.getWriter () 数据输出永远在 out.write () 之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h2>\n<ul>\n<li>作用：用于配置 JSP 页面，导入资源文件</li>\n<li>格式：<br />\n&lt;%@ 指令名称 属性名 1 = 属性值 1 属性名 2 = 属性值 2 ... %&gt;</li>\n<li>分类：\n<ol>\n<li>\n<p>page\t\t： 配置 JSP 页面的<br />\n * contentType：等同于 response.setContentType ()</p>\n<ol>\n<li>设置响应体的 mime 类型以及字符集</li>\n<li>设置当前 jsp 页面的编码（只能是高级的 IDE 才能生效，如果使用低级工具，则需要设置 pageEncoding 属性设置当前页面的字符集）</li>\n</ol>\n</li>\n</ol>\n<pre><code>* import：导包\n* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面\n* isErrorPage：标识当前也是是否是错误页面。\n\t* true：是，可以使用内置对象exception\n\t* false：否。默认值。不可以使用内置对象exception\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>include\t： 页面包含的。导入页面的资源文件</p>\n<ul>\n<li>&lt;%@include file=&quot;top.jsp&quot;%&gt;</li>\n</ul>\n</li>\n<li>\n<p>taglib\t： 导入资源<br />\n * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuc3VuLmNvbS9qc3AvanN0bC9jb3Jl\">http://java.sun.com/jsp/jstl/core</span>&quot; %&gt;<br />\n* prefix：前缀，自定义的</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<ol>\n<li>html 注释：<br />\n&lt;!-- --&gt;: 只能注释 html 代码片段</li>\n<li>jsp 注释：推荐使用<br />\n &lt;%-- --%&gt;：可以注释所有</li>\n</ol>\n<h2 id=\"内置对象\"><a class=\"anchor\" href=\"#内置对象\">#</a> 内置对象</h2>\n<ul>\n<li>在 jsp 页面中不需要创建，直接使用的对象</li>\n<li>一共有 9 个：<br />\n变量名\t\t\t\t\t真实类型\t\t\t\t\t\t作用\n<ul>\n<li>pageContext\t\t\t\tPageContext\t\t\t\t\t当前页面共享数据，还可以获取其他八个内置对象</li>\n<li>request\t\t\t\t\tHttpServletRequest\t\t\t一次请求访问的多个资源 (转发)</li>\n<li>session\t\t\t\t\tHttpSession\t\t\t\t\t一次会话的多个请求间</li>\n<li>application\t\t\t\tServletContext\t\t\t\t所有用户间共享数据</li>\n<li>response\t\t\t\t\tHttpServletResponse\t\t\t响应对象</li>\n<li>page\t\t\t\t\t\tObject\t\t\t\t\t\t当前页面 (Servlet) 的对象  this</li>\n<li>out\t\t\t\t\t\tJspWriter\t\t\t\t\t输出对象，数据输出到页面上</li>\n<li>config\t\t\t\t\tServletConfig\t\t\t\tServlet 的配置对象</li>\n<li>exception\t\t\t\t\tThrowable\t\t\t\t\t异常对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"mvc开发模式\"><a class=\"anchor\" href=\"#mvc开发模式\">#</a> MVC：开发模式</h1>\n<ol>\n<li>\n<p>jsp 演变历史</p>\n<ol>\n<li>早期只有 servlet，只能使用 response 输出标签数据，非常麻烦</li>\n<li>后来又 jsp，简化了 Servlet 的开发，如果过度使用 jsp，在 jsp 中即写大量的 java 代码，有写 html 表，造成难于维护，难于分工协作</li>\n<li>再后来，java 的 web 开发，借鉴 mvc 开发模式，使得程序的设计更加合理性</li>\n</ol>\n</li>\n<li>\n<p>MVC：</p>\n<ol>\n<li>M：Model，模型。JavaBean\n<ul>\n<li>完成具体的业务操作，如：查询数据库，封装对象</li>\n</ul>\n</li>\n<li>V：View，视图。JSP\n<ul>\n<li>展示数据</li>\n</ul>\n</li>\n<li>C：Controller，控制器。Servlet\n<ul>\n<li>获取用户的输入</li>\n<li>调用模型</li>\n<li>将数据交给视图进行展示</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>优缺点：\n<ol>\n<li>\n<p>优点：</p>\n<ol>\n<li>耦合性低，方便维护，可以利于分工协作</li>\n<li>重用性高</li>\n</ol>\n</li>\n<li>\n<p>缺点：</p>\n<ol>\n<li>使得项目架构变得复杂，对开发人员要求高</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"../pictures/8JSP-EL-JSTL/image-20230828102729900.png\" alt=\"image-20230828102729900\" /></p>\n<h1 id=\"el表达式\"><a class=\"anchor\" href=\"#el表达式\">#</a> EL 表达式</h1>\n<ol>\n<li>\n<p>概念：Expression Language 表达式语言</p>\n</li>\n<li>\n<p>作用：替换和简化 jsp 页面中 java 代码的编写</p>\n</li>\n<li 表达式=\"\">\n<p>语法：$</p>\n</li>\n<li>\n<p>注意：</p>\n<ul>\n<li>jsp 默认支持 el 表达式的。如果要忽略 el 表达式\n<ol>\n<li>设置 jsp 中 page 指令中：isELIgnored=&quot;true&quot; 忽略当前 jsp 页面中所有的 el 表达式</li>\n<li>${表达式} ：忽略当前这个 el 表达式</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>使用：</p>\n<ol>\n<li>\n<p>运算：</p>\n<ul>\n<li>运算符：\n<ol>\n<li>算数运算符： + - * /(div) %(mod)</li>\n<li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li>\n<li>逻辑运算符： &amp;&amp;(and) ||(or) !(not)</li>\n<li>空运算符： empty\n<ul>\n<li>功能：用于判断字符串、集合、数组对象是否为 null 或者长度是否为 0</li>\n<li>${empty list}: 判断字符串、集合、数组对象是否为 null 或者长度为 0</li>\n<li>${not empty str}: 表示判断字符串、集合、数组对象是否不为 null 并且 长度 &gt; 0</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>获取值</p>\n<ol>\n<li>el 表达式只能从域对象中获取值</li>\n<li>语法：</li>\n<li>${域名称。键名}：从指定域中获取指定键的值</li>\n</ol>\n<pre><code> * 域名称：\n \t1. pageScope\t\t--&gt; pageContext\n \t2. requestScope \t--&gt; request\n \t3. sessionScope \t--&gt; session\n \t4. applicationScope --&gt; application（ServletContext）\n * 举例：在request域中存储了name=张三\n * 获取：$&#123;requestScope.name&#125;\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p>\n</li>\n<li 域名称.键名.属性名=\"\">\n<p>获取对象、List 集合、Map 集合的值<br />\n 1. 对象：$</p>\n<ul>\n<li>本质上会去调用对象的 getter 方法</li>\n</ul>\n</li>\n</ol>\n<pre><code> 2. List集合：$&#123;域名称.键名[索引]&#125;\n 3. Map集合：\n \t* $&#123;域名称.键名.key名称&#125;\n \t* $&#123;域名称.键名[&quot;key名称&quot;]&#125;\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>隐式对象：</p>\n<ul>\n<li>el 表达式中有 11 个隐式对象</li>\n<li>pageContext：\n<ul>\n<li>获取 jsp 其他八个内置对象\n<ul>\n<li>${pageContext.request.contextPath}：动态获取虚拟目录.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"jstl\"><a class=\"anchor\" href=\"#jstl\">#</a> JSTL</h1>\n<ol>\n<li>\n<p>概念：JavaServer Pages Tag Library  JSP 标准标签库</p>\n<ul>\n<li>是由 Apache 组织提供的开源的免费的 jsp 标签\t\t&lt;标签&gt;</li>\n</ul>\n</li>\n<li>\n<p>作用：用于简化和替换 jsp 页面上的 java 代码</p>\n</li>\n<li>\n<p>使用步骤：</p>\n<ol>\n<li>导入 jstl 相关 jar 包</li>\n<li>引入标签库：taglib 指令：  &lt;%@ taglib %&gt;</li>\n<li>使用标签</li>\n</ol>\n</li>\n<li>\n<p>常用的 JSTL 标签</p>\n<ol>\n<li>\n<p>if: 相当于 java 代码的 if 语句</p>\n<ol>\n<li>属性：\n<ul>\n<li>test 必须属性，接受 boolean 表达式\n<ul>\n<li>如果表达式为 true，则显示 if 标签体内容，如果为 false，则不显示标签体内容</li>\n<li>一般情况下，test 属性值会结合 el 表达式一起使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span> c<span class=\"token operator\">:</span><span class=\"token keyword\">if</span>标签没有<span class=\"token keyword\">else</span>情况，想要<span class=\"token keyword\">else</span>情况，则可以在定义一个c<span class=\"token operator\">:</span><span class=\"token keyword\">if</span>标签</pre></td></tr></table></figure></li>\n</ol>\n<pre><code>2. choose:相当于java代码的switch语句\n1. 使用choose标签声明         \t\t\t相当于switch声明\n   2. 使用when标签做判断         \t\t\t相当于case\n  3. 使用otherwise标签做其他情况的声明    \t相当于default\n\n3. foreach:相当于java代码的for语句\n  1. 完成重复的操作\n      for(int i = 0; i &lt; 10; i ++)&#123;\n\n      &#125;\n      * 属性：\n          begin：开始值（包含）\n          end：结束值（包含）\n          var：临时变量\n          step：步长\n          varStatus:循环状态对象\n              index:容器中元素的索引，从0开始\n              count:循环次数，从1开始\n  2. 遍历容器\n      List&lt;User&gt; list;\n      for(User user : list)&#123;\n\n      &#125;\n\n      * 属性：\n          items:容器对象\n          var:容器中元素的临时变量\n          varStatus:循环状态对象\n              index:容器中元素的索引，从0开始\n              count:循环次数，从1开始\n</code></pre>\n</li>\n<li>\n<p>练习：</p>\n<ul>\n<li>需求：在 request 域中有一个存有 User 对象的 List 集合。需要使用 jstl+el 将 list 集合数据展示到 jsp 页面的表格 table 中</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"三层架构软件设计架构\"><a class=\"anchor\" href=\"#三层架构软件设计架构\">#</a> 三层架构：软件设计架构</h1>\n<ol>\n<li>界面层 (表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li>\n<li>业务逻辑层：处理业务逻辑的。</li>\n<li>数据访问层：操作数据存储文件。</li>\n</ol>\n<p><img data-src=\"../pictures/8JSP-EL-JSTL/image-20230828103017151.png\" alt=\"image-20230828103017151\" /></p>\n<h1 id=\"案例用户信息列表展示\"><a class=\"anchor\" href=\"#案例用户信息列表展示\">#</a> 案例：用户信息列表展示</h1>\n<ol>\n<li>需求：用户信息的增删改查操作</li>\n<li>设计：</li>\n<li>技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</li>\n<li>数据库设计：</li>\n</ol>\n<pre><code>create database day17; -- 创建数据库\nuse day17; \t\t\t   -- 使用数据库\ncreate table user(   -- 创建表\n\tid int primary key auto_increment,\n\tname varchar(20) not null,\n\tgender varchar(5),\n\tage int,\n\taddress varchar(32),\n\tqq\tvarchar(20),\n\temail varchar(50)\n);\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>开发：</p>\n</li>\n<li>\n<p>环境搭建</p>\n<ol>\n<li>创建数据库环境<br />\n 2. 创建项目，导入需要的 jar 包</li>\n</ol>\n</li>\n<li>\n<p>编码</p>\n</li>\n<li>\n<p>测试</p>\n</li>\n<li>\n<p>部署运维</p>\n</li>\n</ol>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/7Cookie&Session/",
            "url": "https://jihaipeng123.github.io/7Cookie&Session/",
            "title": "7.Cookie&Session",
            "date_published": "2023-08-28T01:25:43.000Z",
            "content_html": "<p>会话技术</p>\n<ol>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n<h2 id=\"会话技术\"><a class=\"anchor\" href=\"#会话技术\">#</a> 会话技术</h2>\n<ol>\n<li>会话：一次会话中包含多次请求和响应。\n<ul>\n<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>\n</ul>\n</li>\n<li>功能：在一次会话的范围内的多次请求间，共享数据</li>\n<li>方式：\n<ol>\n<li>客户端会话技术：Cookie</li>\n<li>服务器端会话技术：Session</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie：</h2>\n<ol>\n<li>\n<p>概念：客户端会话技术，将数据保存到客户端</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ul>\n<li>使用步骤：\n<ol>\n<li>创建 Cookie 对象，绑定数据\n<ul>\n<li>new Cookie(String name, String value)</li>\n</ul>\n</li>\n<li>发送 Cookie 对象\n<ul>\n<li>response.addCookie(Cookie cookie)</li>\n</ul>\n</li>\n<li>获取 Cookie，拿到数据\n<ul>\n<li>Cookie[]  request.getCookies()</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理</p>\n<ul>\n<li>基于响应头 set-cookie 和请求头 cookie 实现</li>\n</ul>\n</li>\n<li>\n<p>cookie 的细节</p>\n<ol>\n<li>一次可不可以发送多个 cookie?\n<ul>\n<li>可以</li>\n<li>可以创建多个 Cookie 对象，使用 response 调用多次 addCookie 方法发送 cookie 即可。</li>\n</ul>\n</li>\n<li>cookie 在浏览器中保存多长时间？\n<ol>\n<li>默认情况下，当浏览器关闭后，Cookie 数据被销毁</li>\n<li>持久化存储：\n<ul>\n<li>setMaxAge(int seconds)\n<ol>\n<li>正数：将 Cookie 数据写到硬盘的文件中。持久化存储。并指定 cookie 存活时间，时间到后，cookie 文件自动失效</li>\n<li>负数：默认值</li>\n<li>零：删除 cookie 信息</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>cookie 能不能存中文？\n<ul>\n<li>在 tomcat 8 之前 cookie 中不能直接存储中文数据。\n<ul>\n<li>需要将中文数据转码 --- 一般采用 URL 编码 (% E3)</li>\n</ul>\n</li>\n<li>在 tomcat 8 之后，cookie 支持中文数据。特殊字符还是不支持，建议使用 URL 编码存储，URL 解码解析</li>\n</ul>\n</li>\n<li>cookie 共享问题？\n<ol>\n<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</li>\n</ol>\n<ul>\n<li>\n<p>默认情况下 cookie 不能共享</p>\n</li>\n<li>\n<p>setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前的虚拟目录</p>\n<ul>\n<li>如果要共享，则可以将 path 设置为 &quot;/&quot;</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>不同的 tomcat 服务器间 cookie 共享问题？\n<ul>\n<li>setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享</li>\n<li>setDomain (&quot;.baidu.com&quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>​\t\t\t<br />\n​</p>\n<ol start=\"5\">\n<li>\n<p>Cookie 的特点和作用</p>\n<ol>\n<li>cookie 存储数据在客户端浏览器</li>\n<li>浏览器对于单个 cookie 的大小有限制 (4kb) 以及 对同一个域名下的总 cookie 数量也有限制 (20 个)</li>\n</ol>\n<ul>\n<li>作用：\n<ol>\n<li>cookie 一般用于存出少量的不太敏感的数据</li>\n<li>在不登录的情况下，完成服务器对客户端的身份识别</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>案例：记住上一次访问时间</p>\n<ol>\n<li>\n<p>需求：</p>\n<ol>\n<li>访问一个 Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li>\n<li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串</li>\n</ol>\n</li>\n<li>\n<p>分析：</p>\n<ol>\n<li>可以采用 Cookie 来完成</li>\n<li>在服务器中的 Servlet 判断是否有一个名为 lastTime 的 cookie\n<ol>\n<li>有：不是第一次访问\n<ol>\n<li>响应数据：欢迎回来，您上次访问时间为：2018 年 6 月 10 日 11:50:20</li>\n<li>写回 Cookie：lastTime=2018 年 6 月 10 日 11:50:01</li>\n</ol>\n</li>\n<li>没有：是第一次访问\n<ol>\n<li>响应数据：您好，欢迎您首次访问</li>\n<li>写回 Cookie：lastTime=2018 年 6 月 10 日 11:50:01</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>代码实现：</p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLDecoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLEncoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookieTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        <span class=\"token comment\">// 设置响应的消息体的数据格式以及编码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        <span class=\"token comment\">//1. 获取所有 Cookie</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有 cookie 为 lastTime</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t        <span class=\"token comment\">//2. 遍历 cookie 数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cookies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">:</span> cookies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t                <span class=\"token comment\">//3. 获取 cookie 的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t                <span class=\"token comment\">//4. 判断名称是否是：lastTime</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t                    <span class=\"token comment\">// 有该 Cookie，不是第一次访问</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有 lastTime 的 cookie</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t                    <span class=\"token comment\">// 设置 Cookie 的 value</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t                    <span class=\"token comment\">// 获取当前时间的字符串，重新设置 Cookie 的值，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t                    <span class=\"token class-name\">Date</span> date  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t                    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t                    <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码前：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t                    <span class=\"token comment\">//URL 编码</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t                    str_date <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码后：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t                    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t                    <span class=\"token comment\">// 设置 cookie 的存活时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t                    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个月</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t                    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                         <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t                <span class=\"token comment\">// 获取 Cookie 的 value，时间</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t                 <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t                 <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码前：\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t                 <span class=\"token comment\">//URL 解码：</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t                 value <span class=\"token operator\">=</span> <span class=\"token class-name\">URLDecoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t                 <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码后：\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t                 response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>欢迎回来，您上次访问时间为:\"</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> cookies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t            <span class=\"token comment\">// 没有，第一次访问</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 设置 Cookie 的 value</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t            <span class=\"token comment\">// 获取当前时间的字符串，重新设置 Cookie 的值，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t            <span class=\"token class-name\">Date</span> date  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t            <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t            <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码前：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t            <span class=\"token comment\">//URL 编码</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t            str_date <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码后：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t            <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">,</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t            <span class=\"token comment\">// 设置 cookie 的存活时间</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t            cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个月</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>您好，欢迎您首次访问&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"session主菜\"><a class=\"anchor\" href=\"#session主菜\">#</a> Session：主菜</h2>\n<ol>\n<li>\n<p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ol>\n<li>获取 HttpSession 对象：<br />\nHttpSession session = request.getSession();</li>\n<li>使用 HttpSession 对象：<br />\nObject getAttribute(String name)<br />\nvoid setAttribute(String name, Object value)<br />\nvoid removeAttribute(String name)</li>\n</ol>\n</li>\n<li>\n<p>原理</p>\n<ul>\n<li>Session 的实现是依赖于 Cookie 的。</li>\n</ul>\n</li>\n<li>\n<p>细节</p>\n<p>1. 当客户端关闭后，服务器不关闭，两次获取 session 是否为同一个？</p>\n<p>默认情况下。不是。</p>\n<p>如果需要相同，则可以创建 Cookie, 键为 JSESSIONID，设置最大存活时间，让 cookie 持久化保存。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Cookie</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  c<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2. 客户端不关闭，服务器关闭后，两次获取的 session 是同一个吗？</p>\n<ul>\n<li>不是同一个，但是要确保数据不丢失。tomcat 自动完成以下工作\n<ul>\n<li>session 的钝化：\n<ul>\n<li>在服务器正常关闭之前，将 session 对象系列化到硬盘上</li>\n</ul>\n</li>\n<li>session 的活化：\n<ul>\n<li>在服务器启动后，将 session 文件转化为内存中的 session 对象即可。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>3.session 什么时候被销毁？</p>\n<ol>\n<li>\n<p>服务器关闭</p>\n</li>\n<li>\n<p>session 对象调用 invalidate () 。</p>\n</li>\n<li>\n<p>session 默认失效时间 30 分钟<br />\n选择性配置修改</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>session<span class=\"token operator\">-</span>config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>session<span class=\"token operator\">-</span>timeout<span class=\"token operator\">></span><span class=\"token number\">30</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>session<span class=\"token operator\">-</span>timeout<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>session<span class=\"token operator\">-</span>config<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>session 的特点</p>\n<ol>\n<li>session 用于存储一次会话的多次请求的数据，存在服务器端</li>\n<li>session 可以存储任意类型，任意大小的数据</li>\n</ol>\n<ul>\n<li>session 与 Cookie 的区别：\n<ol>\n<li>session 存储数据在服务器端，Cookie 在客户端</li>\n<li>session 没有数据大小限制，Cookie 有</li>\n<li>session 数据安全，Cookie 相对于不安全</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"案例验证码\"><a class=\"anchor\" href=\"#案例验证码\">#</a> 案例：验证码</h2>\n<ol>\n<li>案例需求：\n<ol>\n<li>访问带有验证码的登录页面 login.jsp</li>\n<li>用户输入用户名，密码以及验证码。\n<ul>\n<li>如果用户名和密码输入有误，跳转登录页面，提示：用户名或密码错误</li>\n<li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li>\n<li>如果全部输入正确，则跳转到主页 success.jsp，显示：用户名，欢迎您</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>​</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/IDEA%E4%B8%AD%E9%9B%86%E6%88%90Git/",
            "url": "https://jihaipeng123.github.io/IDEA%E4%B8%AD%E9%9B%86%E6%88%90Git/",
            "title": "IDEA中集成Git",
            "date_published": "2023-08-17T08:22:14.000Z",
            "content_html": "<p>打开 gitee 并选择新建仓库</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163250198.png\" alt=\"image-20230817163250198\" /></p>\n<p>创建仓库，填入仓库名称</p>\n<p>将代码克隆到本地</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163056512.png\" alt=\"image-20230817163056512\" /></p>\n<p>打开 git-bash 来克隆</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163225902.png\" alt=\"image-20230817163225902\" /></p>\n<p>IDEA 识别 gitee</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163320460.png\" alt=\"image-20230817163320460\" /></p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163340889.png\" alt=\"image-20230817163340889\" /></p>\n<p>新建项目</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163556682.png\" alt=\"\" /></p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163724830.png\" alt=\"image-20230817163724830\" /></p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163832097.png\" alt=\"\" /></p>\n<p>建完项目后绑定 git</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817180920519.png\" alt=\"image-20230817180920519\" /></p>\n<p>将写好的代码上传至 gitee</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817163905774.png\" alt=\"image-20230817163905774\" /></p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817164059337.png\" alt=\"image-20230817164059337\" /></p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817164218082.png\" alt=\"image-20230817164218082\" /></p>\n<p>打开 gitee 可以看到上传成功</p>\n<p><img data-src=\"../pictures/IDEA-Git/image-20230817164249825.png\" alt=\"image-20230817164249825\" /></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/git%E8%AF%A6%E8%A7%A3/",
            "url": "https://jihaipeng123.github.io/git%E8%AF%A6%E8%A7%A3/",
            "title": "git详解",
            "date_published": "2023-08-17T07:42:30.000Z",
            "content_html": "<h1 id=\"版本控制\"><a class=\"anchor\" href=\"#版本控制\">#</a> 版本控制</h1>\n<h2 id=\"什么是版本控制\"><a class=\"anchor\" href=\"#什么是版本控制\">#</a> 什么是版本控制</h2>\n<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>\n<ul>\n<li>实现跨区域多人协同开发</li>\n<li>追踪和记载一个或者多个文件的历史记录</li>\n<li>组织和保护你的源代码和文档</li>\n<li>统计工作量</li>\n<li>并行开发、提高开发效率</li>\n<li>跟踪记录整个软件的开发过程</li>\n<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>\n</ul>\n<p>简单说就是用于管理多人协同开发项目的技术。</p>\n<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>\n<h2 id=\"常见的版本控制工具\"><a class=\"anchor\" href=\"#常见的版本控制工具\">#</a> 常见的版本控制工具</h2>\n<p>主流的版本控制器有如下这些：</p>\n<ul>\n<li><strong>Git</strong></li>\n<li><strong>SVN</strong>（Subversion）</li>\n<li><strong>CVS</strong>（Concurrent Versions System）</li>\n<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>\n<li><strong>TFS</strong>（Team Foundation Server）</li>\n<li>Visual Studio Online</li>\n</ul>\n<p>现在影响力最大且使用最广泛的是 Git 与 SVN</p>\n<h2 id=\"版本控制分类\"><a class=\"anchor\" href=\"#版本控制分类\">#</a> 版本控制分类</h2>\n<h3 id=\"本地版本控制\"><a class=\"anchor\" href=\"#本地版本控制\">#</a> 本地版本控制</h3>\n<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。</p>\n<p><img data-src=\"../pictures/git/image-20230817154844686.png\" alt=\"image-20230817154844686\" /></p>\n<h3 id=\"集中版本控制-svn\"><a class=\"anchor\" href=\"#集中版本控制-svn\">#</a> 集中版本控制 SVN</h3>\n<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>\n<p><img data-src=\"../pictures/git%E8%AF%A6%E8%A7%A3/image-20230817154918368.png\" alt=\"image-20230817154918368\" /></p>\n<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。</p>\n<h3 id=\"分布式版本控制-git\"><a class=\"anchor\" href=\"#分布式版本控制-git\">#</a> 分布式版本控制 Git</h3>\n<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>\n<p><img data-src=\"../pictures/git/image-20230817155031419.png\" alt=\"image-20230817155031419\" /></p>\n<h3 id=\"git与svn的主要区别\"><a class=\"anchor\" href=\"#git与svn的主要区别\">#</a> Git 与 SVN 的主要区别</h3>\n<p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>\n<h1 id=\"git的历史\"><a class=\"anchor\" href=\"#git的历史\">#</a> Git 的历史</h1>\n<p>Git 是目前世界上最先进的分布式版本控制系统。</p>\n<p>Git 是免费、开源的，最初 Git 是为辅助 Linux 内核开发的，来替代 BitKeeper！</p>\n<h1 id=\"git环境配置\"><a class=\"anchor\" href=\"#git环境配置\">#</a> Git 环境配置</h1>\n<h2 id=\"软件下载\"><a class=\"anchor\" href=\"#软件下载\">#</a> 软件下载</h2>\n<p>打开 [git 官网] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8lRUYlQkMlOEMlRTQlQjglOEIlRTglQkQlQkRnaXQlRTUlQUYlQjklRTUlQkElOTQlRTYlOTMlOEQlRTQlQkQlOUMlRTclQjMlQkIlRTclQkIlOUYlRTclOUElODQlRTclODklODglRTYlOUMlQUMlRTMlODAlODI=\">https://git-scm.com/，下载 git 对应操作系统的版本。</span></p>\n<p>所有东西下载慢的话就可以去找镜像！</p>\n<p>官网下载太慢，我们可以使用淘宝镜像下载：<span class=\"exturl\" data-url=\"aHR0cDovL25wbS50YW9iYW8ub3JnL21pcnJvcnMvZ2l0LWZvci13aW5kb3dzLw==\">http://npm.taobao.org/mirrors/git-for-windows/</span></p>\n<p>安装：无脑下一步即可！安装完毕就可以使用了！</p>\n<h2 id=\"启动git\"><a class=\"anchor\" href=\"#启动git\">#</a> 启动 Git</h2>\n<p>安装成功后在开始菜单中会有 Git 项，菜单下有 3 个程序：任意文件夹下右键也可以看到对应的程序！</p>\n<p><img data-src=\"../pictures/git/image-20230817155437522.png\" alt=\"image-20230817155437522\" /></p>\n<p>**Git Bash：**Unix 与 Linux 风格的命令行，使用最多，推荐最多</p>\n<p>**Git CMD：**Windows 风格的命令行</p>\n<p><strong>Git GUI</strong>：图形界面的 Git，不建议初学者使用，尽量先熟悉常用命令</p>\n<h2 id=\"常用的linux命令\"><a class=\"anchor\" href=\"#常用的linux命令\">#</a> 常用的 Linux 命令</h2>\n<pre><code class=\"language-Java\">平时一定要多使用这些基础的命令！\n1）cd : 改变目录。\n2）cd . . 回退到上一个目录，直接cd进入默认目录\n3）pwd : 显示当前所在的目录路径。\n4）ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。\n5）touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。\n6）m:  删除一个文件, rm index.js 就会把index.js文件删除。\n7）mkdir:  新建一个目录,就是新建一个文件夹。\n8）rm -r :  删除一个文件夹, rm -r src 删除src目录\n\trm -rf / 切勿在Linux中尝试！删除电脑中全部文件！\n9）mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件\t夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。\n10）reset 重新初始化终端/清屏。\n11）clear 清屏。\n12）history 查看命令历史。\n13）help 帮助。\n14）exit 退出。\n15）#表示注释\n</code></pre>\n<h2 id=\"git配置\"><a class=\"anchor\" href=\"#git配置\">#</a> Git 配置</h2>\n<p>所有的配置文件，其实都保存在本地！</p>\n<p>查看配置 git config -l</p>\n<p>查看不同级别的配置文件：</p>\n<pre><code>#查看系统configgit config --system --list　　\n#查看当前用户（global）配置git config --global  --list\n</code></pre>\n<p><strong>Git 相关的配置文件：</strong></p>\n<p>1）、Git\\etc\\gitconfig  ：Git 安装目录下的 gitconfig   --system 系统级</p>\n<p>2）、C:\\Users\\ji\\ .gitconfig   只适用于当前登录用户的配置  --global 全局</p>\n<h2 id=\"设置用户名与邮箱用户标识必要\"><a class=\"anchor\" href=\"#设置用户名与邮箱用户标识必要\">#</a> 设置用户名与邮箱（用户标识，必要）</h2>\n<p>当你安装 Git 后首先要做的事情是设置你的用户名称和 e-mail 地址。这是非常重要的，因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>\n<pre><code>git config --global user.name &quot;jihaipeng666&quot; #名称\ngit config --global user.email 3204568531@qq.com   #邮箱\n</code></pre>\n<h1 id=\"git基本理论重要\"><a class=\"anchor\" href=\"#git基本理论重要\">#</a> Git 基本理论（重要）</h1>\n<h2 id=\"三个区域\"><a class=\"anchor\" href=\"#三个区域\">#</a> 三个区域</h2>\n<p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote Directory) 就可以分为四个工作区域。</p>\n<p><img data-src=\"../pictures/git/image-20230817160508461.png\" alt=\"image-20230817160508461\" /></p>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p>本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本：</p>\n<p><img data-src=\"../pictures/git%E8%AF%A6%E8%A7%A3/image-20230817160656063.png\" alt=\"image-20230817160656063\" /></p>\n<ul>\n<li>Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</li>\n<li>WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\n<li>.git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</li>\n<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。</li>\n<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。</li>\n<li>Stash：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。</li>\n</ul>\n<h2 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h2>\n<p>git 的工作流程一般是这样的：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到 git 仓库。</p>\n<p>因此，git 管理的文件有三种状态：已修改（modified）, 已暂存（staged）, 已提交 (committed)</p>\n<p><img data-src=\"../pictures/git/image-20230817160751097.png\" alt=\"image-20230817160751097\" /></p>\n<h1 id=\"git项目搭建\"><a class=\"anchor\" href=\"#git项目搭建\">#</a> Git 项目搭建</h1>\n<h2 id=\"创建工作目录与常用指令\"><a class=\"anchor\" href=\"#创建工作目录与常用指令\">#</a> 创建工作目录与常用指令</h2>\n<p>工作目录（WorkSpace) 一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>\n<p>日常使用只要记住下图 6 个命令：</p>\n<p><img data-src=\"../pictures/git%E8%AF%A6%E8%A7%A3/image-20230817160843108.png\" alt=\"image-20230817160843108\" /></p>\n<h2 id=\"本地仓库搭建\"><a class=\"anchor\" href=\"#本地仓库搭建\">#</a> 本地仓库搭建</h2>\n<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>\n<p>1、创建全新的仓库，需要用 GIT 管理的项目的根目录执行：</p>\n<pre><code># 在当前目录新建一个Git代码库$ git init\n</code></pre>\n<p>2、执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面。</p>\n<h2 id=\"克隆远程仓库\"><a class=\"anchor\" href=\"#克隆远程仓库\">#</a> 克隆远程仓库</h2>\n<p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>\n<pre><code># 克隆一个项目和它的整个代码历史(版本信息)$ git clone [url]  # https://gitee.com/kuangstudy/openclass.git\n</code></pre>\n<h1 id=\"git文件操作\"><a class=\"anchor\" href=\"#git文件操作\">#</a> Git 文件操作</h1>\n<h2 id=\"文件的四种状态\"><a class=\"anchor\" href=\"#文件的四种状态\">#</a> 文件的四种状态</h2>\n<p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li>Untracked: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged.</li>\n<li>Unmodify: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified. 如果使用 git rm 移出版本库，则成为 Untracked 文件</li>\n<li>Modified: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li>\n<li>Staged: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li>\n</ul>\n<h2 id=\"查看文件状态\"><a class=\"anchor\" href=\"#查看文件状态\">#</a> 查看文件状态</h2>\n<p>上面说文件有 4 种状态，通过如下命令可以查看到文件的状态：</p>\n<pre><code>#查看指定文件状态git status [filename]\n#查看所有文件状态git status\n# git add .                  添加所有文件到暂存区\n# git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息\n</code></pre>\n<h2 id=\"忽略文件\"><a class=\"anchor\" href=\"#忽略文件\">#</a> 忽略文件</h2>\n<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>\n<p>在主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则：</p>\n<ol>\n<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>\n<li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>\n</ol>\n<pre><code>#为注释\n*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！\n!lib.txt     #但lib.txt除外\n/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录\ntempbuild/   #忽略build/目录下的所有文件\ndoc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n</code></pre>\n<h1 id=\"使用码云\"><a class=\"anchor\" href=\"#使用码云\">#</a> 使用码云</h1>\n<p>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的 gitlab 服务器</p>\n<p>1、注册登录码云，完善个人信息</p>\n<p>2、设置本机绑定 SSH 公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p>\n<pre><code># 进入 C:\\Users\\Administrator\\.ssh 目录\n# 生成公钥\nssh-keygen\n</code></pre>\n<p><img data-src=\"../pictures/git/image-20230817161442805.png\" alt=\"image-20230817161442805\" /></p>\n<p>3、将公钥信息 public key 添加到码云账户中即可！</p>\n<p>4、使用码云创建一个自己的仓库！</p>\n<h1 id=\"idea中集成git\"><a class=\"anchor\" href=\"#idea中集成git\">#</a> IDEA 中集成 Git</h1>\n<h1 id=\"git分支\"><a class=\"anchor\" href=\"#git分支\">#</a> GIT 分支</h1>\n<h2 id=\"git分支中常用指令\"><a class=\"anchor\" href=\"#git分支中常用指令\">#</a> git 分支中常用指令</h2>\n<pre><code># 列出所有本地分支\ngit branch\n\n# 列出所有远程分支\ngit branch -r\n\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/6Servlet-HTTP/",
            "url": "https://jihaipeng123.github.io/6Servlet-HTTP/",
            "title": "6.Servlet&HTTP",
            "date_published": "2023-08-15T00:16:20.000Z",
            "content_html": "<h1 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<ul>\n<li>概念：运行在服务器端的小程序\n<ul>\n<li>Servlet 就是一个接口，定义了 Java 类被浏览器访问到 (tomcat 识别) 的规则。</li>\n<li>将来我们自定义一个类，实现 Servlet 接口，复写方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"快速入门\"><a class=\"anchor\" href=\"#快速入门\">#</a> 快速入门</h2>\n<ol>\n<li>\n<p>创建 JavaEE 项目</p>\n</li>\n<li>\n<p>定义一个类，实现 Servlet 接口</p>\n<ul>\n<li>public class ServletDemo1 implements Servlet</li>\n</ul>\n</li>\n<li>\n<p>实现接口中的抽象方法</p>\n</li>\n<li>\n<p>配置 Servlet</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在web.xml中配置：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置 Servlet --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>cn.itcast.web.servlet.ServletDemo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/demo1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"执行原理\"><a class=\"anchor\" href=\"#执行原理\">#</a> 执行原理</h2>\n<ol>\n<li>当服务器接受到客户端浏览器的请求后，会解析请求 URL 路径，获取访问的 Servlet 的资源路径</li>\n<li>查找 web.xml 文件，是否有对应的 &lt;url-pattern&gt; 标签体内容。</li>\n<li>如果有，则在找到对应的 &lt;servlet-class&gt; 全类名</li>\n<li>tomcat 会将字节码文件加载进内存，并且创建其对象</li>\n<li>调用其方法</li>\n</ol>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<ol>\n<li>\n<p>被创建：执行 init 方法，只执行一次</p>\n<ol>\n<li>\n<p>Servlet 什么时候被创建？<br />\n默认情况下，第一次被访问时，Servlet 被创建<br />\n可以配置执行 Servlet 的创建时机。</p>\n<p>在 &lt;servlet&gt; 标签下配置</p>\n<p>第一次被访问时，创建</p>\n<ul>\n<li>&lt;load-on-startup&gt; 的值为负数</li>\n</ul>\n<p>在服务器启动时，创建</p>\n<ul>\n<li>&lt;load-on-startup&gt; 的值为 0 或正整数</li>\n<li>Servlet 的 init 方法，只执行一次，说明一个 Servlet 在内存中只存在一个对象，Servlet 是单例的</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>多个用户同时访问时，可能存在线程安全问题。</li>\n<li>解决：尽量不要在 Servlet 中定义成员变量。即使定义了成员变量，也不要对修改值</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>提供服务：执行 service 方法，执行多次</p>\n<p>每次访问 Servlet 时，Service 方法都会被调用一次。</p>\n</li>\n<li>\n<p>被销毁：执行 destroy 方法，只执行一次</p>\n<ul>\n<li>Servlet 被销毁时执行。服务器关闭时，Servlet 被销毁</li>\n<li>只有服务器正常关闭时，才会执行 destroy 方法。</li>\n<li>destroy 方法在 Servlet 被销毁之前执行，一般用于释放资源</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"servlet30\"><a class=\"anchor\" href=\"#servlet30\">#</a> Servlet3.0</h2>\n<ul>\n<li>好处：\n<ul>\n<li>\n<p>支持注解配置。可以不需要 web.xml 了。</p>\n</li>\n<li>\n<p>步骤：</p>\n<ol>\n<li>创建 JavaEE 项目，选择 Servlet 的版本 3.0 以上，可以不创建 web.xml</li>\n<li>定义一个类，实现 Servlet 接口</li>\n<li>复写方法</li>\n<li>在类上使用 @WebServlet 注解，进行配置</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@WebServlet(\"资源路径\")</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t@Target(&#123;ElementType.TYPE&#125;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t@Retention(RetentionPolicy.RUNTIME)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t@Documented</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tpublic @interface WebServlet &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t    String name() default \"\";//相当于<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t    String[] value() default &#123;&#125;;//代表urlPatterns()属性配置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t    String[] urlPatterns() default &#123;&#125;;//相当于<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t    int loadOnStartup() default -1;//相当于<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t    WebInitParam[] initParams() default &#123;&#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t    boolean asyncSupported() default false;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t    String smallIcon() default \"\";</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t    String largeIcon() default \"\";</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t    String description() default \"\";</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t    String displayName() default \"\";</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t&#125;</pre></td></tr></table></figure><p>注意；form 标签中的 action 属性用于指定表单数据提交到哪个 URL 地址</p>\n<h2 id=\"servlet的体系结构\"><a class=\"anchor\" href=\"#servlet的体系结构\">#</a> Servlet 的体系结构</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Servlet</span> <span class=\"token operator\">--</span> 接口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">GenericServlet</span> <span class=\"token operator\">--</span> 抽象类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">HttpServlet</span>  <span class=\"token operator\">--</span> 抽象类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">*</span> <span class=\"token class-name\">GenericServlet</span>：将<span class=\"token class-name\">Servlet</span>接口中其他的方法做了默认空实现，只将<span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法作为抽象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token operator\">*</span> 将来定义<span class=\"token class-name\">Servlet</span>类时，可以继承<span class=\"token class-name\">GenericServlet</span>，实现<span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法即可</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span> <span class=\"token class-name\">HttpServlet</span>：对http协议的一种封装，简化操作</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 定义类继承<span class=\"token class-name\">HttpServlet</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 复写doGet<span class=\"token operator\">/</span>doPost方法</pre></td></tr></table></figure><h2 id=\"servlet相关配置\"><a class=\"anchor\" href=\"#servlet相关配置\">#</a> Servlet 相关配置</h2>\n<ol>\n<li>urlpartten:Servlet 访问路径\n<ol>\n<li>一个 Servlet 可以定义多个访问路径 ： @WebServlet ({&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;})</li>\n<li>路径定义规则：\n<ol>\n<li>/xxx：路径匹配</li>\n<li>/xxx/xxx: 多层路径，目录结构</li>\n<li>*.do：扩展名匹配.(不加 /)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>Hyper Text Transfer Protocol 超文本传输协议</p>\n<ul>\n<li>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</li>\n<li>特点：\n<ol>\n<li>基于 TCP/IP 的高级协议</li>\n<li>默认端口号：80</li>\n<li>基于请求 / 响应模型的：一次请求对应一次响应</li>\n<li>无状态的：每次请求之间相互独立，不能交互数据</li>\n</ol>\n</li>\n<li>历史版本：\n<ul>\n<li>1.0：每一次请求响应都会建立新的连接</li>\n<li>1.1：复用连接</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"请求消息数据格式\"><a class=\"anchor\" href=\"#请求消息数据格式\">#</a> 请求消息数据格式</h2>\n<h3 id=\"请求行\"><a class=\"anchor\" href=\"#请求行\">#</a> 请求行</h3>\n<p>请求方式 请求 url 请求协议 / 版本<br />\n GET /login.html\tHTTP/1.1</p>\n<ul>\n<li>请求方式：\n<ul>\n<li>HTTP 协议有 7 中请求方式，常用的有 2 种\n<ul>\n<li>GET：\n<ol>\n<li>请求参数在请求行中，在 url 后。</li>\n<li>请求的 url 长度有限制的</li>\n<li>不太安全</li>\n</ol>\n</li>\n<li>POST：\n<ol>\n<li>请求参数在请求体中</li>\n<li>请求的 url 长度没有限制的</li>\n<li>相对安全</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"请求头\"><a class=\"anchor\" href=\"#请求头\">#</a> 请求头</h3>\n<p>客户端浏览器告诉服务器一些信息<br />\n请求头名称：请求头值</p>\n<ul>\n<li>常见的请求头：\n<ol>\n<li>\n<p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p>\n<ul>\n<li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>\n</ul>\n</li>\n<li>\n<p>Referer：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s\">http://localhost/login.html</span></p>\n<ul>\n<li>告诉服务器，我 (当前请求) 从哪里来？\n<ul>\n<li>作用：\n<ol>\n<li>防盗链：</li>\n<li>统计工作：</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"请求空行\"><a class=\"anchor\" href=\"#请求空行\">#</a> 请求空行</h3>\n<p>空行，就是用于分割 POST 请求的请求头，和请求体的。</p>\n<h3 id=\"请求体正文\"><a class=\"anchor\" href=\"#请求体正文\">#</a> 请求体 (正文)</h3>\n<pre><code>* 封装POST请求消息的请求参数的\n* 响应消息数据格式\n</code></pre>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>字符串格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/login.html</span>\t<span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">localhost</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://localhost/login.html</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>username=zhangsan</pre></td></tr></table></figure><h1 id=\"request\"><a class=\"anchor\" href=\"#request\">#</a> Request</h1>\n<h2 id=\"request对象和response对象的原理\"><a class=\"anchor\" href=\"#request对象和response对象的原理\">#</a> request 对象和 response 对象的原理</h2>\n<ol>\n<li>request 和 response 对象是由服务器创建的。我们来使用它们</li>\n<li>request 对象是来获取请求消息，response 对象是来设置响应消息</li>\n</ol>\n<h2 id=\"request对象继承体系结构\"><a class=\"anchor\" href=\"#request对象继承体系结构\">#</a> request 对象继承体系结构</h2>\n<p>ServletRequest\t\t--\t接口<br />\n |\t继承<br />\n HttpServletRequest\t-- 接口<br />\n |\t实现<br />\n org.apache.catalina.connector.RequestFacade 类 (tomcat)</p>\n<h1 id=\"request功能\"><a class=\"anchor\" href=\"#request功能\">#</a> request 功能</h1>\n<h2 id=\"获取请求消息数据\"><a class=\"anchor\" href=\"#获取请求消息数据\">#</a> 获取请求消息数据</h2>\n<h3 id=\"获取请求行数据\"><a class=\"anchor\" href=\"#获取请求行数据\">#</a> 获取请求行数据</h3>\n<ul>\n<li>\n<p>GET /day14/demo1?name=zhangsan HTTP/1.1</p>\n</li>\n<li>\n<p>方法：</p>\n<ol>\n<li>获取请求方式 ：GET<br />\nString getMethod()</li>\n<li>(*) 获取虚拟目录：/day14<br />\nString getContextPath()</li>\n<li>获取 Servlet 路径: /demo1<br />\nString getServletPath()</li>\n<li>获取 get 方式请求参数：name=zhangsan<br />\nString getQueryString()</li>\n<li>(*) 获取请求 URI：/day14/demo1<br />\nString getRequestURI():\t\t/day14/demo1<br />\nStringBuffer getRequestURL()  :<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span></li>\n</ol>\n<p>URL: 统一资源定位符 ： <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNC9kZW1vMQ==\">http://localhost/day14/demo1</span>\t中华人民共和国<br />\n URI：统一资源标识符 : /day14/demo1\t\t\t\t\t共和国</p>\n<ol start=\"6\">\n<li>\n<p>获取协议及版本：HTTP/1.1<br />\nString getProtocol()</p>\n</li>\n<li>\n<p>获取客户机的 IP 地址：<br />\nString getRemoteAddr()</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"获取请求头数据\"><a class=\"anchor\" href=\"#获取请求头数据\">#</a> 获取请求头数据</h3>\n<ul>\n<li>方法：\n<ul>\n<li>(*) String getHeader (String name): 通过请求头的名称获取请求头的值</li>\n<li>Enumeration&lt;String&gt; getHeaderNames (): 获取所有的请求头名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获取请求体数据\"><a class=\"anchor\" href=\"#获取请求体数据\">#</a> 获取请求体数据</h3>\n<ul>\n<li>请求体：只有 POST 请求方式，才有请求体，在请求体中封装了 POST 请求的请求参数</li>\n<li>步骤：\n<ol>\n<li>\n<p>获取流对象</p>\n<ul>\n<li>BufferedReader getReader ()：获取字符输入流，只能操作字符数据</li>\n<li>ServletInputStream getInputStream ()：获取字节输入流，可以操作所有类型数据\n<ul>\n<li>在文件上传知识点后讲解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>再从流对象中拿数据</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"../pictures/Servlet-HTTP/image-20230815084125312.png\" alt=\"image-20230815084125312\" /></p>\n<h2 id=\"其他功能\"><a class=\"anchor\" href=\"#其他功能\">#</a> 其他功能</h2>\n<ol>\n<li>获取请求参数通用方式：不论 get 还是 post 请求方式都可以使用下列方法来获取请求参数\n<ol>\n<li>String getParameter (String name): 根据参数名称获取参数值    username=zs&amp;password=123<br />\n2. String [] getParameterValues (String name): 根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game<br />\n3. Enumeration&lt;String&gt; getParameterNames (): 获取所有请求的参数名称<br />\n 4. Map&lt;String,String []&gt; getParameterMap (): 获取所有参数的 map 集合\n<ul>\n<li>中文乱码问题：\n<ul>\n<li>get 方式：tomcat 8 已经将 get 方式乱码问题解决了</li>\n<li>post 方式：会乱码\n<ul>\n<li>解决：在获取参数前，设置 request 的编码 request.setCharacterEncoding (&quot;utf-8&quot;);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"请求转发\"><a class=\"anchor\" href=\"#请求转发\">#</a> 请求转发</h2>\n<p>一种在服务器内部的资源跳转方式</p>\n<ol>\n<li>\n<p>步骤：</p>\n<ol>\n<li>通过 request 对象获取请求转发器对象：RequestDispatcher getRequestDispatcher (String path)</li>\n<li>使用 RequestDispatcher 对象来进行转发：forward (ServletRequest request, ServletResponse response)</li>\n</ol>\n</li>\n<li>\n<p>特点：</p>\n</li>\n<li>\n<p>浏览器地址栏路径不发生变化</p>\n</li>\n<li>\n<p>只能转发到当前服务器内部资源中。</p>\n</li>\n<li>\n<p>转发是一次请求</p>\n</li>\n<li>\n<p>共享数据：</p>\n<ul>\n<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>\n<li>request 域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据\n<ul>\n<li>方法：</li>\n</ul>\n<ol>\n<li>void setAttribute (String name,Object obj): 存储数据</li>\n<li>Object getAttitude (String name): 通过键获取值</li>\n<li>void removeAttribute (String name): 通过键移除键值对</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>获取 ServletContext：</p>\n</li>\n</ol>\n<ul>\n<li>ServletContext getServletContext()</li>\n</ul>\n<h2 id=\"案例用户登录\"><a class=\"anchor\" href=\"#案例用户登录\">#</a> 案例：用户登录</h2>\n<pre><code>用户登录案例需求：（见例题）\n1.编写login.html登录页面\n\tusername &amp; password 两个输入框\n2. 使用Druid数据库连接池技术,操作mysql，day14数据库中user表\n3. 使用JdbcTemplate技术封装JDBC\n4. 登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您\n5. 登录失败跳转到FailServlet展示：登录失败，用户名或密码错误\n</code></pre>\n<h1 id=\"beanutils工具类\"><a class=\"anchor\" href=\"#beanutils工具类\">#</a> BeanUtils 工具类</h1>\n<p>简化数据封装，用于封装 JavaBean 的</p>\n<ol>\n<li>JavaBean：标准的 Java 类</li>\n</ol>\n<p>要求：<br />\n类必须被 public 修饰</p>\n<p>​\t\t必须提供空参的构造器</p>\n<p>​\t\t成员变量必须使用 private 修饰</p>\n<p>​\t\t提供公共 setter 和 getter 方法</p>\n<p>​\t\t功能：封装数据</p>\n<ol start=\"2\">\n<li>\n<p>概念：<br />\n成员变量：</p>\n<p>​\t属性：setter 和 getter 方法截取后的产物<br />\n​\t例如：getUsername () --&gt; Username--&gt; username</p>\n</li>\n<li>\n<p>方法：<br />\n1. setProperty()<br />\n2. getProperty()<br />\n 3. populate (Object obj , Map map): 将 map 集合的键值对信息，封装到对应的 JavaBean 对象中</p>\n</li>\n</ol>\n<h1 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h1>\n<h2 id=\"请求消息\"><a class=\"anchor\" href=\"#请求消息\">#</a> 请求消息</h2>\n<p>客户端发送给服务器端的数据</p>\n<ul>\n<li>数据格式：\n<ol>\n<li>请求行</li>\n<li>请求头</li>\n<li>请求空行</li>\n<li>请求体</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"响应消息\"><a class=\"anchor\" href=\"#响应消息\">#</a> 响应消息</h2>\n<p>服务器端发送给客户端的数据</p>\n<h3 id=\"响应行\"><a class=\"anchor\" href=\"#响应行\">#</a> 响应行</h3>\n<ol>\n<li>组成：协议 / 版本 响应状态码 状态码描述</li>\n<li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。\n<ol>\n<li>状态码都是 3 位数字</li>\n<li>分类：\n<ol>\n<li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送 1xx 多状态码</li>\n<li>2xx：成功。代表：200</li>\n<li>3xx：重定向。代表：302 (重定向)，304 (访问缓存)</li>\n<li>4xx：客户端错误。\n<ul>\n<li>代表：\n<ul>\n<li>404（请求路径没有对应的资源）</li>\n<li>405：请求方式没有对应的 doXxx 方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5xx：服务器端错误。代表：500 (服务器内部出现异常)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"响应头\"><a class=\"anchor\" href=\"#响应头\">#</a> 响应头</h3>\n<ol>\n<li>\n<p>格式：头名称： 值</p>\n</li>\n<li>\n<p>常见的响应头：</p>\n</li>\n<li>\n<p>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</p>\n</li>\n<li>\n<p>Content-disposition：服务器告诉客户端以什么格式打开响应体数据</p>\n<ul>\n<li>值：\n<ul>\n<li>in-line: 默认值，在当前页面内打开</li>\n<li>attachment;filename=xxx：以附件形式打开响应体。文件下载</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"响应空行\"><a class=\"anchor\" href=\"#响应空行\">#</a> 响应空行</h3>\n<h3 id=\"响应体\"><a class=\"anchor\" href=\"#响应体\">#</a> 响应体</h3>\n<p>传输的数据</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>响应字符串格式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\tHTTP/1.1 200 OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tContent-Type: text/html;charset=UTF-8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tContent-Length: 101</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tDate: Wed, 06 Jun 2018 07:08:42 GMT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>$Title$<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t  hello , response</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"response对象\"><a class=\"anchor\" href=\"#response对象\">#</a> Response 对象</h1>\n<h2 id=\"功能设置响应消息\"><a class=\"anchor\" href=\"#功能设置响应消息\">#</a> 功能：设置响应消息</h2>\n<h3 id=\"设置响应行\"><a class=\"anchor\" href=\"#设置响应行\">#</a> 设置响应行</h3>\n<ol>\n<li>格式：HTTP/1.1 200 ok</li>\n<li>设置状态码：setStatus (int sc)</li>\n</ol>\n<h3 id=\"设置响应头\"><a class=\"anchor\" href=\"#设置响应头\">#</a> 设置响应头</h3>\n<p>setHeader(String name, String value)</p>\n<h3 id=\"设置响应体\"><a class=\"anchor\" href=\"#设置响应体\">#</a> 设置响应体</h3>\n<p>使用步骤：</p>\n<ol>\n<li>\n<p>获取输出流</p>\n<ul>\n<li>\n<p>字符输出流：PrintWriter getWriter ()</p>\n</li>\n<li>\n<p>字节输出流：ServletOutputStream getOutputStream ()</p>\n</li>\n</ul>\n</li>\n<li>\n<p>使用输出流，将数据输出到客户端浏览器</p>\n</li>\n</ol>\n<h2 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h2>\n<h3 id=\"完成重定向\"><a class=\"anchor\" href=\"#完成重定向\">#</a> 完成重定向</h3>\n<ul>\n<li>\n<p>重定向：资源跳转的方式</p>\n</li>\n<li>\n<p>代码实现：</p>\n<ol>\n<li>\n<p>设置状态码为 302</p>\n<p>response.setStatus(302);</p>\n</li>\n<li>\n<p>设置响应头 location<br />\nresponse.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);</p>\n</li>\n</ol>\n</li>\n<li>\n<p>简单的重定向方法<br />\n response.sendRedirect (&quot;/day15/responseDemo2&quot;);</p>\n</li>\n<li>\n<p>转发的特点：forward</p>\n<ol>\n<li>转发地址栏路径不变</li>\n<li>转发只能访问当前服务器下的资源</li>\n<li>转发是一次请求，可以使用 request 对象来共享数据</li>\n</ol>\n</li>\n<li>\n<p>forward 和  redirect 区别</p>\n</li>\n<li>\n<p>路径写法：</p>\n<ol>\n<li>\n<p>路径分类</p>\n<p>相对路径：通过相对路径不可以确定唯一资源</p>\n<ul>\n<li>\n<p>如：./index.html</p>\n</li>\n<li>\n<p>不以 / 开头，以。开头路径</p>\n</li>\n<li>\n<p>规则：找到当前资源和目标资源之间的相对位置关系</p>\n<ul>\n<li>./：当前目录</li>\n<li>../: 后退一级目录</li>\n</ul>\n</li>\n</ul>\n<p>绝对路径：通过绝对路径可以确定唯一资源</p>\n<ul>\n<li>\n<p>如：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9kYXkxNS9yZXNwb25zZURlbW8y\">http://localhost/day15/responseDemo2</span></p>\n</li>\n<li>\n<p>以 / 开头的路径</p>\n</li>\n<li>\n<p>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</p>\n<ul>\n<li>给客户端浏览器使用：需要加虚拟目录 (项目的访问路径)\n<ul>\n<li>建议虚拟目录动态获取：request.getContextPath ()</li>\n<li>&lt;a&gt; , &lt;form&gt; 重定向...</li>\n</ul>\n</li>\n<li>给服务器使用：不需要加虚拟目录\n<ul>\n<li>转发路径</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"服务器输出字符数据到浏览器\"><a class=\"anchor\" href=\"#服务器输出字符数据到浏览器\">#</a> 服务器输出字符数据到浏览器</h3>\n<p>步骤：</p>\n<ol>\n<li>\n<p>获取字符输出流</p>\n</li>\n<li>\n<p>输出数据</p>\n<p>注意：<br />\n* 乱码问题：<br />\n1. PrintWriter pw = response.getWriter (); 获取的流的默认编码是 ISO-8859-1<br />\n2. 设置该流的默认编码<br />\n 3. 告诉浏览器响应体使用的编码</p>\n<pre><code>\t//简单的形式，设置编码，是在获取流之前设置\n\tresponse.setContentType(&quot;text/html;charset=utf-8&quot;);\n</code></pre>\n</li>\n</ol>\n<h3 id=\"服务器输出字节数据到浏览器\"><a class=\"anchor\" href=\"#服务器输出字节数据到浏览器\">#</a> 服务器输出字节数据到浏览器</h3>\n<ul>\n<li>步骤：\n<ol>\n<li>获取字节输出流</li>\n<li>输出数据</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"验证码\"><a class=\"anchor\" href=\"#验证码\">#</a> 验证码</h3>\n<ol>\n<li>本质：图片</li>\n<li>目的：防止恶意表单注册</li>\n</ol>\n<h1 id=\"servletcontext对象\"><a class=\"anchor\" href=\"#servletcontext对象\">#</a> ServletContext 对象</h1>\n<h2 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h2>\n<ol>\n<li>概念：代表整个 web 应用，可以和程序的容器 (服务器) 来通信</li>\n<li>获取：\n<ol>\n<li>通过 request 对象获取<br />\n request.getServletContext ();</li>\n<li>通过 HttpServlet 获取<br />\n this.getServletContext ();</li>\n</ol>\n</li>\n<li>功能：\n<ol>\n<li>\n<p>获取 MIME 类型：</p>\n<ul>\n<li>\n<p>MIME 类型：在互联网通信过程中定义的一种文件数据类型</p>\n<ul>\n<li>格式： 大类型 / 小类型   text/html\t\timage/jpeg</li>\n</ul>\n</li>\n<li>\n<p>获取：String getMimeType (String file)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>域对象：共享数据</p>\n<ol>\n<li>setAttribute(String name,Object value)</li>\n<li>getAttribute(String name)</li>\n<li>removeAttribute(String name)</li>\n</ol>\n<ul>\n<li>ServletContext 对象范围：所有用户所有请求的数据</li>\n</ul>\n</li>\n<li>\n<p>获取文件的真实 (服务器) 路径</p>\n<ol>\n<li>\n<p>方法：String getRealPath (String path)<br />\n String b = context.getRealPath (&quot;/b.txt&quot;);//web 目录下资源访问<br />\n System.out.println (b);</p>\n<p>String c = context.getRealPath (&quot;/WEB-INF/c.txt&quot;);//WEB-INF 目录下的资源访问<br />\n System.out.println (c);</p>\n<p>String a = context.getRealPath (&quot;/WEB-INF/classes/a.txt&quot;);//src 目录下的资源访问<br />\n System.out.println (a);</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"案例-2\"><a class=\"anchor\" href=\"#案例-2\">#</a> 案例</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* 文件下载需求：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t1. 页面显示超链接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t2. 点击超链接后弹出下载提示框</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t3. 完成图片文件下载</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* 分析：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t2. 任何资源都必须弹出下载提示框</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t3. 使用响应头设置资源的打开方式：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t* content-disposition:attachment;filename=xxx</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* 步骤：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t2. 定义Servlet</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t1. 获取文件名称</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t2. 使用字节输入流加载文件进内存</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t3. 指定response的响应头： content-disposition:attachment;filename=xxx</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t4. 将数据写出到response输出流</pre></td></tr></table></figure>",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/5xml-Tomcat/",
            "url": "https://jihaipeng123.github.io/5xml-Tomcat/",
            "title": "5.xml&Tomcat",
            "date_published": "2023-08-14T23:20:44.000Z",
            "content_html": "<h1 id=\"xml\"><a class=\"anchor\" href=\"#xml\">#</a> XML</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Extensible Markup Language 可扩展标记语言</p>\n<ul>\n<li>可扩展：标签都是自定义的。 &lt;user&gt;  &lt;student&gt;</li>\n<li>功能\n<ul>\n<li>存储数据\n<ol>\n<li>配置文件</li>\n<li>在网络中传输</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>xml 与 html 的区别\n<ol>\n<li>xml 标签都是自定义的，html 标签是预定义。</li>\n<li>xml 的语法严格，html 语法松散</li>\n<li>xml 是存储数据的，html 是展示数据</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<ul>\n<li>\n<p>基本语法：</p>\n<ol>\n<li>xml 文档的后缀名 .xml</li>\n<li>xml 第一行必须定义为文档声明</li>\n<li>xml 文档中有且仅有一个根标签</li>\n<li>属性值必须使用引号 (单双都可) 引起来</li>\n<li>标签必须正确关闭</li>\n<li>xml 标签名称区分大小写</li>\n</ol>\n</li>\n<li>\n<p>快速入门：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version='1.0' ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>users</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>1<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>zhangsan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">></span></span>23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gender</span><span class=\"token punctuation\">></span></span>male<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gender</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>2<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>lisi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>age</span><span class=\"token punctuation\">></span></span>24<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>age</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gender</span><span class=\"token punctuation\">></span></span>female<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gender</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>users</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>组成部分：</p>\n<ol>\n<li>\n<p>文档声明</p>\n<ol>\n<li>\n<p>格式：<strong>&lt;?xml 属性列表？&gt;</strong></p>\n</li>\n<li>\n<p>属性列表：</p>\n<ul>\n<li>\n<p>version：版本号，必须的属性，一般都是 **&lt;?xml version='1.0' ?&gt;**</p>\n</li>\n<li>\n<p>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</p>\n<p>​\t\t\t\t\t\t\t 换解码方式：encoding=' GBK'  或 ‘utf-8’</p>\n</li>\n<li>\n<p>standalone：是否独立        standalone = 'yes'</p>\n<ul>\n<li>取值：\n<ul>\n<li>yes：不依赖其他文件</li>\n<li>no：依赖其他文件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>指令 (了解)：结合 css 的</p>\n<ul>\n<li>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</li>\n</ul>\n</li>\n<li>\n<p>标签：标签名称自定义的</p>\n<ul>\n<li>规则：\n<ul>\n<li>名称可以包含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字母 xml（或者 XML、Xml 等等）开始</li>\n<li>名称不能包含空格</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>属性：<br />\nid 属性值唯一   ，单双引号都可以引起来</p>\n</li>\n<li>\n<p>文本：</p>\n<ul>\n<li>\n<p><em><strong>CDATA 区</strong></em>：在该区域中的数据会被原样展示</p>\n<ul>\n<li>格式：  &lt;![CDATA [ 数据]]&gt;**</li>\n</ul>\n</li>\n<li>\n<p>约束：规定 xml 文档的书写规则<br />\n​\t\t\t* 作为框架的使用者 (程序员)：<br />\n​\t\t\t\t1. 能够在 xml 中引入约束文档<br />\n​\t\t\t\t2. 能够简单的读懂约束文档<br />\n​</p>\n<ul>\n<li>分类：\n<ol>\n<li>DTD: 一种简单的约束技术</li>\n<li>Schema: 一种复杂的约束技术</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"dtd\"><a class=\"anchor\" href=\"#dtd\">#</a> DTD</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>引入dtd文档到xml文档中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 内部dtd：将约束规则定义在xml文档中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 外部dtd：将约束的规则定义在外部的dtd文件中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t 本地：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根标签名</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"dtd文件的位置\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t 网络：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根标签名</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"dtd文件名字\"</span> <span class=\"token string\">\"dtd文件的位置URL\"</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"schema\"><a class=\"anchor\" href=\"#schema\">#</a> Schema</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* 引入：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t1.填写xml文档的根元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t2.引入xsi前缀.  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t3.引入xsd文件命名空间.  xsi:schemaLocation=\"http://www.itcast.cn/xml  student.xsd\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t4.为每一个xsd约束声明一个前缀,作为标识  xmlns=\"http://www.itcast.cn/xml\" </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>students</span>   <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.itcast.cn/xml<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.itcast.cn/xml  student.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>​\t<img data-src=\"../pictures/xml-Tomcat/image-20230815072655929.png\" alt=\"image-20230815072655929\" /></p>\n<h2 id=\"解析\"><a class=\"anchor\" href=\"#解析\">#</a> 解析</h2>\n<p>操作 xml 文档，将文档中的数据读取到内存中<br />\n * 操作 xml 文档<br />\n 1. 解析 (读取)：将文档中的数据读取到内存中<br />\n 2. 写入：将内存中的数据保存到 xml 文档中。持久化的存储</p>\n<ul>\n<li>解析 xml 的方式：\n<ol>\n<li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗 dom 树\n<ul>\n<li>优点：操作方便，可以对文档进行 CRUD 的所有操作</li>\n<li>缺点：占内存</li>\n</ul>\n</li>\n<li>SAX：逐行读取，基于事件驱动的。\n<ul>\n<li>优点：不占内存。</li>\n<li>缺点：只能读取，不能增删改</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"xml常见的解析器\"><a class=\"anchor\" href=\"#xml常见的解析器\">#</a> xml 常见的解析器</h1>\n<p>Jsoup：jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 jQuery 的操作方法来取出和操作数据。</p>\n<h1 id=\"jsoup\"><a class=\"anchor\" href=\"#jsoup\">#</a> Jsoup</h1>\n<h2 id=\"快速入门\"><a class=\"anchor\" href=\"#快速入门\">#</a> 快速入门</h2>\n<ul>\n<li>\n<p>步骤：</p>\n<ol>\n<li>导入 jar 包</li>\n<li>获取 Document 对象</li>\n<li>获取对应的标签 Element 对象</li>\n<li>获取数据</li>\n</ol>\n</li>\n<li>\n<p>对象的使用：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. Jsoup：工具类，可以解析html或xml文档，返回Document</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * parse：解析html或xml文档，返回Document</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * parse(File in, String charsetName)：解析xml或html文件的。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * parse(String html)：解析xml或html字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. Document：文档对象。代表内存中的dom树</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    * 获取Element对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * getElementById(String id)：根据id属性值获取唯一的element对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * getElementsByTag(String tagName)：根据标签名称获取元素对象集合</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * getElementsByAttribute(String key)：根据属性名称获取元素对象集合</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>3. Elements：元素Element对象的集合。可以当做 ArrayList<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Element</span><span class=\"token punctuation\">></span></span>来使用</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>4. Element：元素对象</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   1. 获取子元素对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      * getElementById(String id)：根据id属性值获取唯一的element对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      * getElementsByTag(String tagName)：根据标签名称获取元素对象集合</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      * getElementsByAttribute(String key)：根据属性名称获取元素对象集合</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   2. 获取属性值</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      1. String attr(String key)：根据属性名称获取属性值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      2. 获取文本内容</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * String text():获取文本内容</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         * String html():获取标签体的所有内容(包括字标签的字符串内容)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> 5. Node：节点对象</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      * 是Document和Element的父类</pre></td></tr></table></figure></li>\n</ul>\n<p>​</p>\n<h2 id=\"快捷查询方式\"><a class=\"anchor\" href=\"#快捷查询方式\">#</a> 快捷查询方式</h2>\n<p>selector: 选择器<br />\n使用的方法：Elements\tselect (String cssQuery)</p>\n<p>代码：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.获取student.xml的path</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t String path = JsoupDemo6.class.getClassLoader().getResource(\"student.xml\").getPath();</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2.获取Document对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDocument document = Jsoup.parse(new File(path), \"utf-8\");</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>3.根据document对象，创建JXDocument对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tJXDocument jxDocument = new JXDocument(document);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>4.结合xpath语法查询</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t4.1查询所有student标签</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tList<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JXNode</span><span class=\"token punctuation\">></span></span> jxNodes = jxDocument.selN(\"//student\");</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfor (JXNode jxNode : jxNodes) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t  System.out.println(jxNode);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * 语法：参考Selector类中定义的语法</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t   2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t* 使用Jsoup的Xpath需要额外导入jar包。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t* 查询w3cshool参考手册，使用xpath的语法完成查询</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t  4.2查询所有student标签下的name标签</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t  List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JXNode</span><span class=\"token punctuation\">></span></span> jxNodes2 = jxDocument.selN(\"//student/name\");</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t  for (JXNode jxNode : jxNodes2) &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t      System.out.println(jxNode);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t   &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t  4.3查询student标签下带有id属性的name标签</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t   List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JXNode</span><span class=\"token punctuation\">></span></span> jxNodes3 = jxDocument.selN(\"//student/name[@id]\");</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t   for (JXNode jxNode : jxNodes3) &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t      system.out.println(jxNode);</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t    &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t    4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t    List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JXNode</span><span class=\"token punctuation\">></span></span> jxNodes4 = jxDocument.selN(\"//student/name[@id='itcast']\");</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t    for (JXNode jxNode : jxNodes4) &#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t        system.out.println(jxNode);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t    &#125;</pre></td></tr></table></figure><p>​</p>\n<h1 id=\"web服务器软件\"><a class=\"anchor\" href=\"#web服务器软件\">#</a> web 服务器软件</h1>\n<ul>\n<li>\n<p>服务器：安装了服务器软件的计算机</p>\n</li>\n<li>\n<p>服务器软件：接收用户的请求，处理请求，做出响应</p>\n</li>\n<li>\n<p>web 服务器软件：接收用户的请求，处理请求，做出响应。</p>\n<ul>\n<li>在 web 服务器软件中，可以部署 web 项目，让用户通过浏览器来访问这些项目</li>\n<li>web 容器</li>\n</ul>\n</li>\n<li>\n<p>常见的 java 相关的 web 服务器软件：</p>\n<ul>\n<li>webLogic：oracle 公司，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li>\n<li>webSphere：IBM 公司，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li>\n<li>JBOSS：JBOSS 公司的，大型的 JavaEE 服务器，支持所有的 JavaEE 规范，收费的。</li>\n<li>Tomcat：Apache 基金组织，中小型的 JavaEE 服务器，仅仅支持少量的 JavaEE 规范 servlet/jsp。开源的，免费的。</li>\n</ul>\n</li>\n</ul>\n<p>​\t\t\tJavaEE：Java 语言在企业级开发中使用的技术规范的总和，一共规定了 13 项大的规范</p>\n<h1 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h1>\n<h2 id=\"下载\"><a class=\"anchor\" href=\"#下载\">#</a> 下载</h2>\n<ol>\n<li>下载：<span class=\"exturl\" data-url=\"aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==\">http://tomcat.apache.org/</span>\n<ol>\n<li>安装：解压压缩包即可。\t\t\t安装目录建议不要有中文和空格</li>\n</ol>\n</li>\n<li>卸载：删除目录就行了</li>\n<li>启动：</li>\n</ol>\n<ul>\n<li>bin/startup.bat , 双击运行该文件即可</li>\n<li>访问：浏览器输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\">http://localhost:8080</span> 回车访问自己</li>\n</ul>\n<p>​\t\t\t  <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pcC1zYjNjbjlrbDUzZDo4MDgw\">http:// 别人的 ip:8080</span> 访问别人</p>\n<ul>\n<li>可能遇到的问题：</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 黑窗口一闪而过：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t 原因： 没有正确配置JAVA_HOME环境变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t 解决方案：正确配置JAVA_HOME环境变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. 启动报错：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t* netstat -ano</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t2. 温柔：修改自身的端口号</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t conf/server.xml</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Connector</span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8888<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTTP/1.1<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token attr-name\">connectionTimeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             <span class=\"token attr-name\">redirectPort</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8445<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t* 好处：在访问时，就不用输入端口号</pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p>关闭：</p>\n<p>正常关闭：</p>\n<ul>\n<li>bin/shutdown.bat</li>\n<li>ctrl+c<br />\n 强制关闭：点击启动窗口的 ×</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>部署项目的方式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1. 直接将项目放到webapps目录下即可。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t* /hello：项目的访问路径-->虚拟目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t* war包会自动解压缩</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2. 配置conf/server.xml文件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t在<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Host</span><span class=\"token punctuation\">></span></span>标签体中配置</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Context</span> <span class=\"token attr-name\">docBase</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>D:\\hello<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/hehe<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t* docBase:项目存放的路径</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t* path：虚拟目录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3. 在conf\\Catalina\\localhost创建任意名称的xml文件。在文件中编写</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Context</span> <span class=\"token attr-name\">docBase</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>D:\\hello<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t* 虚拟目录：xml文件的名称</pre></td></tr></table></figure><ul>\n<li>静态项目和动态项目：</li>\n<li>目录结构<br />\n java 动态项目的目录结构：</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-- 项目的根目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t-- WEB-INF目录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t-- web.xml：web项目的核心配置文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t-- classes目录：放置字节码文件的目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t-- lib目录：放置依赖的jar包</pre></td></tr></table></figure><p>​\t\t* 将 Tomcat 集成到 IDEA 中，并且创建 JavaEE 的项目，部署项目。</p>\n<p>​</p>\n<h1 id=\"idea与tomcat的相关配置\"><a class=\"anchor\" href=\"#idea与tomcat的相关配置\">#</a> IDEA 与 tomcat 的相关配置</h1>\n<ol>\n<li>\n<p>IDEA 会为每一个 tomcat 部署的项目单独建立一份配置文件</p>\n<ul>\n<li>查看控制台的 log：Using CATALINA_BASE:   &quot;C:\\Users\\fqy.IntelliJIdea2018.1\\system\\tomcat_itcast&quot;</li>\n</ul>\n</li>\n<li>\n<p>工作空间项目    和     tomcat 部署的 web 项目</p>\n<ul>\n<li>tomcat 真正访问的是 “tomcat 部署的 web 项目”，&quot;tomcat 部署的 web 项目&quot; 对应着 &quot;工作空间项目&quot; 的 web 目录下的所有资源</li>\n<li>WEB-INF 目录下的资源不能被浏览器直接访问。</li>\n</ul>\n</li>\n<li>\n<p>断点调试：使用 &quot;小虫子&quot; 启动 dubug 启动</p>\n</li>\n</ol>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/4JavaScript/",
            "url": "https://jihaipeng123.github.io/4JavaScript/",
            "title": "4.JavaScript",
            "date_published": "2023-08-14T13:30:09.000Z",
            "content_html": "<h1 id=\"javascript基础\"><a class=\"anchor\" href=\"#javascript基础\">#</a> JavaScript 基础</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>一门客户端脚本语言</p>\n<ul>\n<li>运行在客户端浏览器中的。每一个浏览器都有 JavaScript 的解析引擎</li>\n<li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li>\n</ul>\n<h2 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h2>\n<ul>\n<li>可以来增强用户和 html 页面的交互过程，可以来控制 html 元素，让页面有一些动态的效果，增强用户的体验。</li>\n</ul>\n<h2 id=\"javascript发展史\"><a class=\"anchor\" href=\"#javascript发展史\">#</a> JavaScript 发展史</h2>\n<ol>\n<li>1992 年，Nombase 公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C--\t，后来更名为：ScriptEase</li>\n<li>1995 年，Netscape (网景) 公司，开发了一门客户端脚本语言：LiveScript。后来，请来 SUN 公司的专家，修改 LiveScript，命名为 JavaScript</li>\n<li>1996 年，微软抄袭 JavaScript 开发出 JScript 语言</li>\n<li>1997 年，ECMA (欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li>\n</ol>\n<ul>\n<li>JavaScript = ECMAScript + JavaScript 自己特有的东西 (BOM+DOM)</li>\n</ul>\n<h1 id=\"ecmascript客户端脚本语言的标准\"><a class=\"anchor\" href=\"#ecmascript客户端脚本语言的标准\">#</a> ECMAScript：客户端脚本语言的标准</h1>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<h3 id=\"与html结合方式\"><a class=\"anchor\" href=\"#与html结合方式\">#</a> 与 html 结合方式</h3>\n<ol>\n<li>内部 JS：<br />\n定义 &lt;script&gt;，标签体内容就是 js 代码</li>\n<li>外部 JS：<br />\n定义 &lt;script&gt;，通过 src 属性引入外部的 js 文件</li>\n</ol>\n<p>注意</p>\n<p>&lt;script&gt; 可以定义在 html 页面的任何地方。但是定义的位置会影响执行顺序。<br />\n&lt;script&gt; 可以定义多个。</p>\n<h3 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h3>\n<ol>\n<li>单行注释：// 注释内容</li>\n<li>多行注释：/<em> 注释内容</em> /</li>\n</ol>\n<h3 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p>​\t1. 原始数据类型 (基本数据类型)：<br />\n​\t\t\t1. number：数字。 整数 / 小数 / NaN (not a number 一个不是数字的数字类型)<br />\n​\t\t\t2. string：字符串。 字符串  &quot;abc&quot; &quot;a&quot; 'abc'<br />\n​\t\t\t3. boolean: true 和 false<br />\n​\t\t\t4. null：一个对象为空的占位符<br />\n​\t\t\t5. undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值 undefined<br />\n​\t2. 引用数据类型：对象</p>\n<h3 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h3>\n<p>变量：一小块存储数据的内存空间<br />\n Java 语言是强类型语言，而 JavaScript 是弱类型语言。<br />\n强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据<br />\n弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。<br />\n语法：<br />\nvar 变量名 = 初始化值；<br />\ntypeof 运算符：获取变量的类型。<br />\n注：null 运算后得到的是 object</p>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<ol>\n<li>\n<p>一元运算符：只有一个运算数的运算符<br />\n ++，-- ， +(正号)<br />\n++ --: 自增 (自减)<br />\n++(--) 在前，先自增 (自减)，再运算<br />\n ++(--) 在后，先运算，再自增 (自减)<br />\n+(-)：正负号<br />\n注意：在 JS 中，如果运算数不是运算符所要求的类型，那么 js 引擎会自动的将运算数进行类型转换</p>\n</li>\n<li>\n<p>其他类型转 number：<br />\nstring 转 number：按照字面值转换。如果字面值不是数字，则转为 NaN（不是数字的数字）<br />\nboolean 转 number：true 转为 1，false 转为 0</p>\n</li>\n<li>\n<p>算数运算符<br />\n / % + - *</p>\n</li>\n<li>\n<p>赋值运算符<br />\n = += -+....</p>\n</li>\n<li>\n<p>比较运算符</p>\n<blockquote>\n<p>&lt;&gt;= &lt;= == ===(全等于)</p>\n</blockquote>\n<ul>\n<li>比较方式<br />\n 1. 类型相同：直接比较<br />\n * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。<br />\n2. 类型不同：先进行类型转换，再比较<br />\n * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回 false</li>\n</ul>\n</li>\n<li>\n<p>逻辑运算符<br />\n &amp;&amp; || !</p>\n<ul>\n<li>其他类型转 boolean：<br />\n1. number：0 或 NaN 为假，其他为真<br />\n 2. string：除了空字符串 (&quot;&quot;)，其他都是 true<br />\n3. null&amp;undefined: 都是 false<br />\n4. 对象：所有对象都为 true</li>\n</ul>\n</li>\n<li>\n<p>三元运算符<br />\n？: 表达式<br />\n var a = 3;<br />\nvar b = 4;<br />\nvar c = a &gt; b ? 1:0;</p>\n<ul>\n<li>语法：<br />\n表达式？值 1: 值 2;<br />\n 判断表达式的值，如果是 true 则取值 1，如果是 false 则取值 2；</li>\n</ul>\n</li>\n<li>\n<p>流程控制语句：</p>\n<ol>\n<li>\n<p>if...else...</p>\n</li>\n<li>\n<p>switch:</p>\n<p>在 java 中，switch 语句可以接受的数据类型： byte int shor char, 枚举 (1.5) ,String (1.7)</p>\n<ul>\n<li>\n<p>switch (变量):</p>\n<p>case 值:</p>\n<p>在 JS 中，switch 语句可以接受任意的原始数据类型</p>\n</li>\n</ul>\n</li>\n<li>\n<p>while</p>\n</li>\n<li>\n<p>do...while</p>\n</li>\n<li>\n<p>for</p>\n</li>\n</ol>\n</li>\n<li>\n<p>JS 特殊语法：</p>\n<ol>\n<li>\n<p>语句以；结尾，如果一行只有一条语句则；可以省略 (不建议)</p>\n</li>\n<li>\n<p>变量的定义使用 var 关键字，也可以不使用</p>\n<ul>\n<li>\n<p>用： 定义的变量是局部变量</p>\n</li>\n<li>\n<p>不用：定义的变量是全局变量 (不建议)</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>练习：99 乘法表</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">99</span>乘法表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t      td<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t          <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> 1px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;table  align='center'>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//1. 完成基本的 for 循环嵌套，展示乘法表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;tr>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span>i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 输出  1 * 1 = 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * \"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/td>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \t<span class=\"token comment\">/*// 输出换行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    \tdocument.write (\"&lt;br>\");*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   \t\t document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/tr>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//2. 完成表格嵌套</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/table>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> \t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"基本对象\"><a class=\"anchor\" href=\"#基本对象\">#</a> 基本对象</h2>\n<h3 id=\"function函数方法对象\"><a class=\"anchor\" href=\"#function函数方法对象\">#</a> Function：函数 (方法) 对象</h3>\n<ol>\n<li>\n<p>创建</p>\n<p>var fun = new Function (形式参数列表，方法体);  // 忘掉吧</p>\n<p>function 方法名称 (形式参数列表){<br />\n方法体<br />\n}</p>\n<p>var 方法名 = function (形式参数列表){</p>\n<p>​\t\t\t方法体<br />\n​\t\t}</p>\n</li>\n</ol>\n<p>​\t属性：length: 代表形参的个数</p>\n<ol start=\"2\">\n<li>特点：\n<ol>\n<li>方法定义是，形参的类型不用写，返回值类型也不写。</li>\n<li>方法是一个对象，如果定义名称相同的方法，会覆盖</li>\n<li>在 JS 中，方法的调用只与方法的名称有关，和参数列表无关</li>\n<li>在方法声明中有一个隐藏的内置对象（数组），arguments, 封装所有的实际参数</li>\n</ol>\n</li>\n<li>调用：<br />\n方法名称 (实际参数列表);</li>\n</ol>\n<h3 id=\"array数组对象\"><a class=\"anchor\" href=\"#array数组对象\">#</a> Array: 数组对象</h3>\n<ol>\n<li>创建：\n<ol>\n<li>var arr = new Array (元素列表);</li>\n<li>var arr = new Array (默认长度);</li>\n<li>var arr = [元素列表];</li>\n</ol>\n</li>\n<li>方法<br />\n join (参数): 将数组中的元素按照指定的分隔符拼接为字符串<br />\n push ()\t向数组的末尾添加一个或更多元素，并返回新的长度。</li>\n<li>属性<br />\n length: 数组的长度</li>\n<li>特点：\n<ol>\n<li>JS 中，数组元素的类型可变的。</li>\n<li>JS 中，数组长度可变的。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"boolean\"><a class=\"anchor\" href=\"#boolean\">#</a> Boolean</h3>\n<h3 id=\"date日期对象\"><a class=\"anchor\" href=\"#date日期对象\">#</a> Date：日期对象</h3>\n<ol>\n<li>\n<p>创建：<br />\nvar date = new Date();</p>\n</li>\n<li>\n<p>方法：<br />\ntoLocaleString ()：返回当前 date 对象对应的时间本地字符串格式<br />\n getTime (): 获取毫秒值。返回当前如期对象描述的时间到 1970 年 1 月 1 日零点的毫秒值差</p>\n</li>\n</ol>\n<h3 id=\"math数学对象\"><a class=\"anchor\" href=\"#math数学对象\">#</a> Math：数学对象</h3>\n<ol>\n<li>\n<p>创建：</p>\n<ul>\n<li>特点：Math 对象不用创建，直接使用。  Math. 方法名 ();</li>\n</ul>\n</li>\n<li>\n<p>方法：<br />\nrandom (): 返回 0 ~ 1 之间的随机数。 含 0 不含 1<br />\nceil (x)：对数进行上舍入。<br />\nfloor (x)：对数进行下舍入。<br />\nround (x)：把数四舍五入为最接近的整数。</p>\n</li>\n<li>\n<p>属性：<br />\nPI</p>\n</li>\n</ol>\n<h3 id=\"number\"><a class=\"anchor\" href=\"#number\">#</a> Number</h3>\n<h3 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h3>\n<h3 id=\"regexp正则表达式对象\"><a class=\"anchor\" href=\"#regexp正则表达式对象\">#</a> RegExp：正则表达式对象</h3>\n<ol>\n<li>\n<p>正则表达式：定义字符串的组成规则。</p>\n<p>单个字符:[]</p>\n<p>如： [a] [ab] [a-zA-Z0-9_]</p>\n</li>\n</ol>\n<ul>\n<li>特殊符号代表特殊含义的单个字符:<br />\n\\d: 单个数字字符 [0-9]\t\t\t\\w: 单个单词字符 [a-zA-Z0-9_]</li>\n</ul>\n<ol start=\"2\">\n<li>量词符号：<br />\n?：表示出现 0 次或 1 次<br />\n *：表示出现 0 次或多次<br />\n +：出现 1 次或多次<br />\n {m,n}: 表示 m&lt;= 数量 &lt;= n\n<ul>\n<li>m 如果缺省： {,n}: 最多 n 次</li>\n<li>n 如果缺省：{m,} 最少 m 次</li>\n</ul>\n</li>\n<li>开始结束符号\n<ul>\n<li>^: 开始</li>\n<li>$: 结束</li>\n</ul>\n</li>\n<li>正则对象：</li>\n<li>创建\n<ol>\n<li>var reg = new RegExp (&quot;正则表达式&quot;);</li>\n<li>var reg = / 正则表达式 /;</li>\n</ol>\n</li>\n<li>方法\n<ol>\n<li>test (参数): 验证指定的字符串是否符合正则定义的规范</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"global\"><a class=\"anchor\" href=\"#global\">#</a> Global</h3>\n<ol>\n<li>\n<p>特点：全局对象，这个 Global 中封装的方法不需要对象就可以直接调用。  方法名 ();</p>\n</li>\n<li>\n<p>方法：<br />\nencodeURI ():url 编码<br />\n decodeURI ():url 解码</p>\n<p>encodeURIComponent ():url 编码，编码的字符更多<br />\n decodeURIComponent ():url 解码</p>\n<p>parseInt (): 将字符串转为数字</p>\n<ul>\n<li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为 number<br />\nisNaN (): 判断一个值是否是 NaN</li>\n<li>NaN 六亲不认，连自己都不认。NaN 参与的 == 比较全部问 false</li>\n</ul>\n<p>eval (): 讲 JavaScript 字符串，并把它作为脚本代码来执行。</p>\n</li>\n<li>\n<p>URL 编码<br />\n传智播客 =  % E4% BC% A0% E6%99% BA% E6%92% AD% E5% AE% A2</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>超链接功能：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token number\">1</span>可以被点击；不加href看不到超链接的样式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token number\">2.</span>点击之后跳转到href指定的url<span class=\"token operator\">--</span></pre></td></tr></table></figure><h1 id=\"dom简单学习\"><a class=\"anchor\" href=\"#dom简单学习\">#</a> DOM 简单学习</h1>\n<p>为了满足案例要求</p>\n<ul>\n<li>\n<p>功能：控制 html 文档的内容</p>\n</li>\n<li>\n<p>获取页面标签 (元素) 对象：Element</p>\n<p><strong>document.getElementById (&quot;id 值&quot;): 通过元素的 id 获取元素对象</strong></p>\n</li>\n<li>\n<p>操作 Element 对象：</p>\n<ol>\n<li>\n<p>修改属性值：</p>\n<p>​\t\t\t1 明确获取的对象是哪一个？</p>\n<p>​\t\t\t2  查看 API 文档，找其中有哪些属性可以设置</p>\n</li>\n<li>\n<p>修改标签体内容：</p>\n<ul>\n<li>\n<p>属性：innerHTML</p>\n<p>​\t\t获取元素对象</p>\n<p>​\t使用 innerHTML 属性修改标签体内容</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"事件简单学习\"><a class=\"anchor\" href=\"#事件简单学习\">#</a> 事件简单学习</h1>\n<p>功能： 某些组件被执行了某些操作后，触发某些代码的执行。</p>\n<ul>\n<li>造句：  xxx 被 xxx, 我就 xxx\n<ul>\n<li>我方水晶被摧毁后，我就责备对友。</li>\n<li>敌方水晶被摧毁后，我就夸奖自己。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"绑定事件\"><a class=\"anchor\" href=\"#绑定事件\">#</a> 绑定事件</h2>\n<ol>\n<li>\n<p>直接在 html 标签上，指定事件的属性 (操作)，属性值就是 js 代码</p>\n<ol>\n<li><strong>事件：<em>onclick-</em>-- 单击事件</strong></li>\n</ol>\n</li>\n<li>\n<p>通过 js 获取元素对象，指定事件属性，设置一个函数</p>\n</li>\n</ol>\n<h2 id=\"案例电灯开关\"><a class=\"anchor\" href=\"#案例电灯开关\">#</a> 案例：电灯开关</h2>\n<p>（见练习题）</p>\n<h1 id=\"bom浏览器对象模型\"><a class=\"anchor\" href=\"#bom浏览器对象模型\">#</a> BOM: 浏览器对象模型</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>Browser Object Model 浏览器对象模型</p>\n<p>将浏览器的各个组成部分封装成对象。</p>\n<h2 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h2>\n<p>Window：窗口对象</p>\n<p>Screen：显示器屏幕对象</p>\n<p>History：历史记录对象</p>\n<p>Location：地址栏对象</p>\n<p>Navigator：浏览器对象</p>\n<p><img data-src=\"../pictures/JavaScript/image-20230814222410072.png\" alt=\"image-20230814222410072\" /></p>\n<h2 id=\"window窗口对象\"><a class=\"anchor\" href=\"#window窗口对象\">#</a> Window: 窗口对象</h2>\n<h3 id=\"与弹出框有关的方法\"><a class=\"anchor\" href=\"#与弹出框有关的方法\">#</a> 与弹出框有关的方法</h3>\n<p>​\t<em><strong>alert()</strong></em>\t显示带有一段消息和一个确认按钮的警告框。<br />\n<em><strong>confirm()</strong></em>\t显示带有一段消息以及确认按钮和取消按钮的对话框。</p>\n<p>​\t\t\t\t如果用户点击确定按钮，则方法返回 true</p>\n<p>​\t\t\t\t如果用户点击取消按钮，则方法返回 false<br />\n​\t<em><strong>prompt()</strong></em>\t显示可提示用户输入的对话框。</p>\n<p>​\t\t\t\t返回值：获取用户输入的值</p>\n<p>​\t\t\t\t与打开关闭有关的方法：<br />\n<em><strong>close()</strong></em>\t关闭浏览器窗口。</p>\n<p>​\t\t\t\t谁调用我 ，我关谁<br />\n<em><strong> open ()</strong></em>\t打开一个新的浏览器窗口</p>\n<p>​\t\t\t\t返回新的 Window 对象</p>\n<h3 id=\"与定时器有关的方式\"><a class=\"anchor\" href=\"#与定时器有关的方式\">#</a> 与定时器有关的方式</h3>\n<p>​\t\t<em><strong>setTimeout()</strong></em>\t在指定的毫秒数后调用函数或计算表达式。</p>\n<p>​\t\t\t参数：</p>\n<p>​\t\t\t\tjs 代码或者方法对象</p>\n<p>​\t\t\t\t毫秒值</p>\n<p>​\t\t返回值：唯一标识，用于取消定时器</p>\n<p><em><strong>clearTimeout()</strong></em>\t取消由 setTimeout () 方法设置的 timeout。</p>\n<p><em><strong>setInterval()</strong></em>\t按照指定的周期（以毫秒计）来调用函数或计算表达式。<br />\n<em><strong>clearInterval()</strong></em>\t取消由 setInterval () 设置的 timeout。</p>\n<h3 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h3>\n<ol>\n<li>获取其他 BOM 对象：<br />\nhistory<br />\nlocation<br />\nNavigator<br />\nScreen:</li>\n<li>获取 DOM 对象<br />\n document</li>\n</ol>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<p>​\t\t\tWindow 对象不需要创建可以直接使用 window 使用。 window. 方法名 ();</p>\n<p>​\t\t\twindow 引用可以省略。  方法名 ();   例如：alert（）；</p>\n<h2 id=\"location地址栏对象\"><a class=\"anchor\" href=\"#location地址栏对象\">#</a> Location: 地址栏对象</h2>\n<p>​       1. 创建 (获取)：</p>\n<p>​\t\t\t\twindow.location</p>\n<p>​\t\t\t\tlocation</p>\n<p>​\t\t2. 方法：</p>\n<p>​\t\t\t\t<em><strong>reload()</strong></em>\t重新加载当前文档。刷新   <em><strong>location.relode();</strong></em></p>\n<p>​\t\t3. 属性</p>\n<p>​\t\t\t\t<em><strong>href</strong></em>\t设置或返回完整的 URL 路径。  <em><strong>location.href = &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pdGNhc3QuY24=\">http://www.itcast.cn</span>&quot;;</strong></em></p>\n<h2 id=\"history历史记录对象\"><a class=\"anchor\" href=\"#history历史记录对象\">#</a> History: 历史记录对象</h2>\n<ol>\n<li>\n<p>创建 (获取)：</p>\n<ol>\n<li>window.history</li>\n<li>history</li>\n</ol>\n</li>\n<li>\n<p>方法：</p>\n<ul>\n<li>\n<p>back ()\t加载 history 列表中的前一个 URL。</p>\n</li>\n<li>\n<p>forward ()\t加载 history 列表中的下一个 URL。</p>\n</li>\n<li>\n<p>go (参数)\t加载 history 列表中的某个具体页面。</p>\n<ul>\n<li>\n<p>参数：</p>\n<p>​\t正数：前进几个历史记录</p>\n<p>​\t负数：后退几个历史记录</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>属性：</p>\n<p>​           length\t返回当前窗口历史列表中的 URL 数量。</p>\n</li>\n</ol>\n<h1 id=\"dom文档对象模型\"><a class=\"anchor\" href=\"#dom文档对象模型\">#</a> DOM: 文档对象模型</h1>\n<p>概念： Document Object Model</p>\n<p>​\t\t\t\t\t将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行 CRUD 的动态操作</p>\n<p>W3C DOM 标准被分为 3 个不同的部分：</p>\n<p>​\t\t1. 核心 DOM - 针对任何结构化文档的标准模型</p>\n<p>​\t\t\t\t\tDocument：文档对象</p>\n<p>​\t\t\t\t\tElement：元素对象</p>\n<p>​\t\t\t\t\tAttribute：属性对象</p>\n<p>​\t\t\t\t\tText：文本对象</p>\n<p>​\t\t\t\t\tComment: 注释对象</p>\n<p>​\t\t\t\t\tNode：节点对象，其他 5 个的父对象</p>\n<p>​\t\t2.XML DOM - 针对 XML 文档的标准模型</p>\n<p>​\t\t3.HTML DOM - 针对 HTML 文档的标准模型</p>\n<h1 id=\"核心dom模型\"><a class=\"anchor\" href=\"#核心dom模型\">#</a> 核心 DOM 模型：</h1>\n<h2 id=\"document文档对象\"><a class=\"anchor\" href=\"#document文档对象\">#</a> Document：文档对象</h2>\n<ol>\n<li>\n<p>创建 (获取)：在 html dom 模型中可以使用 window 对象来获取</p>\n<ol>\n<li>window.document</li>\n<li>document</li>\n</ol>\n</li>\n<li>\n<p>方法：</p>\n<p>a 获取 Element 对象：</p>\n<p>​\t\t\tgetElementById ()\t： 根据 id 属性值获取元素对象。id 属性值一般唯一</p>\n<p>​\t\t\tgetElementsByTagName ()：根据元素名称获取元素对象们。返回值是一个数组</p>\n<p>​\t\t\tgetElementsByClassName (): 根据 Class 属性值获取元素对象们。返回值是一个数组</p>\n<p>​\t\t\tgetElementsByName (): 根据 name 属性值获取元素对象们。返回值是一个数组</p>\n<p>b 创建其他 DOM 对象：<br />\ncreateAttribute(name)<br />\ncreateComment()<br />\ncreateElement()<br />\ncreateTextNode()</p>\n</li>\n<li>\n<p>属性</p>\n</li>\n</ol>\n<h2 id=\"element元素对象\"><a class=\"anchor\" href=\"#element元素对象\">#</a> Element：元素对象</h2>\n<ol>\n<li>获取 / 创建：通过 document 来获取和创建</li>\n<li>方法：\n<ol>\n<li>removeAttribute ()：删除属性</li>\n<li>setAttribute ()：设置属性</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"node节点对象\"><a class=\"anchor\" href=\"#node节点对象\">#</a> Node：节点对象</h2>\n<ul>\n<li>特点：所有 dom 对象都可以被认为是一个节点，，，其他 5 个的父对象</li>\n<li>方法：\n<ul>\n<li>CRUD (增删改查）dom 树：\n<ul>\n<li>appendChild ()：向节点的子节点列表的结尾添加新的子节点。</li>\n<li>removeChild ()\t：删除（并返回）当前节点的指定子节点。</li>\n<li>replaceChild ()：用新节点替换一个子节点。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性：\n<ul>\n<li>parentNode 返回节点的父节点。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"html-dom\"><a class=\"anchor\" href=\"#html-dom\">#</a> HTML DOM</h1>\n<ol>\n<li>标签体的设置和获取：innerHTML</li>\n<li>使用 html 元素对象的属性</li>\n<li>控制元素样式\n<ol>\n<li>\n<p>使用元素的 style 属性来设置<br />\n如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//修改样式方式1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     div1.style.border = \"1px solid red\";</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     div1.style.width = \"200px\";</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     //font-size--> fontSize</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     div1.style.fontSize = \"20px\";</pre></td></tr></table></figure></li>\n<li>\n<p>提前定义好类选择器的样式，通过元素的 className 属性来设置其 class 属性值。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"事件监听机制\"><a class=\"anchor\" href=\"#事件监听机制\">#</a> 事件监听机制：</h1>\n<h2 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h2>\n<p>某些组件被执行了某些操作后，触发某些代码的执行。</p>\n<ul>\n<li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li>\n<li>事件源：组件。如： 按钮 文本输入框...</li>\n<li>监听器：代码。</li>\n<li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li>\n</ul>\n<h2 id=\"常见的事件\"><a class=\"anchor\" href=\"#常见的事件\">#</a> 常见的事件</h2>\n<ol>\n<li>点击事件：\n<ol>\n<li>onclick：单击事件</li>\n<li>ondblclick：双击事件</li>\n</ol>\n</li>\n<li>焦点事件\n<ol>\n<li>onblur：失去焦点</li>\n<li>onfocus: 元素获得焦点。</li>\n</ol>\n</li>\n<li>加载事件：\n<ol>\n<li>onload：一张页面或一幅图像完成加载。</li>\n</ol>\n</li>\n<li>鼠标事件：\n<ol>\n<li>onmousedown\t鼠标按钮被按下。</li>\n<li>onmouseup\t鼠标按键被松开。</li>\n<li>onmousemove\t鼠标被移动。</li>\n<li>onmouseover\t鼠标移到某元素之上。</li>\n<li>onmouseout\t鼠标从某元素移开。</li>\n</ol>\n</li>\n<li>键盘事件：<br />\n1. onkeydown\t某个键盘按键被按下。\t<br />\n2. onkeyup\t\t某个键盘按键被松开。<br />\n3. onkeypress\t某个键盘按键被按下并松开。</li>\n<li>选择和改变<br />\n 1. onchange\t域的内容被改变。<br />\n2. onselect\t文本被选中。</li>\n<li>表单事件：\n<ol>\n<li><em><strong>onsubmit</strong></em>\t确认按钮被点击。</li>\n<li>onreset\t重置按钮被点击。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"bootstrap\"><a class=\"anchor\" href=\"#bootstrap\">#</a> Bootstrap</h1>\n<h2 id=\"概念-4\"><a class=\"anchor\" href=\"#概念-4\">#</a> 概念</h2>\n<p>一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</p>\n<ul>\n<li>框架：一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li>\n<li>好处：</li>\n</ul>\n<p>定义了很多的 css 样式和 js 插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</p>\n<p>响应式布局。</p>\n<ul>\n<li>同一套页面可以兼容不同分辨率的设备。</li>\n</ul>\n<p>快速入门</p>\n<ol>\n<li>下载 Bootstrap</li>\n<li>在项目中将这三个文件夹复制</li>\n<li>创建 html 页面，引入必要的资源文件</li>\n</ol>\n<h2 id=\"基本框架bootstrap_hellowworld\"><a class=\"anchor\" href=\"#基本框架bootstrap_hellowworld\">#</a> 基本框架：Bootstrap_HellowWorld</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Bootstrap HelloWorld<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/jquery-3.2.1.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/bootstrap.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        你好，世界！</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"响应式布局\"><a class=\"anchor\" href=\"#响应式布局\">#</a> 响应式布局</h1>\n<ul>\n<li>\n<p>同一套页面可以兼容不同分辨率的设备。</p>\n</li>\n<li>\n<p>实现：依赖于栅格系统：将一行平均分成 12 个格子，可以指定元素占几个格子</p>\n</li>\n<li>\n<p>步骤：</p>\n<ol>\n<li>定义容器。相当于之前的 table、\n<ul>\n<li>容器分类：\n<ol>\n<li>container：两边留白</li>\n<li>container-fluid：每一种设备都是 100% 宽度</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>定义行。相当于之前的 tr   样式：row</li>\n<li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col - 设备代号 - 格子数目\n<ul>\n<li>设备代号：\n<ol>\n<li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li>\n<li>sm：小屏幕 平板 (≥768px)</li>\n<li>md：中等屏幕 桌面显示器 (≥992px)</li>\n<li>lg：大屏幕 大桌面显示器 (≥1200px)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>注意：\n<ol>\n<li>一行中如果格子数目超过 12，则超出部分自动换行。</li>\n<li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li>\n<li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"css样式和js插件\"><a class=\"anchor\" href=\"#css样式和js插件\">#</a> CSS 样式和 JS 插件</h1>\n<h2 id=\"全局css样式\"><a class=\"anchor\" href=\"#全局css样式\">#</a> 全局 CSS 样式</h2>\n<ul>\n<li>按钮：class=&quot;btn btn-default&quot;</li>\n<li>图片：\n<ul>\n<li>class=&quot;img-responsive&quot;：图片在任意尺寸都占 100%</li>\n<li>图片形状\n<ul>\n<li>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;：方形</li>\n<li>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt; ： 圆形</li>\n<li>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt; ：相框</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>表格\n<ul>\n<li>table</li>\n<li>table-bordered</li>\n<li>table-hover</li>\n</ul>\n</li>\n<li>表单\n<ul>\n<li>给表单项添加：class=&quot;form-control&quot;</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>组件：</li>\n</ol>\n<ul>\n<li>导航条</li>\n<li>分页条</li>\n</ul>\n<ol start=\"2\">\n<li>插件：</li>\n</ol>\n<ul>\n<li>轮播图</li>\n</ul>\n<h2 id=\"案例-见练习题\"><a class=\"anchor\" href=\"#案例-见练习题\">#</a> 案例  见练习题</h2>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/3HTML-CSS/",
            "url": "https://jihaipeng123.github.io/3HTML-CSS/",
            "title": "3.HTML&CSS",
            "date_published": "2023-08-14T11:47:06.000Z",
            "content_html": "<h1 id=\"web概念概述\"><a class=\"anchor\" href=\"#web概念概述\">#</a> web 概念概述</h1>\n<h2 id=\"javaweb\"><a class=\"anchor\" href=\"#javaweb\">#</a> JavaWeb：</h2>\n<ul>\n<li>使用 Java 语言开发基于互联网的项目</li>\n</ul>\n<h2 id=\"软件架构\"><a class=\"anchor\" href=\"#软件架构\">#</a> 软件架构：</h2>\n<h3 id=\"cs-clientserver-客户端服务器端\"><a class=\"anchor\" href=\"#cs-clientserver-客户端服务器端\">#</a> C/S: Client/Server 客户端 / 服务器端</h3>\n<ul>\n<li>\n<p>在用户本地有一个客户端程序，在远程有一个服务器端程序</p>\n<p>​\t如：QQ，迅雷...</p>\n<ul>\n<li>优点：  用户体验好</li>\n<li>缺点： 开发、安装，部署，维护 麻烦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bs-browserserver-浏览器服务器端\"><a class=\"anchor\" href=\"#bs-browserserver-浏览器服务器端\">#</a> B/S: Browser/Server 浏览器 / 服务器端</h3>\n<ul>\n<li>只需要一个浏览器，用户通过不同的网址 (URL)，客户访问不同的服务器端程序</li>\n<li>优点：\n<ol>\n<li>开发、安装，部署，维护 简单</li>\n</ol>\n</li>\n<li>缺点：\n<ol>\n<li>如果应用过大，用户的体验可能会受到影响</li>\n<li>对硬件要求过高</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"bs架构详解\"><a class=\"anchor\" href=\"#bs架构详解\">#</a> B/S 架构详解</h2>\n<ul>\n<li>资源分类（服务器端）：\n<ol>\n<li>静态资源：\n<ul>\n<li>使用静态网页开发技术发布的资源。</li>\n<li>特点：\n<ul>\n<li>所有用户访问，得到的结果是一样的。</li>\n<li>如：文本，图片，音频、视频，（HTML,CSS,JavaScript）</li>\n<li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态资源：\n<ul>\n<li>使用动态网页技术发布的资源。</li>\n<li>特点：</li>\n<li>所有用户访问，得到的结果可能不一样。</li>\n<li>如：jsp/servlet,php,asp...</li>\n<li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>我们要学习动态资源，必须先学习静态资源！</p>\n<h2 id=\"静态资源\"><a class=\"anchor\" href=\"#静态资源\">#</a> 静态资源：</h2>\n<ul>\n<li>HTML：用于搭建基础网页，展示页面的内容</li>\n<li>CSS：用于美化页面，布局页面</li>\n<li>JavaScript：控制页面的元素，让页面有一些动态的效果</li>\n</ul>\n<h1 id=\"html\"><a class=\"anchor\" href=\"#html\">#</a> HTML</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>​\t是最基础的网页开发语言，用于搭建基础网页，展示页面的内容</p>\n<ul>\n<li>Hyper Text Markup Language 超文本标记语言\n<ul>\n<li>超文本:\n<ul>\n<li>超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</li>\n</ul>\n</li>\n<li>标记语言:\n<ul>\n<li>由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li>\n<li>标记语言不是编程语言</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法：</h2>\n<ol>\n<li>html 文档后缀名 .html 或者 .htm</li>\n<li>标签分为\n<ol>\n<li>围堵标签：有开始标签和结束标签。如 &lt;html&gt; &lt;/html&gt;</li>\n<li>自闭和标签：开始标签和结束标签在一起。如 &lt;br/&gt; 换行标签</li>\n<li>标签可以嵌套：<br />\n需要正确嵌套，不能你中有我，我中有你 &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</li>\n<li>在开始标签中可以定义属性。属性是由键值对构成，值需要用引号 (单双都可) 引起来</li>\n<li>html 的标签不区分大小写，但是建议使用小写。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"标签学习\"><a class=\"anchor\" href=\"#标签学习\">#</a> 标签学习：</h2>\n<p>打关键字，然后   ctrl + j   快捷出  或   Table 键</p>\n<h3 id=\"文件标签\"><a class=\"anchor\" href=\"#文件标签\">#</a> 文件标签</h3>\n<p>构成 html 最基本的标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* html:html文档的根标签</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t* head：头标签。用于指定html文档的一些属性。引入外部的资源</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t* title：标题标签。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* body：体标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t* <span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>：html5中定义该文档是html文档</pre></td></tr></table></figure><h3 id=\"文本标签\"><a class=\"anchor\" href=\"#文本标签\">#</a> 文本标签</h3>\n<p>和文本有关的标签</p>\n<ul>\n<li>\n<p>注释：&lt;!-- 注释内容 --&gt;</p>\n</li>\n<li>\n<p>标题标签: &lt;h1&gt; to &lt;h6&gt;：</p>\n</li>\n<li>\n<p>h1~h6: 字体大小逐渐递减，带换行</p>\n</li>\n<li>\n<p>段落标签: &lt;p&gt;</p>\n</li>\n<li>\n<p>换行标签  : &lt;br&gt;</p>\n</li>\n<li>\n<p>展示一条水平线 : &lt;hr&gt;</p>\n</li>\n<li>\n<p>color：颜色</p>\n</li>\n<li>\n<p>width：宽度</p>\n</li>\n<li>\n<p>size：高度</p>\n<ul>\n<li>align：对其方式<br />\n center：居中<br />\n left：左对齐<br />\n right：右对齐</li>\n</ul>\n</li>\n<li>\n<p>&lt;b&gt;：字体加粗</p>\n</li>\n<li>\n<p>&lt;i&gt;：字体斜体</p>\n</li>\n<li>\n<p>&lt;font&gt;: 字体标签<br />\n属性：<br />\ncolor：颜色<br />\n size：大小<br />\n face：字体</p>\n</li>\n<li>\n<p>文本居中:&lt;center&gt;</p>\n</li>\n<li>\n<p>属性定义：<br />\ncolor：</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>英文单词：red,green,blue</p>\n</li>\n<li>\n<p>rgb (值 1，值 2，值 3)：值的范围：0~255  如  rgb (0,0,255)</p>\n<p>#值 1 值 2 值 3：值的范围：00~FF 之间。如： #FF00FF</p>\n</li>\n<li>\n<p>width：</p>\n<p>数值：width='20' , 数值的单位，默认是 px (像素)</p>\n<p>数值 %：占比相对于父元素的比例</p>\n</li>\n</ol>\n<p>公司简介</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>黑马程序员简介<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> 公司简介<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#ffd700<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF0000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\"中关村黑马程序员训练营\"<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    是由<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span>传智播客<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>联合中关村软件园委托传智播客进行教致力于服务各大而企业招不到优秀人才的困扰。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>目前，“中关村黑马程序员训练营”已成长为行业“学员质量好”的移动开发高端训练基地<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#ffd700<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gray<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>江苏传智播客教育科技股份有限公司<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>版权所有Copyright 2006-2018<span class=\"token entity named-entity\" title=\"&copy;\">&amp;copy;</span>, All Rights Reserved 苏ICP备16007882</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"图片标签\"><a class=\"anchor\" href=\"#图片标签\">#</a> 图片标签</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>img：展示图片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>属性：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>src：指定图片的位置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 展示一张图片 img--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/jingxuan_2.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>古镇<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 相对路径</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          以。开头的路径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          ./：代表当前目录  ./image/1.jpg</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          ../: 代表上一级目录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./image/jiangwai_1.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../image/jiangwai_1.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"列表标签\"><a class=\"anchor\" href=\"#列表标签\">#</a> 列表标签</h3>\n<ul>\n<li>有序列表：<br />\nol:<br />\n 早上起床干的事情<br />\n &lt;ol type=&quot;A&quot;&gt;<br />\n&lt;li&gt; 睁眼睛 &lt;/li&gt;<br />\n&lt;li&gt; 看手机 &lt;/li&gt;<br />\n&lt;li&gt; 床衣服 &lt;/li&gt;<br />\n&lt;/ol&gt;</li>\n<li>无序列表： 同上<br />\n ul:<br />\nli:</li>\n</ul>\n<h3 id=\"链接标签\"><a class=\"anchor\" href=\"#链接标签\">#</a> 链接标签：</h3>\n<ul>\n<li>\n<p>a: 定义一个超链接<br />\n属性：<br />\nhref：指定访问资源的 URL (统一资源定位符)<br />\n target：指定打开资源的方式<br />\n_self: 默认值，在当前页面打开<br />\n<em> blank：在空白页面打开</em></p>\n</li>\n<li>\n<p>代码：<br />\n&lt;!-- 超链接  a--&gt;_<br />\n&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pdGNhc3QuY24=\">http://www.itcast.cn</span>&quot;&gt;</p>\n</li>\n</ul>\n<h3 id=\"div和span\"><a class=\"anchor\" href=\"#div和span\">#</a> div 和 span：</h3>\n<ul>\n<li>div: 每一个 div 占满一整行。块级标签</li>\n<li>span：文本信息在一行展示，行内标签 内联标签</li>\n</ul>\n<h3 id=\"语义化标签\"><a class=\"anchor\" href=\"#语义化标签\">#</a> 语义化标签</h3>\n<p>html5 中为了提高程序的可读性，提供了一些标签。&lt;footer&gt;：页脚     &lt;footer&gt;：页脚</p>\n<h3 id=\"表格标签\"><a class=\"anchor\" href=\"#表格标签\">#</a> 表格标签</h3>\n<ul>\n<li>table：定义表格</li>\n<li>width：宽度</li>\n<li>border：边框</li>\n<li>cellpadding：定义内容和单元格的距离</li>\n<li>cellspacing：定义单元格之间的距离。如果指定为 0，则单元格的线会合为一条、</li>\n<li>bgcolor：背景色</li>\n<li>align：对齐方式</li>\n<li>tr：定义行</li>\n<li>bgcolor：背景色</li>\n<li>align：对齐方式</li>\n<li>td：定义单元格</li>\n<li>colspan：合并列</li>\n<li>rowspan：合并行</li>\n<li>th：定义表头单元格</li>\n<li>&lt;caption&gt;：表格标题</li>\n<li>&lt;thead&gt;：表示表格的头部分</li>\n<li>&lt;tbody&gt;：表示表格的体部分</li>\n<li>&lt;tfoot&gt;：表示表格的脚部分</li>\n</ul>\n<p>## 案例：旅游网站首页<br />\n见例题<br />\n单行单列用</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"表单标签\"><a class=\"anchor\" href=\"#表单标签\">#</a> 表单标签</h2>\n<p>表单：</p>\n<ol>\n<li>\n<p>概念：用于采集用户输入的数据的。用于和服务器进行交互。</p>\n</li>\n<li>\n<p>form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围 +</p>\n<p>属性：</p>\n</li>\n</ol>\n<p>​\t\taction：指定提交数据的 URL</p>\n<p>​\t\tmethod: 指定提交方式</p>\n<p>分类：一共 7 种，2 种比较常用</p>\n<ol>\n<li>\n<p>get：</p>\n<p>请求参数会在地址栏中显示。会封装到请求行中 (HTTP 协议后讲解)。</p>\n<p>请求参数大小是有限制的。</p>\n<p>不太安全。</p>\n</li>\n<li>\n<p>post：</p>\n</li>\n</ol>\n<p>​\t\t\t请求参数不会再地址栏中显示。会封装在请求体中 (HTTP 协议后讲解)</p>\n<p>​\t\t请求参数的大小没有限制。</p>\n<p>​\t\t\t较为安全。</p>\n<p>表单项中的数据要想被提交：必须指定其 name 属性</p>\n<h2 id=\"表单项标签\"><a class=\"anchor\" href=\"#表单项标签\">#</a> 表单项标签</h2>\n<ul>\n<li>\n<p>input：可以通过 type 属性值，改变元素展示的样式</p>\n</li>\n<li>\n<p>type 属性：</p>\n<pre><code>* text：文本输入框，默认值\n\t placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息\t\n</code></pre>\n</li>\n<li>\n<p>password：密码输入框</p>\n</li>\n<li>\n<p>radio: 单选框</p>\n<p>注意：</p>\n<ol>\n<li>\n<p>要想让多个单选框实现单选的效果，则多个单选框的 name 属性值必须一样。</p>\n</li>\n<li>\n<p>一般会给每一个单选框提供 value 属性，指定其被选中后提交的值</p>\n</li>\n<li>\n<p>checked 属性，可以指定默认值 checked 或 checked=&quot;checked&quot;;</p>\n<ul>\n<li>checkbox：复选框</li>\n</ul>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>\n<p>一般会给每一个单选框提供 value 属性，指定其被选中后提交的值</p>\n<ol start=\"2\">\n<li>checked 属性，可以指定默认值</li>\n</ol>\n<ul>\n<li>\n<p>file：文件选择框</p>\n</li>\n<li>\n<p>hidden：隐藏域，用于提交一些信息。</p>\n</li>\n<li>\n<p>按钮：</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>submit：提交按钮。可以提交表单</p>\n</li>\n<li>\n<p>button：普通按钮</p>\n</li>\n<li>\n<p>image：图片提交按钮</p>\n<p>src 属性指定图片的路径</p>\n<ul>\n<li>label：指定输入项的文字描述信息</li>\n</ul>\n<pre><code>注意：\n</code></pre>\n<ul>\n<li>\n<p>label 的 for 属性一般会和 input 的 id 属性值 对应。如果对应了，则点击 label 区域，会让 input 输入框获取焦点。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>用户名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入用户名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>select: 下拉列表<br />\n子元素：option，指定列表项</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>省份<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>--请选择--<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>北京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>上海<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>天津<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">selected</span><span class=\"token punctuation\">></span></span>陕西<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>textarea：文本域<br />\n cols：指定列数，每一行有多少个字符<br />\n rows：默认多少行。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自我描述<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">cols</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>discribe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"css页面美化和布局控制\"><a class=\"anchor\" href=\"#css页面美化和布局控制\">#</a> CSS：页面美化和布局控制</h1>\n<p>概念： Cascading Style Sheets 层叠样式表<br />\n层叠：多个样式可以作用在同一个 html 的元素上，同时生效</p>\n<h2 id=\"好处\"><a class=\"anchor\" href=\"#好处\">#</a> 好处</h2>\n<ol>\n<li>功能强大</li>\n<li>将内容展示和样式控制分离<br />\n降低耦合度。解耦<br />\n让分工协作更容易<br />\n提高开发效率</li>\n</ol>\n<h2 id=\"css与html结合方式\"><a class=\"anchor\" href=\"#css与html结合方式\">#</a> CSS 与 html 结合方式</h2>\n<h3 id=\"内联样式\"><a class=\"anchor\" href=\"#内联样式\">#</a> 内联样式</h3>\n<p>在标签内使用 style 属性指定 css 代码<br />\n如：&lt;div style=&quot;color:red;&quot;&gt;hello css&lt;/div&gt;</p>\n<h3 id=\"内部样式\"><a class=\"anchor\" href=\"#内部样式\">#</a> 内部样式</h3>\n<p>在 head 标签内，定义 style 标签，style 标签的标签体内容就是 css 代码<br />\n如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>hello css<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"外部样式\"><a class=\"anchor\" href=\"#外部样式\">#</a> 外部样式</h3>\n<ol>\n<li>定义 css 资源文件。</li>\n<li>在 head 标签内，定义 link 标签，引入外部的资源文件<br />\n如： a.css 文件：<br />\ndiv{<br />\ncolor:green;<br />\n}<br />\n&lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt;<br />\n&lt;div&gt;hello css&lt;/div&gt;<br />\n&lt;div&gt;hello css&lt;/div&gt;</li>\n</ol>\n<ul>\n<li>注意：<br />\n1,2,3 种方式 css 作用范围越来越大<br />\n 1 方式不常用，后期常用 2,3<br />\n 第 3 种格式可以写为：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"css/a.css\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"css语法\"><a class=\"anchor\" href=\"#css语法\">#</a> css 语法</h2>\n<ul>\n<li>格式：<br />\n选择器 {<br />\n属性名 1: 属性值 1;<br />\n 属性名 2: 属性值 2;<br />\n...<br />\n}</li>\n<li>选择器：筛选具有相似特征的元素</li>\n<li>注意：\n<ul>\n<li>每一对属性需要使用；隔开，最后一对属性可以不加；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h2>\n<p>筛选具有相似特征的元素<br />\n分类：</p>\n<h3 id=\"基础选择器\"><a class=\"anchor\" href=\"#基础选择器\">#</a> 基础选择器</h3>\n<ol>\n<li>\n<p>id 选择器：选择具体的 id 属性值的元素。建议在一个 html 页面中 id 值唯一<br />\n语法：#id 属性值 {}</p>\n</li>\n<li>\n<p>元素选择器：选择具有相同标签名称的元素<br />\n语法： 标签名称 {}<br />\n 注意：id 选择器优先级高于元素选择器</p>\n</li>\n<li>\n<p>类选择器：选择具有相同的 class 属性值的元素。<br />\n语法：.class 属性值 {}<br />\n 注意：类选择器选择器优先级高于元素选择器</p>\n</li>\n</ol>\n<h3 id=\"扩展选择器\"><a class=\"anchor\" href=\"#扩展选择器\">#</a> 扩展选择器</h3>\n<ol>\n<li>\n<p>选择所有元素：<br />\n语法： *{}</p>\n</li>\n<li>\n<p>并集选择器：<br />\n选择器 1, 选择器 2 {}</p>\n</li>\n<li>\n<p>基础选择器子选择器：筛选选择器 1 元素下的选择器 2 元素<br />\n语法：  选择器 1 选择器 2 {}</p>\n</li>\n<li>\n<p>父选择器：筛选选择器 2 的父元素选择器 1<br />\n 语法：  选择器 1 &gt; 选择器 2 {}</p>\n</li>\n<li>\n<p>属性选择器：选择元素名称，属性名 = 属性值的元素<br />\n语法：  元素名称<span>属性名 =&quot;属性值&quot;</span>{}</p>\n</li>\n<li>\n<p>伪类选择器：选择一些元素具有的状态<br />\n语法： 元素：状态 {}<br />\n 如： &lt;a&gt; 超链接<br />\n * 状态：<br />\n* link：初始化的状态<br />\n * visited：被访问过的状态<br />\n * active：正在访问状态<br />\n * hover：鼠标悬浮状态</p>\n</li>\n</ol>\n<h2 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h2>\n<ol>\n<li>字体、文本</li>\n</ol>\n<ul>\n<li>\n<p>font-size：字体大小</p>\n</li>\n<li>\n<p>color：文本颜色</p>\n</li>\n<li>\n<p>text-align：对其方式</p>\n</li>\n<li>\n<p>line-height：行高</p>\n<ol start=\"2\">\n<li>\n<p>背景   * background：</p>\n</li>\n<li>\n<p>边框    * border：设置边框，符合属性</p>\n</li>\n<li>\n<p>尺寸</p>\n<ul>\n<li>width：宽度</li>\n<li>height：高度</li>\n</ul>\n</li>\n<li>\n<p>盒子模型：控制布局</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* margin：外边距</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* padding：内边距</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t* 默认情况下内边距会影响整个盒子的大小</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* float：浮动</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t* left</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t* right</pre></td></tr></table></figure><h2 id=\"注册页面案例\"><a class=\"anchor\" href=\"#注册页面案例\">#</a> 注册页面案例</h2>\n<p>见代码例题</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/2JDBC-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "url": "https://jihaipeng123.github.io/2JDBC-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "title": "2.JDBC&数据库连接池",
            "date_published": "2023-08-14T11:13:17.000Z",
            "content_html": "<h1 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h1>\n<ol>\n<li>概念：Java DataBase Connectivity  Java 数据库连接， Java 语言操作数据库</li>\n</ol>\n<ul>\n<li>JDBC 本质：其实是官方（sun 公司）定义的一套操作所有关系型数据库的规则，** 即接口。** 各个数据库厂商去实现这套接口，提供数据库驱动 jar 包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动 jar 包中的实现类。</li>\n</ul>\n<ol start=\"2\">\n<li>快速入门</li>\n</ol>\n<ul>\n<li>\n<p>步骤：</p>\n<ol>\n<li>导入驱动 jar 包 mysql-connector-java-5.1.37-bin.jar<br />\n1. 复制 mysql-connector-java-5.1.37-bin.jar 到项目的 libs 目录下<br />\n 2. 右键 --&gt;Add As Library</li>\n<li>注册驱动</li>\n<li>获取数据库连接对象 Connection</li>\n<li>定义 sql</li>\n<li>获取执行 sql 语句的对象 Statement</li>\n<li>执行 sql，接受返回结果</li>\n<li>处理结果</li>\n<li>释放资源</li>\n</ol>\n</li>\n</ul>\n<p>详解各个对象</p>\n<h2 id=\"drivermanager驱动管理对象\"><a class=\"anchor\" href=\"#drivermanager驱动管理对象\">#</a> DriverManager：驱动管理对象</h2>\n<p>功能：</p>\n<ol>\n<li>\n<p>注册驱动：告诉程序该使用哪一个数据库驱动 jar<br />\nstatic void registerDriver (Driver driver) : 注册与给定的驱动程序 DriverManager 。<br />\n写代码使用：  <strong>&lt;u&gt;Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&lt;/u&gt;</strong><br />\n 通过查看源码发现：在 com.mysql.jdbc.Driver 类中存在静态代码块<br />\n static {<br />\ntry {<br />\njava.sql.DriverManager.registerDriver(new Driver());<br />\n} catch (SQLException E) {<br />\nthrow new RuntimeException(&quot;Can't register driver!&quot;);<br />\n}<br />\n}</p>\n<p>注意：mysql5 之后的驱动 jar 包可以省略注册驱动的步骤。</p>\n</li>\n<li>\n<p>获取数据库连接：</p>\n<ul>\n<li>方法：static Connection getConnection (String url, String user, String password)</li>\n<li>参数：\n<ul>\n<li>url：指定连接的路径\n<ul>\n<li>语法：jdbc:mysql://ip 地址 (域名): 端口号 / 数据库名称</li>\n<li>例子：jdbc:mysql://localhost:3306/db3</li>\n<li>细节：如果连接的是本机 mysql 服务器，并且 mysql 服务默认端口是 3306，则 url 可以简写为：jdbc:mysql:/// 数据库名称</li>\n</ul>\n</li>\n<li>user：用户名</li>\n<li>password：密码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"connection数据库连接对象\"><a class=\"anchor\" href=\"#connection数据库连接对象\">#</a> Connection：数据库连接对象</h2>\n<ol>\n<li>功能：\n<ol>\n<li>获取执行 sql 的对象\n<ul>\n<li>Statement createStatement()</li>\n<li>PreparedStatement prepareStatement(String sql)</li>\n</ul>\n</li>\n<li>管理事务：\n<ul>\n<li>开启事务：setAutoCommit (boolean autoCommit) ：调用该方法设置参数为 false，即开启事务</li>\n<li>提交事务：commit ()</li>\n<li>回滚事务：rollback ()</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"statement执行sql的对象\"><a class=\"anchor\" href=\"#statement执行sql的对象\">#</a> Statement：执行 sql 的对象</h2>\n<ol>\n<li>\n<p>执行 sql</p>\n<ol>\n<li>boolean execute (String sql) ：可以执行任意的 sql -- 了解</li>\n<li>int executeUpdate (String sql) ：执行 DML（insert、update、delete）语句、DDL (create，alter、drop) 语句\n<ul>\n<li>返回值：影响的行数，可以通过这个影响的行数判断 DML 语句是否执行成功 返回值 &gt; 0 的则执行成功，反之，则失败。</li>\n</ul>\n</li>\n<li>ResultSet executeQuery (String sql)  ：执行 DQL（select) 语句</li>\n</ol>\n</li>\n<li>\n<p>练习：</p>\n<ol>\n<li>account 表 添加一条记录</li>\n<li>account 表 修改记录</li>\n<li>account 表 删除一条记录</li>\n</ol>\n<pre><code class=\"language-mysql\"> 代码：\n\tStatement stmt = null;\n     Connection conn = null;\n     try &#123;\n         //1. 注册驱动\n         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n         //2. 定义sql\n         String sql = &quot;insert into account values(null,'王五',3000)&quot;;\n         //3.获取Connection对象\n         conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;, &quot;root&quot;, &quot;root&quot;);\n         //4.获取执行sql的对象 Statement\n         stmt = conn.createStatement();\n         //5.执行sql\n         int count = stmt.executeUpdate(sql);//影响的行数\n         //6.处理结果\n         System.out.println(count);\n         if(count &gt; 0)&#123;\n             System.out.println(&quot;添加成功！&quot;);\n         &#125;else&#123;\n             System.out.println(&quot;添加失败！&quot;);\n         &#125;\n     &#125; catch (ClassNotFoundException e) &#123;\n         e.printStackTrace();\n     &#125; catch (SQLException e) &#123;\n         e.printStackTrace();\n     &#125;finally &#123;\n         //stmt.close();\n         //7. 释放资源\n         //避免空指针异常\n         if(stmt != null)&#123;\n             try &#123;\n                 stmt.close();\n             &#125; catch (SQLException e) &#123;\n                 e.printStackTrace();\n             &#125;\n         &#125;\n\n         if(conn != null)&#123;\n             try &#123;\n                 conn.close();\n             &#125; catch (SQLException e) &#123;\n                 e.printStackTrace();\n             &#125;\n         &#125;\n     &#125;\n</code></pre>\n</li>\n</ol>\n<h2 id=\"resultset结果集对象封装查询结果\"><a class=\"anchor\" href=\"#resultset结果集对象封装查询结果\">#</a> ResultSet：结果集对象，封装查询结果</h2>\n<ul>\n<li>\n<p>boolean next (): 游标向下移动一行，判断当前行是否是最后一行末尾 (是否有数据)，如果是，则返回 false，如果不是则返回 true</p>\n</li>\n<li>\n<p>getXxx (参数): 获取数据</p>\n<ul>\n<li>Xxx：代表数据类型   如： int getInt () ,\tString getString ()</li>\n<li>参数：\n<ol>\n<li>int：代表列的编号，从 1 开始   如： getString (1)</li>\n<li>String：代表列名称。 如： getDouble (&quot;balance&quot;)</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>注意：</p>\n<ul>\n<li>\n<p>使用步骤：</p>\n<ol>\n<li>游标向下移动一行</li>\n<li>判断是否有数据</li>\n<li>获取数据</li>\n</ol>\n<p>// 循环判断游标是否是最后一行末尾。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token keyword\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token comment\">// 获取数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token comment\">//6.2 获取数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         String name <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">double</span> balance <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span>getDouble<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> &#125;</pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>练习：jdbcDemo7<br />\n* 定义一个方法，查询 emp 表的数据将其封装为对象，然后装载集合，返回。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>定义Emp类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 定义方法 <span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">></span> findAll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&#123;&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 实现方法 <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"preparedstatement执行sql的对象\"><a class=\"anchor\" href=\"#preparedstatement执行sql的对象\">#</a> PreparedStatement：执行 sql 的对象</h2>\n<ol>\n<li>\n<p>SQL 注入问题：在拼接 sql 时，有一些 sql 的特殊关键字参与字符串的拼接。会造成安全性问题</p>\n</li>\n<li>\n<p>输入用户随便，输入密码：a' or 'a' = 'a</p>\n</li>\n<li>\n<p>sql：select * from user where username = 'fhdsjkf' and password = 'a' or 'a' = 'a'</p>\n</li>\n<li>\n<p>解决 sql 注入问题：使用 PreparedStatement 对象来解决</p>\n</li>\n<li>\n<p>预编译的 SQL：参数使用？作为占位符</p>\n</li>\n<li>\n<p>步骤：  // 重点</p>\n<ol>\n<li>导入驱动 jar 包 mysql-connector-java-5.1.37-bin.jar</li>\n<li>注册驱动</li>\n<li>获取数据库连接对象 Connection</li>\n<li>定义 sql\n<ul>\n<li>注意：sql 的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li>\n</ul>\n</li>\n<li>获取执行 sql 语句的对象 PreparedStatement  Connection.prepareStatement (String sql)</li>\n<li>给？赋值：\n<ul>\n<li>方法： setXxx (参数 1, 参数 2)\n<ul>\n<li>参数 1：？的位置编号 从 1 开始</li>\n<li>参数 2：？的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>执行 sql，接受返回结果，不需要传递 sql 语句</li>\n<li>处理结果</li>\n<li>释放资源</li>\n</ol>\n</li>\n<li>\n<p>注意：后期都会使用 PreparedStatement 来完成增删改查的所有操作</p>\n</li>\n<li>\n<p>可以防止 SQL 注入</p>\n</li>\n<li>\n<p>效率更高</p>\n</li>\n</ol>\n<h1 id=\"抽取jdbc工具类-jdbcutils\"><a class=\"anchor\" href=\"#抽取jdbc工具类-jdbcutils\">#</a> 抽取 JDBC 工具类 ： JDBCUtils</h1>\n<p>目的：简化书写          jdbcUtils  +  jdbcDemo7  +  jdbc.properties  实现练习</p>\n<p>分析：1 注册驱动也抽取，2 抽取一个方法获取连接对象</p>\n<p>需求：不想传递参数（麻烦），还得保证工具类的通用性。</p>\n<p>解决：配置文件 jdbc.properties</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">user</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpassword<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tdriver<span class=\"token operator\">=</span></pre></td></tr></table></figure><h1 id=\"jdbc控制事务\"><a class=\"anchor\" href=\"#jdbc控制事务\">#</a> JDBC 控制事务</h1>\n<p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p>\n<p>操作：1 开启事务         2 提交事务          3 回滚事务</p>\n<p>使用 Connection 对象来管理事务</p>\n<ul>\n<li>开启事务：setAutoCommit (boolean autoCommit) ：调用该方法设置参数为 false，即开启事务\n<ul>\n<li>在执行 sql 之前开启事务</li>\n</ul>\n</li>\n<li>提交事务：commit ()\n<ul>\n<li>当所有 sql 都执行完提交事务</li>\n</ul>\n</li>\n<li>回滚事务：rollback ()\n<ul>\n<li>在 catch 中回滚事务</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> class JDBCDemo10 &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    <span class=\"token keyword\">public</span> static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t        Connection conn <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t        PreparedStatement pstmt1 <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        PreparedStatement pstmt2 <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        try &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t            <span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t            conn <span class=\"token operator\">=</span> JDBCUtils<span class=\"token punctuation\">.</span>getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t            <span class=\"token comment\">// 开启事务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t            conn<span class=\"token punctuation\">.</span>setAutoCommit<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t            <span class=\"token comment\">//2. 定义 sql</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t            <span class=\"token comment\">//2.1 张三 - 500</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t            String sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set balance = balance - ? where id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t            <span class=\"token comment\">//2.2 李四 + 500</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t            String sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set balance = balance + ? where id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t            <span class=\"token comment\">//3. 获取执行 sql 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t            pstmt1 <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>prepareStatement<span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t            pstmt2 <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>prepareStatement<span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t            <span class=\"token comment\">//4. 设置参数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t            pstmt1<span class=\"token punctuation\">.</span>setDouble<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t            pstmt1<span class=\"token punctuation\">.</span>setInt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t            pstmt2<span class=\"token punctuation\">.</span>setDouble<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t            pstmt2<span class=\"token punctuation\">.</span>setInt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t            <span class=\"token comment\">//5. 执行 sql</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t            pstmt1<span class=\"token punctuation\">.</span>executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t            <span class=\"token comment\">// 手动制造异常</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t            pstmt2<span class=\"token punctuation\">.</span>executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t            <span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t            conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t        &#125; catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> &#123;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t            <span class=\"token comment\">// 事务回滚</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t            try &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conn <span class=\"token operator\">!=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span> &#123;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t                    conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t                &#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t            &#125; catch <span class=\"token punctuation\">(</span>SQLException e1<span class=\"token punctuation\">)</span> &#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t                e1<span class=\"token punctuation\">.</span>printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t            &#125;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t            e<span class=\"token punctuation\">.</span>printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t        &#125;finally &#123;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t            JDBCUtils<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span><span class=\"token punctuation\">(</span>pstmt1<span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t            JDBCUtils<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span><span class=\"token punctuation\">(</span>pstmt2<span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t        &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t   &#125;</pre></td></tr></table></figure><h1 id=\"数据库连接池\"><a class=\"anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h1>\n<ol>\n<li>\n<p>概念：其实就是一个容器 (集合)，存放数据库连接的容器。<br />\n当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p>\n</li>\n<li>\n<p>好处：  节约资源          用户访问高效</p>\n</li>\n<li>\n<p>实现：</p>\n<ol>\n<li>标准接口：DataSource  Javax.sql 包下的\n<ol>\n<li>方法：\n<ul>\n<li>获取连接：getConnection ()</li>\n<li>归还连接：Connectionless ()。如果连接对象 Connection 是从连接池中获取的，那么调用 Connection.close () 方法，则不会再关闭连接了。而是归还连接</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>一般我们不去实现它，有数据库厂商来实现\n<ol>\n<li>C3p0：数据库连接池技术</li>\n<li>Druid：数据库连接池实现技术，由阿里巴巴提供</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"c3p0数据库连接池技术\"><a class=\"anchor\" href=\"#c3p0数据库连接池技术\">#</a> C3p0：数据库连接池技术</h1>\n<p>步骤：</p>\n<ol>\n<li>\n<p>导入 jar 包 (两个)       c3p0-0.9.5.2.jar         mchange-commons-java-0.2.12.jar</p>\n<p>不要忘记导入数据库驱动 jar 包</p>\n</li>\n<li>\n<p>定义配置文件：</p>\n<p>名称： c3p0.properties 或者 c3p0-config.xml</p>\n<p>​\t路径：直接将文件放在 src 目录下即可。</p>\n</li>\n<li>\n<p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p>\n</li>\n<li>\n<p>获取连接： getConnection</p>\n</li>\n</ol>\n<p>代码：</p>\n<ol>\n<li>\n<p>创建数据库连接池对象</p>\n<p>DataSource ds  = new ComboPooledDataSource();</p>\n</li>\n<li>\n<p>获取连接对象<br />\n Connection conn = ds.getConnection ();</p>\n</li>\n</ol>\n<h1 id=\"druid数据库连接池\"><a class=\"anchor\" href=\"#druid数据库连接池\">#</a> Druid：数据库连接池</h1>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<p>1 导入 jar 包 druid-1.0.9.jar</p>\n<p>2 定义配置文件：</p>\n<ul>\n<li>是 properties 形式的</li>\n<li>可以叫任意名称，可以放在任意目录下</li>\n</ul>\n<p>3 加载配置文件。Properties</p>\n<p>4 获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</p>\n<p>5 获取连接：getConnection</p>\n<pre><code>1 导入jar包\n2 导入配置文件\n3 加载配置文件\n  \tProperties pro = new Properties();\n \t InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);\n \t pro.load(is);\n4  获取连接池对象\n \t DataSource ds = DruidDataSourceFactory.createDataSource(pro);\n5  获取连接\n\t  Connection conn = ds.getConnection();\n</code></pre>\n<h2 id=\"定义工具类\"><a class=\"anchor\" href=\"#定义工具类\">#</a> 定义工具类</h2>\n<ol>\n<li>定义一个类 JDBCUtils</li>\n<li>提供静态代码块加载配置文件，初始化连接池对象</li>\n<li>提供方法\n<ol>\n<li>获取连接方法：通过数据库连接池获取连接</li>\n<li>释放资源</li>\n<li>获取连接池的方法</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"spring-jdbc\"><a class=\"anchor\" href=\"#spring-jdbc\">#</a> Spring JDBC</h1>\n<ul>\n<li>\n<p>Spring 框架对 JDBC 的简单封装。提供了一个 JDBCTemplate 对象简化 JDBC 的开发</p>\n</li>\n<li>\n<p>步骤：</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>导入 jar 包</p>\n</li>\n<li>\n<p>创建 JdbcTemplate 对象。依赖于数据源 DataSource<br />\nJdbcTemplate template = new JdbcTemplate(ds);<br />\n3. 调用 JdbcTemplate 的方法来完成 CRUD 的操作<br />\n update (): 执行 DML 语句。增、删、改语句<br />\n 4.queryForMap (): 查询结果将结果集封装为 map 集合，将列名作为 key，将值作为 value 将这条记录封装为一个 map 集合<br />\n注意：这个方法查询的结果集长度只能是 1</p>\n</li>\n<li>\n<p>queryForList (): 查询结果将结果集封装为<strong> list</strong> 集合<br />\n注意：将每一条记录封装为一个 Map 集合，再将 Map 集合装载到 List 集合中</p>\n</li>\n<li>\n<p>query (): 查询结果，将结果封装为 JavaBean 对象<br />\n uery 的参数：RowMapper<br />\n 一般我们使用 BeanPropertyRowMapper 实现类。可以完成数据到 JavaBean 的自动封装<br />\n new BeanPropertyRowMapper &lt;类型&gt;(类型.class)</p>\n</li>\n<li>\n<p>queryForObject：查询结果，将结果封装为对象</p>\n</li>\n<li>\n<p>般用于聚合函数的查询</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> void test6_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tString <span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from emp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tList<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">></span> list <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">,</span> new BeanPropertyRowMapper<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Emp<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Emp emp : list<span class=\"token punctuation\">)</span> &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure>",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://jihaipeng123.github.io/1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "1.数据库",
            "date_published": "2023-08-14T07:43:21.000Z",
            "content_html": "<h1 id=\"javaweb\"><a class=\"anchor\" href=\"#javaweb\">#</a> <em>JavaWeb</em></h1>\n<p>1.What: 使用 Java 语言开发互联网项目；开发网站；</p>\n<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> <em>数据库</em></h1>\n<h2 id=\"数据库基本概念\"><a class=\"anchor\" href=\"#数据库基本概念\">#</a> 数据库基本概念</h2>\n<p>​\t\t1. 数据库 DateBase  DB</p>\n<p>​\t\t2.what: 用于存储管理数据的仓库</p>\n<p>​\t\t3. 数据库特点：a 持久化存储数据，数据库就是一个文件系统\t\tb 方便存储管理数据 \t\tc 使用同一的方式操作数据库 SQL</p>\n<p>​\t\t4 常见数据库软件：  Oracle   MySQL (Oracle 公司）</p>\n<h2 id=\"mysql数据库软件\"><a class=\"anchor\" href=\"#mysql数据库软件\">#</a> MySQL 数据库软件</h2>\n<p>​\t\t\t1. 安装\t\t2. 卸载\t\t3. 配置  a.mysql 服务，启动命令：cmd-&lt;services.msc 打开服务窗口</p>\n<p>​\t\t使用管理员打开 cmd       查询状态  mysql  -uroot  -proot</p>\n<p>​\t\t启动服务 net start mysql \t\t\t关闭服务 net stop mysql</p>\n<p>​\t\tb.mysql 的登陆   1.mysql -uroot -proot</p>\n<p>​\t\tc.mysql 退出  1.exit   2.quit</p>\n<p>​\t\td.mysql 的目录结构</p>\n<p>​\t\t1. 安装目录 D 盘     核心配置文件 my.ini</p>\n<p>​\t\t2. 数据目录 C 盘隐藏  （数据库 ：文件夹）（表 ：文件 ）  数据</p>\n<h2 id=\"sql\"><a class=\"anchor\" href=\"#sql\">#</a> SQL</h2>\n<h3 id=\"what\"><a class=\"anchor\" href=\"#what\">#</a> what: “</h3>\n<p>​\t结构化查询语言；定义了操作所有关系型数据库的规则；每一种数据库操作的方式存在不一样的地方，称为” 方言 “</p>\n<h3 id=\"sql通用语言\"><a class=\"anchor\" href=\"#sql通用语言\">#</a> SQL 通用语言</h3>\n<p>​\t\ta. 单行或多行书写，分号结尾；</p>\n<p>​\t\tb.SQL 中不区分大小写，关键字中认为大写和小写是一样的；j 建议大写</p>\n<p>c.3 种注释 a 单行 -- 空格   或 #   b 多行 /*  */</p>\n<h3 id=\"sql分类\"><a class=\"anchor\" href=\"#sql分类\">#</a> SQL 分类</h3>\n<ol>\n<li>Data Definition Language (DDL 数据定义语言) 如：建库，建表</li>\n<li>Data Manipulation Language (DML 数据操纵语言)，如：对表中的记录操作增删改</li>\n<li>Data Query Language (DQL 数据查询语言)，如：对表中的查询操作</li>\n<li>Data Control Language (DCL 数据控制语言)，如：对用户权限的设置</li>\n<li><img data-src=\"../pictures/shujuku/image-20230814155128212.png\" alt=\"image-20230814155128212\" /></li>\n</ol>\n<h1 id=\"ddl-操作数据库表\"><a class=\"anchor\" href=\"#ddl-操作数据库表\">#</a> DDL : 操作数据库，表</h1>\n<h2 id=\"操作数据库crud\"><a class=\"anchor\" href=\"#操作数据库crud\">#</a> 操作数据库 CRUD</h2>\n<ol>\n<li>\n<p>C-- 创建</p>\n<ol>\n<li>\n<p>创建数据库</p>\n<p>create database 数据库名称；</p>\n</li>\n<li>\n<p>创建 db4 数据库，判断是否存在；</p>\n<p>create database if not  exists db4；</p>\n</li>\n<li>\n<p>创建 db4 数据库，判断是否存在，并制定字符集为 gbk;</p>\n<p>create database if not  exists db4 character set gbk;</p>\n</li>\n</ol>\n</li>\n<li>\n<p>​\tR-- 查询</p>\n<ol>\n<li>$ 查询所有数据库的名称<br />\n show databases;</li>\n<li>$ 查看某个数据库的字符集<br />\n show create database 数据库名称；</li>\n</ol>\n</li>\n<li>\n<p>​\tU-- 修改</p>\n<p>修改数据库的字符集</p>\n<p>alter database 数据库名称 character set  字符集名称（utf8 ）；</p>\n</li>\n<li>\n<p>​\tD-- 删除</p>\n<ol>\n<li>\n<p>删除数据库</p>\n<p>drop database 数据库名称；</p>\n</li>\n<li>\n<p>先判断是否存在再删除</p>\n<p>drop database if not exists 数据库名称；</p>\n</li>\n<li>\n<p>查询当前正在使用的数据库名称</p>\n<p>select database()；</p>\n</li>\n<li>\n<p>使用数据库</p>\n<p>use 数据库名称</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"操作表\"><a class=\"anchor\" href=\"#操作表\">#</a> 操作表</h2>\n<ol>\n<li>\n<p>C-- 创建</p>\n<p>​\t1. 创建表<br />\n create table 表名（列名 1 数据类型 1，列名 2 数据类型 1，...... 列名 n 数据类型 n）；</p>\n<p>2. 复制表：<br />\ncreate table 新表名  like 被复制的表名<br />\n int : 整数；  \t\t<br />\ndouble: 小数；score double (5,2) 最多 5 位，小数 2 位<br />\n data: 日期，只包含年月日 yyyy-MM--dd<br />\ndatetime:  年月日时分秒 yyyy-MM--dd     HH:mm:ss;<br />\nvarchar: 字符串  name varchar (20);  姓名最大 20 个字符\t    \t\t<br />\ntimestamp: 默认使用系统时间</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tage <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tscore <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tbirthday <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tinsert_time <span class=\"token keyword\">timestamp</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t3. 创建 db4 数据库，判断是否存在；</p>\n<p>​\tcreate database if not  exists db4；</p>\n<p>4.. 创建 db4 数据库，判断是否存在，并制定字符集为 gbk;</p>\n<p>​\tcreate database if not  exists db4 character set gbk;</p>\n</li>\n<li>\n<p>R-- 查询</p>\n<p>$ 查询数据库中所有表的名称<br />\n show tables;</p>\n<p>​\t$ 查看表的结构 desc 表名称；</p>\n</li>\n<li>\n<p>U-- 修改</p>\n<p>1. 修改表名<br />\n alter table 表名 rename to 新表名；</p>\n<p>2. 修改表的字符集<br />\n alter table 表名 character set  字符集名称（utf8 ）；<br />\n​3. 添加列<br />\n alter table 表名 add 列名 数据类型；alter table 表名 add 列名 数据类型；</p>\n<p>4. 修改列名称  类型<br />\n alter table 表名 change 原列名 新列名 数据类型；<br />\nalter table 表名 modify 列名 新数据类型；</p>\n<p>5. 删除列<br />\n alter table 表名  drop 列名；</p>\n</li>\n<li>\n<p>D-- 删除</p>\n<p>​\t删除表<br />\n drop table  表名称；</p>\n<p>​\t先判断是否存在再删除</p>\n<p>drop table  if not exists 表名称；</p>\n<p>SQLYog</p>\n<p>客户端图形化工具</p>\n</li>\n</ol>\n<h1 id=\"dml增删改表中数据\"><a class=\"anchor\" href=\"#dml增删改表中数据\">#</a> DML: 增删改表中数据</h1>\n<ol>\n<li>\n<p>添加数据：insert into 表名（列名 1.... 列名你）values (值 1.... 值 n);</p>\n<p>注意：a 列名和值对应；b 表名后不定义列名，默认给所有列都添加值；c 除了数字，其余都需要用引号引起来，单双引号都行；</p>\n</li>\n<li>\n<p>删除数据： delete form 表名   where 条件；</p>\n<ol>\n<li>\n<p>注意：如果不加条件，删除全部数据。</p>\n</li>\n<li>\n<p>​\t删除表，再创建一个一样的空表；</p>\n<p>truncate table 表名；</p>\n<p>delete from 表名；-- 不推荐使用，多次删除操作；</p>\n</li>\n</ol>\n</li>\n<li>\n<p>修改数据：  update 表名 set 列名 1 = 值 1，... 列名 n = 值 n  where 条件；</p>\n</li>\n</ol>\n<p>​\t\t注意：如果不加条件，修改全部。</p>\n<h1 id=\"dql查找表中数据\"><a class=\"anchor\" href=\"#dql查找表中数据\">#</a> DQL: 查找表中数据</h1>\n<p>​\t\tselect * from  表名；</p>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p>select  字段名列表  from 表名列表   where 条件列表  group by 分组字段</p>\n<p>having 分组之后的条件  order by 排序  limit 分页限定</p>\n<h2 id=\"基础查询\"><a class=\"anchor\" href=\"#基础查询\">#</a> 基础查询</h2>\n<ol>\n<li>多个字段的查询</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询所有表数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tNAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tage </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstudent3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">SELECT</span> address <span class=\"token keyword\">FROM</span> student3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>去除重复  distinct</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span>  <span class=\"token keyword\">distinct</span>  address <span class=\"token keyword\">FROM</span> student3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>计算列  数值型计算  ifnull (表达式 1，表达式 2)</p>\n<p>​\t表达式 1：那个字段需要判断是否为 null;   表达式 2： 字段为 null 后的替换值</p>\n</li>\n<li>\n<p>起别名  As</p>\n</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 计算 math+english 的和并输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tenglish<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmath<span class=\"token operator\">+</span>english</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstudent3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 遇到 null 参与的运算，结果都为 null;\t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tNAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tmath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tenglish<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmath<span class=\"token operator\">+</span>IFNULL<span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 这样修改</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tstudent3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 起个别名\t\t</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tNAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tenglish<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tmath<span class=\"token operator\">+</span>IFNULL<span class=\"token punctuation\">(</span>english<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> 总分  <span class=\"token comment\">-- 起别名</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tstudent3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"条件查询\"><a class=\"anchor\" href=\"#条件查询\">#</a> 条件查询</h2>\n<p>where 字句后跟条件</p>\n<p>运算符 1.&lt;&gt; =&gt;=  &lt;=   2.<strong>BETWEEN...AND</strong>  <span class=\"exturl\" data-url=\"aHR0cDovLzMuSU4=\">3.IN</span> (集合)   4. IS NULL</p>\n<h2 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h2>\n<p>Like  _ 单个任意字符    % 多个任意字符</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询年龄 > 40 的  等于 = 不等于！= 或 & lt;>  并且 and   或者 or   </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age<span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age<span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age<span class=\"token operator\">>=</span><span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span> age<span class=\"token operator\">&lt;</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age<span class=\"token operator\">>=</span><span class=\"token number\">20</span> <span class=\"token operator\">AND</span> age<span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">20</span> <span class=\"token operator\">AND</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 查询年龄 20，40 的人信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token operator\">OR</span> age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">IN</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 只要是 in 中的数字都输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 查询英语成绩为 nill 的；</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> english <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 写法错误不能用 = 判断，等于用 is 判断 ，不等于用 isnot;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> english <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> english <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 查询性马的数据  like</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'马%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'_化%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'___'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 查询姓名中含马的人</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student3 <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%德%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h2>\n<p>order by 字句</p>\n<p>​\t\torder by 排序字段 1  排序方式 1，排序字段 2 排序方式 2，....</p>\n<p>​\t\t默认：ASC: 升序；   DESC: 降序；</p>\n<p>​\t\t注意：如果有多个排序条件， 当前边条件值一样，才会判断第二条件；</p>\n<h2 id=\"聚合函数\"><a class=\"anchor\" href=\"#聚合函数\">#</a> 聚合函数</h2>\n<p>将 1 一列数据作为一个整体，进行列纵向计算；、</p>\n<p>​\t\tcount： 计算个数    max   min   sum   avg: 计算平均值</p>\n<p>​\t\tSELECT    COUNT(NAME)     FROM student3;</p>\n<p>注意： 排除 Null, 不计算在内；使用  ifnull（ , ）函数</p>\n<h2 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h2>\n<p>​\t\t语法： group by 分组字段</p>\n<p>​\t\t注意：1. 分组之后查询字段：分组字段，聚合字段</p>\n<p>​     \t\t\t\t2.where 和 having 区别： where 在分组前进行限定，不满足条件不进行分组；having 在分组后进行限定，不满足则不会被查询出来；</p>\n<p>​\t\t\t\t\t\t3where 后不可以跟聚合函数，having 可以；</p>\n<h2 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h2>\n<p>limit 开始的索引，每页查询的条数；</p>\n<p>​\t\t-- 每页显示 3 条数据<br />\n​\t\tSELECT * FROM student3 LIMIT 0,3; -- 第 1 页<br />\n​\t\tSELECT * FROM student3 LIMIT 3,3; -- 第 2 页<br />\n​\t\tSELECT * FROM student3 LIMIT 6,3; -- 第 3 页</p>\n<p>-- 公式：开始的索引 = （当前页码 - 1）* 每页显示的条数；</p>\n<p>​\t\t分页操作 limit 是一个 mysql “方言”；</p>\n<h1 id=\"约束\"><a class=\"anchor\" href=\"#约束\">#</a> 约束</h1>\n<p>​\t\t对数据进行限定；</p>\n<p>​\t\t分类：主键约束：primary key</p>\n<p>​\t\t\t\t\t非空约束 ： not null</p>\n<p>​\t\t\t\t\t唯一约束：unique</p>\n<p>​\t\t\t\t\t外键约束： foreign key</p>\n<h2 id=\"非空约束-not-null\"><a class=\"anchor\" href=\"#非空约束-not-null\">#</a> 非空约束 ： not null</h2>\n<p>​\t\t\t1. 创建表时添加约束；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> st<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token comment\">-- name 为非空</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 删除 name 的非空约束；</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> st <span class=\"token keyword\">MODIFY</span> NAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​      \t\t2. 创建表完添加约束；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> st<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> st <span class=\"token keyword\">MODIFY</span> NAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"唯一约束unique\"><a class=\"anchor\" href=\"#唯一约束unique\">#</a> 唯一约束：unique</h2>\n<p>​\t\t\t\t，某一列的值不能重复；</p>\n<p>​\t\t\t\t注意： 唯一约束可以用 null;  但是只能有一个；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建表示添加唯一约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> st<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tnumber <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token comment\">-- 手机号唯一</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 删除唯一约束</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> st <span class=\"token keyword\">MODIFY</span> number <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 错误</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> st <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> number<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 正确</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2.</span>可以创建表完添加约束；</pre></td></tr></table></figure><h2 id=\"主键约束-primary-key\"><a class=\"anchor\" href=\"#主键约束-primary-key\">#</a> 主键约束： primary   key</h2>\n<p>​\t\t1. 非空 且 唯一</p>\n<p>​\t\t2. 一张表只能有一个字段为主键</p>\n<p>​\t\t3. 主键就是唯一标识</p>\n<p>​\t\t自动增长： 如果某一列是数值类型的，使用 auto-increment 可完成自动增长</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建表示添加主键约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> st<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">INT</span> primer <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">-- 给 id 添加主键约束并完成自增长</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tnumber <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 删除主键约束</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> st <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 正确</span></pre></td></tr></table></figure><h2 id=\"外键约束-foreign-key\"><a class=\"anchor\" href=\"#外键约束-foreign-key\">#</a> 外键约束： foreign key</h2>\n<p>​\t\t语法   让表于表产生关系，保证数据正确性；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名（</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t外键列</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">constraint</span>  外键名称   <span class=\"token keyword\">foreign</span>  <span class=\"token keyword\">key</span>  外键列明称 <span class=\"token keyword\">references</span> 主表名称（主表列名称）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 删除外键</span></pre></td></tr></table></figure><h2 id=\"级联操作\"><a class=\"anchor\" href=\"#级联操作\">#</a> 级联操作</h2>\n<p>​\t\t添加外键，设置级联更新 ---- 添加操作     删除操作</p>\n<p><img data-src=\"../pictures/shujuku/image-20230814163629355.png\" alt=\"image-20230814163629355\" /></p>\n<h1 id=\"数据库的设计\"><a class=\"anchor\" href=\"#数据库的设计\">#</a> 数据库的设计</h1>\n<h2 id=\"多表之间的关系\"><a class=\"anchor\" href=\"#多表之间的关系\">#</a> 多表之间的关系</h2>\n<p>​\t1. 分类</p>\n<p>​\t\t一对一： 一个人 - 一张身份证</p>\n<p>​\t\t一对多，多对一：  一个部门 - 多个员工</p>\n<p>​\t\t多对多：多个学生 - 多个课程</p>\n<p>​\t2. 实现：<br />\n一对一：<br />\n​\t\t\t<img data-src=\"../pictures/shujuku/image-20230814163753539.png\" alt=\"image-20230814163753539\" /></p>\n<p>​\t多对多：  联合主键</p>\n<p><img data-src=\"../pictures/shujuku/image-20230814164038351.png\" alt=\"image-20230814164038351\" /></p>\n<h2 id=\"数据库设计的范式\"><a class=\"anchor\" href=\"#数据库设计的范式\">#</a> 数据库设计的范式</h2>\n<p>​\t\t\t设计数据库遵循的规范</p>\n<p>​\t\t\t\t第一范式（1FN）: 每一列都是不可分割的原子数据项；</p>\n<p>​\t\t\t\t\t\t1 存在非常严重的数据冗余；2 数据添加存在问题；3 数据删除存在问题</p>\n<p>​\t\t\t\t第二范式：在 1FN 基础上，非码属性必须依赖于候选码 (<strong>消除非主属性带主属性的部分依赖</strong>)</p>\n<p>​\t\t\t\t\t\t函数依赖： A -&gt; B;  通过 A 属性（属性组）确定唯一 B 属性的值；则称 B 依赖于 A;</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t学号 -&gt; 姓名        （学号，课程 ）-&gt; 分数</p>\n<p>​\t\t\t\t\t\t 完全函数依赖 ：  如果 A 是属性组，则 B 属性值依赖 A 属性组的所有的属性值；（学号，课程 ）-&gt; 分数</p>\n<p>​\t\t\t\t\t\t部分函数依赖 ：  如果 A 是属性组，则 B 属性值只需要依赖 A 属性组的某一些的属性值；（学号，课程 ）-&gt; 姓名</p>\n<p>​\t\t\t\t\t\t传递函数依赖： a-&gt;b;    b-&gt;c;  c 传递函数依赖于 a;        学号 -&gt; 姓名，姓名 -&gt; 性别；</p>\n<p>​\t\t\t\t\t\t<strong>码</strong>：  一张表中，一个属性或属性组，被其他属性完全依赖，则称这个属性或属性组为该表的码；</p>\n<p>​\t\t\t\t\t\t主属性： 码属性组中的所有属性；</p>\n<p>​\t\t\t\t\t\t非主属性： 除码属性外其他的属性；</p>\n<p>​\t\t\t\t第三范式：在 2FN 基础上，任何非主属性不依赖其他非主属性（取消传递依赖）</p>\n<h1 id=\"数据库的备份还原\"><a class=\"anchor\" href=\"#数据库的备份还原\">#</a> 数据库的备份还原</h1>\n<p>​\t\t\t\t1. 备份命令行： mysqldump  -u 用户名 -p 密码   数据库名称 &gt; 保存的路径</p>\n<p>​\t\t\t\t2. 还原： 登录，创建，使用数据库，执行文件 source  文件路径；</p>\n<p>​\t\t\t\t图形化工具：</p>\n<h1 id=\"多表查询\"><a class=\"anchor\" href=\"#多表查询\">#</a> 多表查询</h1>\n<p>​\t查询语法：</p>\n<p>​\t·\t\tselect<br />\n​\t・\t\t\t列名列表<br />\n​\t・\t\tfrom<br />\n​\t・\t\t\t表名列表<br />\n​\t・\t\twhere....</p>\n<p>笛卡尔积：</p>\n<p>​\t有两个集合 A,B . 取这两个集合的所有组成情况。</p>\n<p>​\t要完成多表查询，需要消除无用的数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span> 准备<span class=\"token keyword\">sql</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\"># 创建部门表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'开发部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'财务部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\"># 创建员工表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> emp <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tNAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tgender <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 性别</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tsalary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 工资</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tjoin_date <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 入职日期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tdept_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 外键，关联部门表 (部门表的主键)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">7200</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2013-02-24'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'猪八戒'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2010-12-02'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'唐僧'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2008-08-08'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白骨精'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2015-10-07'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>join_date<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'蜘蛛精'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4500</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2011-03-14'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">*</span> 多表查询的分类：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token number\">1.</span> 内连接查询：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 隐式内连接：使用<span class=\"token keyword\">where</span>条件消除无用数据</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 查询所有员工信息和对应的部门信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 查询员工表的名称，性别。部门表的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> emp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span>dept<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">,</span>dept <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工表的姓名</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span><span class=\"token comment\">-- 员工表的性别</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span>name <span class=\"token comment\">-- 部门表的名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\temp t1<span class=\"token punctuation\">,</span>    <span class=\"token operator\">=</span><span class=\"token operator\">=</span> 起别名</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\tdept t2</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 显式内连接：</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 语法： <span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表名<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">inner</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表名<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 例如：</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token number\">3.</span> 内连接查询：</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token number\">1.</span> 从哪些表中查询数据</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token number\">2.</span> 条件是什么</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token number\">3.</span> 查询哪些字段</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token number\">2.</span> 外链接查询：</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 左外连接：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 语法：<span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">outer</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件；</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 查询的是左表所有数据以及其交集部分。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 例子：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> \tt1<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">FROM</span> emp t1 <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> dept t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 右外连接：</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 语法：<span class=\"token keyword\">select</span> 字段列表 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">outer</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 条件；</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 查询的是右表所有数据以及其交集部分。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span> 例子：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> \t<span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t2 <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> emp t1 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token number\">3.</span> 子查询：</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token operator\">*</span> 概念：查询中嵌套查询，称嵌套查询为子查询。</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 查询工资最高的员工信息</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 1 查询最高的工资是多少 9000                 SELECT MAX (salary) FROM emp;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 2 查询员工信息，并且工资等于 9000 的   \t     SELECT * FROM emp WHERE emp.`salary` = 9000;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 一条 sql 就完成这个操作。子查询</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token operator\">*</span> 子查询不同情况</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token number\">1.</span> 子查询的结果是单行单列的：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为条件，使用运算符去判断。 运算符： <span class=\"token operator\">></span> <span class=\"token operator\">>=</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 查询员工工资小于平均工资的人</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token number\">2.</span> 子查询的结果是多行单列的：</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为条件，使用运算符<span class=\"token operator\">in</span>来判断</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 查询 ' 财务部 ' 和 ' 市场部 ' 所有的员工信息</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">OR</span> dept_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 子查询</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> dept_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'财务部'</span> <span class=\"token operator\">OR</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">'市场部'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token number\">3.</span> 子查询的结果是多行多列的：</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span> 子查询可以作为一张虚拟表参与查询</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 查询员工入职日期是 2011-11-11 日之后的员工信息和部门信息</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 子查询</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept t1 <span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">></span> <span class=\"token string\">'2011-11-11'</span><span class=\"token punctuation\">)</span> t2</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>dept_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t<span class=\"token comment\">-- 普通内连接</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp t1<span class=\"token punctuation\">,</span>dept t2 <span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>join_date<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">></span>  '<span class=\"token number\">2011</span><span class=\"token operator\">-</span><span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token number\">11</span></pre></td></tr></table></figure><h2 id=\"多表练习查询\"><a class=\"anchor\" href=\"#多表练习查询\">#</a> 多表练习查询</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span> 多表查询练习</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 部门表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t  id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 部门 id</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t  dname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 部门名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t  loc <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 部门所在地</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 添加 4 个部门</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>dname<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'教研部'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token string\">'学工部'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'销售部'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'广州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token string\">'财务部'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token comment\">-- 职务表，职务名称，职务描述</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> job <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t  id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t  jname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t  description <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 添加 4 个职务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> job <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> jname<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'董事长'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'管理整个公司，接单'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'经理'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'管理部门员工'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'销售员'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'向客人推销产品'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'文员'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'使用办公软件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- 员工表</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> emp <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t  id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工 id</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t  ename <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工姓名</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t  job_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 职务 id</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t  mgr <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 上级领导</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t  joindate <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 入职日期</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t  salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 工资</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t  bonus <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 奖金</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t  dept_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 所在部门编号</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t  <span class=\"token keyword\">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>job_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> job <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 关联</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t  <span class=\"token keyword\">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> dept <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">-- 添加员工</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job_id<span class=\"token punctuation\">,</span>mgr<span class=\"token punctuation\">,</span>joindate<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>bonus<span class=\"token punctuation\">,</span>dept_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">'孙悟空'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2000-12-17'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">'卢俊义'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-02-20'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'16000.00'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3000.00'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">'林冲'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-02-22'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'12500.00'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5000.00'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'唐僧'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-04-02'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'29750.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1005</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李逵'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-09-28'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'12500.00'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'14000.00'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'宋江'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-05-01'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'28500.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1007</span><span class=\"token punctuation\">,</span><span class=\"token string\">'刘备'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-09-01'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'24500.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1008</span><span class=\"token punctuation\">,</span><span class=\"token string\">'猪八戒'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2007-04-19'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'30000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">'罗贯中'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-11-17'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'50000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1010</span><span class=\"token punctuation\">,</span><span class=\"token string\">'吴用'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-09-08'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'15000.00'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0.00'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1011</span><span class=\"token punctuation\">,</span><span class=\"token string\">'沙僧'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2007-05-23'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'11000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1012</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李逵'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-12-03'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9500.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1013</span><span class=\"token punctuation\">,</span><span class=\"token string\">'小白龙'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2001-12-03'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'30000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1014</span><span class=\"token punctuation\">,</span><span class=\"token string\">'关羽'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1007</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2002-01-23'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'13000.00'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">-- 工资等级表</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> salarygrade <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t  grade <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">-- 级别</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t  losalary <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">-- 最低工资</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t  hisalary <span class=\"token keyword\">INT</span> <span class=\"token comment\">-- 最高工资</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">-- 添加 5 个工资等级</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> salarygrade<span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">,</span>losalary<span class=\"token punctuation\">,</span>hisalary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7000</span><span class=\"token punctuation\">,</span><span class=\"token number\">12000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">12010</span><span class=\"token punctuation\">,</span><span class=\"token number\">14000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">14010</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">20010</span><span class=\"token punctuation\">,</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">30010</span><span class=\"token punctuation\">,</span><span class=\"token number\">99990</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">-- 需求：</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">-- 1. 查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t1. 员工编号，员工姓名，工资，需要查询 emp 表  职务名称，职务描述 需要查询 job 表</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t\t2. 查询条件 emp.job_id = job.id</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工编号</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ename<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工姓名</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token comment\">-- 工资</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>jname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 职务名称</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span> <span class=\"token comment\">-- 职务描述</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\temp t1<span class=\"token punctuation\">,</span> job t2</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>job_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">-- 2. 查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t\t1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t\t2. 条件： emp.job_id = job.id and emp.dept_id = dept.id</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工编号</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ename<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 员工姓名</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token comment\">-- 工资</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>jname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 职务名称</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 职务描述</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\tt3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 部门名称</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\tt3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>loc<span class=\"token punctuation\">`</span></span> <span class=\"token comment\">-- 部门位置</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\temp t1<span class=\"token punctuation\">,</span> job t2<span class=\"token punctuation\">,</span> dept t3</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>job_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t   </pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">-- 3. 查询员工姓名，工资，工资等级</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t\t\t1. 员工姓名，工资 emp  工资等级 salarygrade</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t\t2. 条件 emp.salary >= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t\t\temp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span>ename <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> emp t1<span class=\"token punctuation\">,</span> salarygrade t2</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">BETWEEN</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>losalary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>hisalary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">-- 4. 查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t\t1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t\t2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary\t\t</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ename<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>jname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\tt3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t\tt3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>loc<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\tt4<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>grade<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t\temp t1<span class=\"token punctuation\">,</span>job t2<span class=\"token punctuation\">,</span>dept t3<span class=\"token punctuation\">,</span>salarygrade t4</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>job_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t<span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dept_id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t3<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\t<span class=\"token operator\">AND</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>salary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">BETWEEN</span> t4<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>losalary<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">AND</span> t4<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>hisalary<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">-- 5. 查询出部门编号、部门名称、部门位置、部门人数</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t\t\t1. 部门编号、部门名称、部门位置 dept 表。 部门人数 emp 表</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t\t\t2. 使用分组查询。按照 emp.dept_id 完成分组，查询 count (id)</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\t\t3. 使用子查询将第 2 步的查询结果和 dept 表进行关联查询</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>dname<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>loc<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span>total</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t\tdept t1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t\t\t\tdept_id<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> total</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t\t\temp</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> dept_id<span class=\"token punctuation\">)</span> t2</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t<span class=\"token keyword\">WHERE</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>dept_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token comment\">-- 6. 查询所有员工的姓名及其直接上级的姓名，没有领导的员工也需要查询</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t\t分析：</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\t\t1. 姓名 emp， 直接上级的姓名 emp</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t\t\t* emp 表的 id 和 mgr 是自关联</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t\t\t2. 条件 emp.id = emp.mgr</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t\t\t3. 查询左表的所有数据，和 交集数据</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t\t\t\t* 使用左外连接查询</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t\tselect</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t\t\tt1.ename,</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t\t\tt1.mgr,</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t\t\tt2.`id`,</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t\t\tt2.ename</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\t\tfrom emp t1, emp t2</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\t\twhere t1.mgr = t2.`id`;</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t\t<span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span>ename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t\t\tt1<span class=\"token punctuation\">.</span>mgr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t\t\tt2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ename<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t\t<span class=\"token keyword\">FROM</span> emp t1</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t\t<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> emp t2</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t\t<span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>mgr<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<h2 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<ol>\n<li>\n<p>概念：</p>\n<ul>\n<li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li>\n</ul>\n</li>\n<li>\n<p>操作：</p>\n<ol>\n<li>\n<p>开启事务： start transaction;</p>\n</li>\n<li>\n<p>回滚：rollback;</p>\n</li>\n<li>\n<p>提交：commit;</p>\n<p>​\t\t-- 发现执行没有问题，提交事务<br />\n​\t\t\t\tCOMMIT;</p>\n<p>​\t\t-- 发现出问题了，回滚事务<br />\n​\t\t\tROLLBACK;</p>\n<ol start=\"4\">\n<li>\n<p>MySQL 数据库中事务默认<strong>自动提交</strong></p>\n<p>a 事务提交的两种方式：</p>\n<p>​\t\t自动提交：</p>\n<p>​\t\t\t\tmysql 就是自动提交的</p>\n<p>​\t\t\t\t一条 DML (增删改) 语句会自动提交一次事务。</p>\n<p>​\t\t手动提交：</p>\n<p>​\t\t\t\tOracle 数据库默认是<strong>手动提交</strong>事务</p>\n<p>​\t\t\t\t需要先开启事务，再提交</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>​\t\t\t\t\tb 修改事务的默认提交方式：</p>\n<p>​\t\t\t\t\t\t查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交</p>\n<p>​\t\t\t\t\t\t修改默认提交方式： set @@autocommit = 0;</p>\n<h2 id=\"事务的四大特征\"><a class=\"anchor\" href=\"#事务的四大特征\">#</a> 事务的四大特征</h2>\n<p>​\t\t\t1 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</p>\n<p>​\t\t\t2 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</p>\n<p>​\t\t\t3 隔离性：多个事务之间。相互独立。</p>\n<p>​\t\t\t4 一致性：事务操作前后，数据总量不变</p>\n<h2 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h2>\n<ul>\n<li>\n<p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p>\n</li>\n<li>\n<p>存在问题：、</p>\n<p>​         脏读：一个事务，读取到另一个事务中没有提交的数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不可重复读<span class=\"token punctuation\">(</span>虚读<span class=\"token punctuation\">)</span>：在同一个事务中，两次读取到的数据不一样。</pre></td></tr></table></figure><p>​\t \t幻读：一个事务操作 (DML) 数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</p>\n<p>隔离级别：</p>\n<p>​\tread uncommitted：读未提交</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>产生的问题：脏读、不可重</pre></td></tr></table></figure><p>​\tread committed：读已提交 （Oracle）</p>\n<p>​\t\t\t\t产生的问题：不可重复读、幻读</p>\n<p>​\trepeatable read：可重复读 （MySQL 默认）</p>\n<p>​\t\t\t\t\t产生的问题：幻读</p>\n<p>​\tserializable：串行化</p>\n<p>​\t\t\t\t\t可以解决所有的问题</p>\n</li>\n</ul>\n<p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</p>\n<ul>\n<li>数据库查询隔离级别：\n<ul>\n<li>select @@tx_isolation;</li>\n</ul>\n</li>\n<li>数据库设置隔离级别：\n<ul>\n<li>set global transaction isolation level  级别字符串；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"dcl管理用户授权\"><a class=\"anchor\" href=\"#dcl管理用户授权\">#</a> DCL: 管理用户，授权</h1>\n<h2 id=\"管理用户\"><a class=\"anchor\" href=\"#管理用户\">#</a> 管理用户</h2>\n<p>​\t\t添加用户 ---create user ' 用户名 '@' 主机名 ' identified  by ' 密码 '；</p>\n<p>​\t\t删除用户 ---drop user ' 用户名 '@' 主机名 ';</p>\n<p>​\t\t修改用户密码 ---1.update user set password = password (‘新密码’)  where user = ' 用户名 ';</p>\n<p>​\t\t\t\t\t\t\t \t2.set password for ' 用户名 '@' 主机名 ' = password (‘新密码’) ；</p>\n<p>​\t\t查询用户 ---1. 切换到 mysql 数据库   use mysql;</p>\n<p>​\t\t\t\t\t\t\t2. 查询 user 表  select * from uaer;</p>\n<h2 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> 授权</h2>\n<p>​\t\t查询权限  show grants for ' 用户名 '@' 主机名 ' ;</p>\n<p>​\t\t授予权限  grant 权限列表  on 数据库名。表名  to ' 用户名 '@' 主机名 ' ；</p>\n<p>​\t\t撤销权限  revoke  权限列表  on  数据库名。表名 from ' 用户名 '@' 主机名 ' ；</p>\n<p>​</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E6%88%AA%E5%9B%BE%E5%90%88%E9%9B%86/",
            "url": "https://jihaipeng123.github.io/%E6%88%AA%E5%9B%BE%E5%90%88%E9%9B%86/",
            "title": "截图合集",
            "date_published": "2023-08-14T05:50:07.000Z",
            "content_html": "<h1 id=\"常用dos命令\"><a class=\"anchor\" href=\"#常用dos命令\">#</a> 常用 DOS 命令</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814135358769.png\" alt=\"\" /></p>\n<h1 id=\"数据类型取值范围\"><a class=\"anchor\" href=\"#数据类型取值范围\">#</a> 数据类型取值范围</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814135442477.png\" alt=\"image-20230814135442477\" /></p>\n<h1 id=\"短路逻辑运算符\"><a class=\"anchor\" href=\"#短路逻辑运算符\">#</a> 短路逻辑运算符</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814135655545.png\" alt=\"image-20230814135655545\" /></p>\n<h1 id=\"idea快捷键\"><a class=\"anchor\" href=\"#idea快捷键\">#</a> IDEA 快捷键</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814135947631.png\" alt=\"image-20230814135947631\" /></p>\n<h1 id=\"数组内存图\"><a class=\"anchor\" href=\"#数组内存图\">#</a> 数组内存图</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140130102.png\" alt=\"image-20230814140130102\" /></p>\n<h1 id=\"对象内存图\"><a class=\"anchor\" href=\"#对象内存图\">#</a> 对象内存图</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140321224.png\" alt=\"image-20230814140321224\" /></p>\n<h1 id=\"区别成员变量和局部变量\"><a class=\"anchor\" href=\"#区别成员变量和局部变量\">#</a> 区别成员变量和局部变量</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140429058.png\" alt=\"image-20230814140429058\" /></p>\n<h1 id=\"private关键字\"><a class=\"anchor\" href=\"#private关键字\">#</a> private 关键字</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140517025.png\" alt=\"image-20230814140517025\" /></p>\n<h1 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140557072.png\" alt=\"image-20230814140557072\" /></p>\n<h1 id=\"标准类制作\"><a class=\"anchor\" href=\"#标准类制作\">#</a> 标准类制作</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140647004.png\" alt=\"image-20230814140647004\" /></p>\n<h1 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140732028.png\" alt=\"image-20230814140732028\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140751109.png\" alt=\"image-20230814140751109\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140906126.png\" alt=\"image-20230814140906126\" /></p>\n<h1 id=\"stringbuilder\"><a class=\"anchor\" href=\"#stringbuilder\">#</a> StringBuilder</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814140948847.png\" alt=\"image-20230814140948847\" /></p>\n<p>&lt;img src=&quot;../pictures/jietuheji/image-20230814141008666.png&quot; alt=&quot;image-20230814141008666&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<h1 id=\"集合arraylist\"><a class=\"anchor\" href=\"#集合arraylist\">#</a> 集合 ArrayList</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141119594.png\" alt=\"image-20230814141119594\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141142002.png\" alt=\"image-20230814141142002\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141202386.png\" alt=\"image-20230814141202386\" /></p>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141252842.png\" alt=\"\" /></p>\n<h1 id=\"thissuper\"><a class=\"anchor\" href=\"#thissuper\">#</a> this&amp;super</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141332119.png\" alt=\"image-20230814141332119\" /></p>\n<h1 id=\"包\"><a class=\"anchor\" href=\"#包\">#</a> 包</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141451722.png\" alt=\"image-20230814141451722\" /></p>\n<h1 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141516721.png\" alt=\"image-20230814141516721\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814141949689.png\" alt=\"image-20230814141949689\" /></p>\n<h1 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142013705.png\" alt=\"image-20230814142013705\" /></p>\n<h1 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142111263.png\" alt=\"image-20230814142111263\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142126810.png\" alt=\"image-20230814142126810\" /></p>\n<h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142216539.png\" alt=\"image-20230814142216539\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142233086.png\" alt=\"image-20230814142233086\" /></p>\n<h1 id=\"math类\"><a class=\"anchor\" href=\"#math类\">#</a> Math 类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142329002.png\" alt=\"image-20230814142329002\" /></p>\n<h1 id=\"system类\"><a class=\"anchor\" href=\"#system类\">#</a> System 类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142348733.png\" alt=\"image-20230814142348733\" /></p>\n<h1 id=\"object类\"><a class=\"anchor\" href=\"#object类\">#</a> Object 类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142428174.png\" alt=\"image-20230814142428174\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142448930.png\" alt=\"image-20230814142448930\" /></p>\n<h1 id=\"arrays类\"><a class=\"anchor\" href=\"#arrays类\">#</a> Arrays 类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142525450.png\" alt=\"image-20230814142525450\" /></p>\n<h1 id=\"包装类\"><a class=\"anchor\" href=\"#包装类\">#</a> 包装类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142600999.png\" alt=\"image-20230814142600999\" /></p>\n<h2 id=\"integer\"><a class=\"anchor\" href=\"#integer\">#</a> Integer</h2>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142626986.png\" alt=\"image-20230814142626986\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142659053.png\" alt=\"image-20230814142659053\" /></p>\n<h2 id=\"装箱拆箱\"><a class=\"anchor\" href=\"#装箱拆箱\">#</a> 装箱拆箱</h2>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142748386.png\" alt=\"image-20230814142748386\" /></p>\n<h1 id=\"date类\"><a class=\"anchor\" href=\"#date类\">#</a> Date 类</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142809716.png\" alt=\"image-20230814142809716\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142826581.png\" alt=\"image-20230814142826581\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142901547.png\" alt=\"image-20230814142901547\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142916048.png\" alt=\"image-20230814142916048\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142928063.png\" alt=\"image-20230814142928063\" /></p>\n<h1 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814142956163.png\" alt=\"image-20230814142956163\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143013486.png\" alt=\"image-20230814143013486\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143029526.png\" alt=\"image-20230814143029526\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143054726.png\" alt=\"image-20230814143054726\" /></p>\n<h1 id=\"集合体系结构\"><a class=\"anchor\" href=\"#集合体系结构\">#</a> 集合体系结构</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143357012.png\" alt=\"image-20230814143357012\" /></p>\n<h1 id=\"collection\"><a class=\"anchor\" href=\"#collection\">#</a> Collection</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143418347.png\" alt=\"image-20230814143418347\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143501562.png\" alt=\"image-20230814143501562\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143522741.png\" alt=\"image-20230814143522741\" /></p>\n<h1 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143545278.png\" alt=\"image-20230814143545278\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143601945.png\" alt=\"image-20230814143601945\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143628276.png\" alt=\"image-20230814143628276\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143718472.png\" alt=\"image-20230814143718472\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143700091.png\" alt=\"image-20230814143700091\" /></p>\n<h1 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143744108.png\" alt=\"image-20230814143744108\" /></p>\n<h2 id=\"hashset\"><a class=\"anchor\" href=\"#hashset\">#</a> HashSet</h2>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143755828.png\" alt=\"image-20230814143755828\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143824876.png\" alt=\"image-20230814143824876\" /></p>\n<h2 id=\"treeset\"><a class=\"anchor\" href=\"#treeset\">#</a> TreeSet</h2>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143845472.png\" alt=\"image-20230814143845472\" /></p>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143900305.png\" alt=\"image-20230814143900305\" /></p>\n<h1 id=\"泛型编程\"><a class=\"anchor\" href=\"#泛型编程\">#</a> 泛型编程</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143925901.png\" alt=\"image-20230814143925901\" /></p>\n<h1 id=\"类型通配符\"><a class=\"anchor\" href=\"#类型通配符\">#</a> 类型通配符</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814143950687.png\" alt=\"image-20230814143950687\" /></p>\n<h1 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h1>\n<p><img data-src=\"../pictures/jietuheji/image-20230814144036180.png\" alt=\"image-20230814144036180\" /></p>\n<p>&lt;img src=&quot;../pictures/jietuheji/image-20230814144051088.png&quot; alt=&quot;image-20230814144051088&quot;  /&gt;</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/15%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-%E5%8F%8D%E5%B0%84-%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "url": "https://jihaipeng123.github.io/15%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-%E5%8F%8D%E5%B0%84-%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "title": "15.类加载器&反射&模块化",
            "date_published": "2023-08-14T05:34:01.000Z",
            "content_html": "<h2 id=\"类加载器\"><a class=\"anchor\" href=\"#类加载器\">#</a> 类加载器</h2>\n<h3 id=\"类加载\"><a class=\"anchor\" href=\"#类加载\">#</a> 类加载</h3>\n<ul>\n<li>类加载的描述\n<ul>\n<li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM 将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</li>\n</ul>\n</li>\n<li>类的加载\n<ul>\n<li>就是指将 class 文件读入内存，并为之创建一个 java.lang.Class 对象</li>\n<li>任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</li>\n</ul>\n</li>\n<li>类的连接\n<ul>\n<li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li>\n<li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li>\n<li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li>\n</ul>\n</li>\n<li>类的初始化\n<ul>\n<li>在该阶段，主要就是对类变量进行初始化</li>\n</ul>\n</li>\n<li>类的初始化步骤\n<ul>\n<li>假如类还未被加载和连接，则程序先加载并连接该类</li>\n<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>\n<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>\n<li>注意：在执行第 2 个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤 1-3</li>\n</ul>\n</li>\n<li>类的初始化时机\n<ul>\n<li>创建类的实例</li>\n<li>调用类的类方法</li>\n<li>访问类或者接口的类变量，或者为该类变量赋值</li>\n<li>使用反射方式来强制创建某个类或接口对应的 java.lang.Class 对象</li>\n<li>初始化某个类的子类</li>\n<li>直接使用 java.exe 命令来运行某个主类</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类加载器的作用\"><a class=\"anchor\" href=\"#类加载器的作用\">#</a> 类加载器的作用</h3>\n<ul>\n<li>负责将.class 文件加载到内存中，并为之生成对应的 java.lang.Class 对象。虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行！</li>\n</ul>\n<h3 id=\"jvm的类加载机制\"><a class=\"anchor\" href=\"#jvm的类加载机制\">#</a> JVM 的类加载机制</h3>\n<ul>\n<li>全盘负责：就是当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>\n<li>父类委托：就是当一个类加载器负责加载某个 Class 时，先让父类加载器试图加载该 Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>\n<li>缓存机制：保证所有加载过的 Class 都会被缓存，当程序需要使用某个 Class 对象时，类加载器先从缓存区中搜索该 Class，只有当缓存区中不存在该 Class 对象时，系统才会读取该类对应的二进制数据，并将其转换成 Class 对象，存储到缓存区</li>\n</ul>\n<h3 id=\"java中的内置类加载器\"><a class=\"anchor\" href=\"#java中的内置类加载器\">#</a> Java 中的内置类加载器</h3>\n<ul>\n<li>Bootstrap class loader：它是虚拟机的内置类加载器，通常表示为 null ，并且没有父 null</li>\n<li>Platform class loader：平台类加载器可以看到所有平台类 ，平台类包括由平台类加载器或其祖先定义的 Java SE 平台 API，其实现类和 JDK 特定的运行时类</li>\n<li>System class loader：它也被称为应用程序类加载器 ，与平台类加载器不同。 系统类加载器通常用于定义应用程序类路径，模块路径和 JDK 特定工具上的类</li>\n<li>类加载器的继承关系：System 的父加载器为 Platform，而 Platform 的父加载器为 Bootstrap</li>\n</ul>\n<h3 id=\"classloader-中的两个方法\"><a class=\"anchor\" href=\"#classloader-中的两个方法\">#</a> ClassLoader 中的两个方法</h3>\n<ul>\n<li>\n<p>方法分类</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static ClassLoader getSystemClassLoader()</td>\n<td>返回用于委派的系统类加载器</td>\n</tr>\n<tr>\n<td>ClassLoader getParent()</td>\n<td>返回父类加载器进行委派</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassLoaderDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//static ClassLoader getSystemClassLoader ()：返回用于委派的系统类加载器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//AppClassLoader</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//ClassLoader getParent ()：返回父类加载器进行委派</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> c2 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//PlatformClassLoader</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> c3 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>框架设计的灵魂</p>\n<p>框架：简化编码</p>\n<p>反射：将类的各个部分封装为其他对象，这就是反射机制</p>\n<p>好处：程序运行过程中，操作这些对象</p>\n<p>可以解耦，提高扩展性。</p>\n<p><img data-src=\"../pictures/leijiazai/image-20230814154207306.png\" alt=\"image-20230814154207306\" /></p>\n<h3 id=\"获取class类对象的三种方式\"><a class=\"anchor\" href=\"#获取class类对象的三种方式\">#</a> 获取 Class 类对象的三种方式</h3>\n<p>三种方式分类</p>\n<ul>\n<li>类名.class 属性</li>\n<li>对象名.getClass () 方法</li>\n<li>Class.forName (全类名) 方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 使用类的 class 属性来获取该类对应的 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 调用对象的 getClass () 方法，返回该对象所属类对应的 Class 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> c3 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 使用 Class 类中的静态方法 forName (String className)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"反射获取构造方法并使用\"><a class=\"anchor\" href=\"#反射获取构造方法并使用\">#</a> 反射获取构造方法并使用</h3>\n<h4 id=\"class类获取构造方法对象的方法\"><a class=\"anchor\" href=\"#class类获取构造方法对象的方法\">#</a> Class 类获取构造方法对象的方法</h4>\n<ul>\n<li>\n<p>方法分类</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constructor&lt;?&gt;[] getConstructors()</td>\n<td>返回所有公共构造方法对象的数组</td>\n</tr>\n<tr>\n<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>\n<td>返回所有构造方法对象的数组</td>\n</tr>\n<tr>\n<td>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</td>\n<td>返回单个公共构造方法对象</td>\n</tr>\n<tr>\n<td>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</td>\n<td>返回单个构造方法对象</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;?>[] getConstructors () 返回一个包含 Constructor 对象的数组， Constructor 对象反映了由该 Class 对象表示的类的所有公共构造函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        Constructor&lt;?>[] cons = c.getConstructors();</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;?>[] getDeclaredConstructors () 返回反映由该 Class 对象表示的类声明的所有构造函数的 Constructor 对象的数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cons <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">:</span> cons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;T> getConstructor (Class&lt;?>... parameterTypes) 返回一个 Constructor 对象，该对象反映由该 Class 对象表示的类的指定公共构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;T> getDeclaredConstructor (Class&lt;?>... parameterTypes) 返回一个 Constructor 对象，该对象反映由此 Class 对象表示的类或接口的指定构造函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 参数：你要获取的构造方法的参数的个数和数据类型对应的字节码文件对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//Constructor 提供了一个类的单个构造函数的信息和访问权限</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//T newInstance (Object... initargs) 使用由此 Constructor 对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        Student s = new Student();</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        System.out.println(s);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"constructor类用于创建对象的方法\"><a class=\"anchor\" href=\"#constructor类用于创建对象的方法\">#</a> Constructor 类用于创建对象的方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T newInstance(Object...initargs)</td>\n<td>根据指定的构造方法创建对象</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"反射获取构造方法并使用练习1\"><a class=\"anchor\" href=\"#反射获取构造方法并使用练习1\">#</a> 反射获取构造方法并使用练习 1</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射获取公共的构造方法并创建对象</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<ul>\n<li>\n<p>学生类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 成员变量：一个私有，一个默认，一个公共</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 构造方法：一个私有，一个默认，两个公共</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 成员方法：一个私有，四个公共</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method:\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\", address='\"</span> <span class=\"token operator\">+</span> address <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//public Student(String name, int age, String address)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;T> getConstructor(Class&lt;?>... parameterTypes)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 基本数据类型也可以通过.class 得到对应的 Class 类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//T newInstance(Object... initargs)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"西安\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射获取构造方法并使用练习2\"><a class=\"anchor\" href=\"#反射获取构造方法并使用练习2\">#</a> 反射获取构造方法并使用练习 2</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射获取私有构造方法并创建对象</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<ul>\n<li>\n<p>学生类：参见上方学生类</p>\n</li>\n<li>\n<p>测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//private Student(String name)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//Constructor&lt;T> getDeclaredConstructor(Class&lt;?>... parameterTypes)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 暴力反射</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//public void setAccessible (boolean flag): 值为 true，取消访问检查</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        con<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射获取成员变量并使用\"><a class=\"anchor\" href=\"#反射获取成员变量并使用\">#</a> 反射获取成员变量并使用</h3>\n<h4 id=\"class类获取成员变量对象的方法\"><a class=\"anchor\" href=\"#class类获取成员变量对象的方法\">#</a> Class 类获取成员变量对象的方法</h4>\n<ul>\n<li>\n<p>方法分类</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Field[] getFields()</td>\n<td>返回所有公共成员变量对象的数组</td>\n</tr>\n<tr>\n<td>Field[] getDeclaredFields()</td>\n<td>返回所有成员变量对象的数组</td>\n</tr>\n<tr>\n<td>Field getField(String name)</td>\n<td>返回单个公共成员变量对象</td>\n</tr>\n<tr>\n<td>Field getDeclaredField(String name)</td>\n<td>返回单个成员变量对象</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Field [] getFields () 返回一个包含 Field 对象的数组， Field 对象反映由该 Class 对象表示的类或接口的所有可访问的公共字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//Field [] getDeclaredFields () 返回一个 Field 对象的数组，反映了由该 Class 对象表示的类或接口声明的所有字段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        Field[] fields = c.getFields();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//Field getField (String name) 返回一个 Field 对象，该对象反映由该 Class 对象表示的类或接口的指定公共成员字段</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//Field getDeclaredField (String name) 返回一个 Field 对象，该对象反映由该 Class 对象表示的类或接口的指定声明字段</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span> addressField <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取无参构造方法创建对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        obj.addressField = \"西安\";</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//Field 提供有关类或接口的单个字段的信息和动态访问</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//void set (Object obj, Object value) 将指定的对象参数中由此 Field 对象表示的字段设置为指定的新值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        addressField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"西安\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给 obj 的成员变量 addressField 赋值为西安</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        Student s = new Student();</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        s.address = \"西安\";</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//        System.out.println(s);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"field类用于给成员变量赋值的方法\"><a class=\"anchor\" href=\"#field类用于给成员变量赋值的方法\">#</a> Field 类用于给成员变量赋值的方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>voidset(Object obj,Object value)</td>\n<td>给 obj 对象的成员变量赋值为 value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"反射获取成员变量并使用练习\"><a class=\"anchor\" href=\"#反射获取成员变量并使用练习\">#</a> 反射获取成员变量并使用练习</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射获取成员变量并赋值</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<ul>\n<li>\n<p>学生类：参见上方学生类</p>\n</li>\n<li>\n<p>测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Student s = new Student();</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//s.name = \"林青霞\";</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//        Field nameField = c.getField(\"name\"); //NoSuchFieldException: name</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Field</span> nameField <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nameField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//s.age = 30;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Field</span> ageField <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ageField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ageField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//s.address = \"西安\";</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Field</span> addressField <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        addressField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        addressField<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"西安\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射获取成员方法并使用\"><a class=\"anchor\" href=\"#反射获取成员方法并使用\">#</a> 反射获取成员方法并使用</h3>\n<h4 id=\"class类获取成员方法对象的方法\"><a class=\"anchor\" href=\"#class类获取成员方法对象的方法\">#</a> Class 类获取成员方法对象的方法</h4>\n<ul>\n<li>\n<p>方法分类</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method[] getMethods()</td>\n<td>返回所有公共成员方法对象的数组，包括继承的</td>\n</tr>\n<tr>\n<td>Method[] getDeclaredMethods()</td>\n<td>返回所有成员方法对象的数组，不包括继承的</td>\n</tr>\n<tr>\n<td>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</td>\n<td>返回单个公共成员方法对象</td>\n</tr>\n<tr>\n<td>Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</td>\n<td>返回单个成员方法对象</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Method [] getMethods () 返回一个包含 方法对象的数组， 方法对象反映由该 Class 对象表示的类或接口的所有公共方法，包括由类或接口声明的对象以及从超类和超级接口继承的类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//Method [] getDeclaredMethods () 返回一个包含 方法对象的数组， 方法对象反映由 Class 对象表示的类或接口的所有声明方法，包括 public，protected，default（package）访问和私有方法，但不包括继承方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        Method[] methods = c.getMethods();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//Method getMethod (String name, Class&lt;?>... parameterTypes) 返回一个 方法对象，该对象反映由该 Class 对象表示的类或接口的指定公共成员方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//Method getDeclaredMethod (String name, Class&lt;?>... parameterTypes) 返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 Class 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//public void method1()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取无参构造方法创建对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//        obj.m();</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 在类或接口上提供有关单一方法的信息和访问权限</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//Object invoke (Object obj, Object... args) 在具有指定参数的指定对象上调用此 方法对象表示的基础方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//Object：返回值类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//obj：调用方法的对象</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//args：方法需要的参数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        Student s = new Student();</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        s.method1();</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"method类用于执行方法的方法\"><a class=\"anchor\" href=\"#method类用于执行方法的方法\">#</a> Method 类用于执行方法的方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Objectinvoke(Object obj,Object... args)</td>\n<td>调用 obj 对象的成员方法，参数是 args, 返回值是 Object 类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"反射获取成员方法并使用练习\"><a class=\"anchor\" href=\"#反射获取成员方法并使用练习\">#</a> 反射获取成员方法并使用练习</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射获取成员方法并调用</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<ul>\n<li>\n<p>学生类：参见上方学生类</p>\n</li>\n<li>\n<p>测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.itheima_02.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Student s = new Student();</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//s.method1();</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Method</span> m1 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        m1<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//s.method2 (\"林青霞\");</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Method</span> m2 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        m2<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        String ss = s.method3 (\"林青霞\",30);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        System.out.println(ss);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Method</span> m3 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method3\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//s.function();</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        Method m4 = c.getMethod(\"function\"); //NoSuchMethodException: com.itheima_02.Student.function()</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Method</span> m4 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        m4<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        m4<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射的案例\"><a class=\"anchor\" href=\"#反射的案例\">#</a> 反射的案例</h3>\n<h4 id=\"反射练习之越过泛型检查\"><a class=\"anchor\" href=\"#反射练习之越过泛型检查\">#</a> 反射练习之越过泛型检查</h4>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射技术，向一个泛型为 Integer 的集合中添加一些字符串数据</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//        array.add(10);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        array.add(20);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        array.add(\"hello\");</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"运行配置文件中指定类的指定方法\"><a class=\"anchor\" href=\"#运行配置文件中指定类的指定方法\">#</a> 运行配置文件中指定类的指定方法</h4>\n<ul>\n<li>\n<p>案例需求</p>\n<ul>\n<li>通过反射运行配置文件中指定类的指定方法</li>\n</ul>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 加载数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myReflect\\\\class.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        prop<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            className=com.itheima_06.Student</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            methodName=study</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 通过反射来使用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//com.itheima_06.Student</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//study</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"注解名称\"><a class=\"anchor\" href=\"#注解名称\">#</a> @注解名称</h2>\n<p>JDK 中预定得到一些注解 \t\t@Override \t@Deprecated      @SupppressWarnings</p>\n<p>自定义注解</p>\n<p>在程序使用注解</p>\n<h2 id=\"模块化\"><a class=\"anchor\" href=\"#模块化\">#</a> 模块化</h2>\n<h3 id=\"模块化概述\"><a class=\"anchor\" href=\"#模块化概述\">#</a> 模块化概述</h3>\n<p>Java 语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台，系统都采用 Java 语言编写。但是，伴随着发展，Java 也越来越庞大，逐渐发展成为一门 “臃肿” 的语言。而且，无论是运行一个大型的软件系统，还是运行一个小的程序，即使程序只需要使用 Java 的部分核心功能， JVM 也要加载整个 JRE 环境。<br />\n为了给 Java “瘦身”，让 Java 实现轻量化，Java 9 正式的推出了模块化系统。Java 被拆分为 N 多个模块，并允许 Java 程序可以根据需要选择加载程序必须的 Java 模块，这样就可以让 Java 以轻量化的方式来运行</p>\n<p>其实，Java 7 的时候已经提出了模块化的概念，但由于其过于复杂，Java 7，Java 8 都一直未能真正推出，直到 Java 9 才真正成熟起来。对于 Java 语言来说，模块化系统是一次真正的自我革新，这种革新使得 “古老而庞大” 的 Java 语言重新焕发年轻的活力</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/14%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Stream/",
            "url": "https://jihaipeng123.github.io/14%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Stream/",
            "title": "14.函数式接口&Stream",
            "date_published": "2023-08-14T05:24:40.000Z",
            "content_html": "<h2 id=\"函数式接口\"><a class=\"anchor\" href=\"#函数式接口\">#</a> 函数式接口</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<ul>\n<li>\n<p>概念</p>\n<p>有且仅有一个抽象方法的接口</p>\n</li>\n<li>\n<p>如何检测一个接口是不是函数式接口</p>\n<p>@FunctionalInterface</p>\n<p>放在接口定义的上方：如果接口是函数式接口，编译通过；如果不是，编译失败</p>\n</li>\n<li>\n<p>注意事项</p>\n<p>我们自己定义函数式接口的时候，@FunctionalInterface 是可选的，就算我不写这个注解，只要保证满足函数式接口定义的条件，也照样是函数式接口。但是，建议加上该注解</p>\n</li>\n</ul>\n<h3 id=\"函数式接口作为方法的参数\"><a class=\"anchor\" href=\"#函数式接口作为方法的参数\">#</a> 函数式接口作为方法的参数</h3>\n<ul>\n<li>\n<p>需求描述</p>\n<p>定义一个类 (RunnableDemo)，在类中提供两个方法</p>\n<p>一个方法是：startThread (Runnable r)   方法参数 Runnable 是一个函数式接口</p>\n<p>一个方法是主方法，在主方法中调用 startThread 方法</p>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 在主方法中调用 startThread 方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类的方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"线程启动了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"线程启动了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"函数式接口作为方法的返回值\"><a class=\"anchor\" href=\"#函数式接口作为方法的返回值\">#</a> 函数式接口作为方法的返回值</h3>\n<ul>\n<li>\n<p>需求描述</p>\n<p>定义一个类 (ComparatorDemo)，在类中提供两个方法</p>\n<p>一个方法是：Comparator&lt;String&gt; getComparator ()   方法返回值 Comparator 是一个函数式接口</p>\n<p>一个方法是主方法，在主方法中调用 getComparator 方法</p>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComparatorDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 定义集合，存储字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序前：\"</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token function\">getComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后：\"</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类的方式实现</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//        return new Comparator&lt;String>() &#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//            @Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//            public int compare(String s1, String s2) &#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//                return s1.length()-s2.length();</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//            &#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        &#125;;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 方式实现</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用函数式接口之supplier\"><a class=\"anchor\" href=\"#常用函数式接口之supplier\">#</a> 常用函数式接口之 Supplier</h3>\n<ul>\n<li>\n<p>Supplier 接口</p>\n<p>Supplier&lt;T&gt; 接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的 get 方法就会生产什么类型的数据供我们使用。</p>\n</li>\n<li>\n<p>常用方法</p>\n<p>只有一个无参的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T get()</td>\n<td style=\"text-align:center\">按照某种实现逻辑 (由 Lambda 表达式实现) 返回一个数据</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SupplierDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token function\">getInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，返回一个整数数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getInteger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> sup<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，返回一个字符串数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> sup<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"supplier接口练习之获取最大值\"><a class=\"anchor\" href=\"#supplier接口练习之获取最大值\">#</a> Supplier 接口练习之获取最大值</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<p>定义一个类 (SupplierTest)，在类中提供两个方法</p>\n<p>一个方法是：int getMax (Supplier&lt;Integer&gt; sup)   用于返回一个 int 数组中的最大值</p>\n<p>一个方法是主方法，在主方法中调用 getMax 方法</p>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SupplierTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 定义一个 int 数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                   max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 返回一个 int 数组中的最大值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> sup<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用函数式接口之consumer\"><a class=\"anchor\" href=\"#常用函数式接口之consumer\">#</a> 常用函数式接口之 Consumer</h3>\n<ul>\n<li>\n<p>Consumer 接口</p>\n<p>Consumer&lt;T&gt; 接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</p>\n</li>\n<li>\n<p>常用方法</p>\n<p>Consumer&lt;T&gt;：包含两个方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void  accept(T t)</td>\n<td>对给定的参数执行此操作</td>\n</tr>\n<tr>\n<td>default Consumer&lt;T&gt;          andThen(Consumer after)</td>\n<td>返回一个组合的 Consumer，依次执行此操作，然后执行 after 操作</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 操作一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">operatorString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 操作二</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">operatorString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 传入两个操作使用 andThen 完成</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">operatorString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，用不同的方式消费同一个字符串数据两次</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operatorString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        con1.accept(name);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//        con2.accept(name);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        con1<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>con2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，消费一个字符串数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operatorString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        con<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"consumer接口练习之按要求打印信息\"><a class=\"anchor\" href=\"#consumer接口练习之按要求打印信息\">#</a> Consumer 接口练习之按要求打印信息</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<p>String [] strArray = {&quot;林青霞，30&quot;, &quot;张曼玉，35&quot;, &quot;王祖贤，33&quot;};</p>\n<p>字符串数组中有多条信息，请按照格式：“姓名：XX, 年龄：XX&quot; 的格式将信息打印出来</p>\n<p>要求：</p>\n<p>把打印姓名的动作作为第一个 Consumer 接口的 Lambda 实例</p>\n<p>把打印年龄的动作作为第二个 Consumer 接口的 Lambda 实例</p>\n<p>将两个 Consumer 接口按照顺序组合到一起使用</p>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"林青霞,30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张曼玉,35\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王祖贤,33\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">printInfo</span><span class=\"token punctuation\">(</span>strArray<span class=\"token punctuation\">,</span> str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",年龄：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            con1<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>con2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用函数式接口之predicate\"><a class=\"anchor\" href=\"#常用函数式接口之predicate\">#</a> 常用函数式接口之 Predicate</h3>\n<ul>\n<li>\n<p>Predicate 接口</p>\n<p>Predicate&lt;T&gt; 接口通常用于判断参数是否满足指定的条件</p>\n</li>\n<li>\n<p>常用方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean test(T t)</td>\n<td>对给定的参数进行判断 (判断逻辑由 Lambda 表达式实现)，返回一个布尔值</td>\n</tr>\n<tr>\n<td>default Predicate&lt;T&gt; negate()</td>\n<td>返回一个逻辑的否定，对应逻辑非</td>\n</tr>\n<tr>\n<td>default Predicate&lt;T&gt; and(Predicate other)</td>\n<td>返回一个组合判断，对应短路与</td>\n</tr>\n<tr>\n<td>default Predicate&lt;T&gt; or(Predicate other)</td>\n<td>返回一个组合判断，对应短路或</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PredicateDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 判断给定的字符串是否满足要求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//        return !pre.test(s);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PredicateDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b4 <span class=\"token operator\">=</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 同一个字符串给出两个不同的判断条件，最后把这两个判断的结果做逻辑与运算的结果作为最终的结果</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> pre1<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>pre2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 判断给定的字符串是否满足要求</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"predicate接口练习之筛选满足条件数据\"><a class=\"anchor\" href=\"#predicate接口练习之筛选满足条件数据\">#</a> Predicate 接口练习之筛选满足条件数据</h3>\n<ul>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>String [] strArray = {&quot;林青霞，30&quot;, &quot;柳岩，34&quot;, &quot;张曼玉，35&quot;, &quot;貂蝉，31&quot;, &quot;王祖贤，33&quot;};</p>\n</li>\n<li>\n<p>字符串数组中有多条信息，请通过 Predicate 接口的拼装将符合要求的字符串筛选到集合 ArrayList 中，并遍历 ArrayList 集合</p>\n</li>\n<li>\n<p>同时满足如下要求：姓名长度大于 2；年龄大于 33</p>\n</li>\n</ul>\n</li>\n<li>\n<p>分析</p>\n<ul>\n<li>\n<p>有两个判断条件，所以需要使用两个 Predicate 接口，对条件进行判断</p>\n</li>\n<li>\n<p>必须同时满足两个条件，所以可以使用 and 方法连接两个判断条件</p>\n</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PredicateTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"林青霞,30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"柳岩,34\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张曼玉,35\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"貂蝉,31\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王祖贤,33\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token function\">myFilter</span><span class=\"token punctuation\">(</span>strArray<span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 通过 Predicate 接口的拼装将符合要求的字符串筛选到集合 ArrayList 中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">myFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> pre2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 定义一个集合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre1<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>pre2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用函数式接口之function\"><a class=\"anchor\" href=\"#常用函数式接口之function\">#</a> 常用函数式接口之 Function</h3>\n<ul>\n<li>\n<p>Function 接口</p>\n<p>Function&lt;T,R&gt; 接口通常用于对参数进行处理，转换 (处理逻辑由 Lambda 表达式实现)，然后返回一个新的值</p>\n</li>\n<li>\n<p>常用方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>R  apply(T t)</td>\n<td>将此函数应用于给定的参数</td>\n</tr>\n<tr>\n<td>default &lt;V&gt; Function andThen(Function after)</td>\n<td>返回一个组合函数，首先将该函数应用于输入，然后将 after 函数应用于结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 操作一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">,</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 操作二</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>i <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 使用 andThen 的方式连续执行两个操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，把一个字符串转换 int 类型，在控制台输出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        Integer i = fun.apply(s);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，把一个 int 类型的数据加上一个整数之后，转为字符串在控制台输出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 定义一个方法，把一个字符串转换 int 类型，把 int 类型的数据加上一个整数之后，转为字符串在控制台输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fun1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fun2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> ss <span class=\"token operator\">=</span> fun1<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>fun2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"function接口练习之按照指定要求操作数据\"><a class=\"anchor\" href=\"#function接口练习之按照指定要求操作数据\">#</a> Function 接口练习之按照指定要求操作数据</h3>\n<ul>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>String s = &quot;林青霞，30&quot;;</p>\n</li>\n<li>\n<p>请按照我指定的要求进行操作：</p>\n<p>1: 将字符串截取得到数字年龄部分</p>\n<p>2: 将上一步的年龄字符串转换成为 int 类型的数据</p>\n<p>3: 将上一步的 int 数据加 70，得到一个 int 结果，在控制台输出</p>\n</li>\n<li>\n<p>请通过 Function 接口来实现函数拼接</p>\n</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"林青霞,30\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> ss <span class=\"token operator\">-></span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> i <span class=\"token operator\">+</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fun1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fun2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fun3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fun1<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>fun2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>fun3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"strem流\"><a class=\"anchor\" href=\"#strem流\">#</a> Strem 流</h2>\n<h3 id=\"体验stream流\"><a class=\"anchor\" href=\"#体验stream流\">#</a> 体验 Stream 流</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<p>按照下面的要求完成集合的创建和遍历</p>\n<ul>\n<li>创建一个集合，存储多个字符串元素</li>\n<li>把集合中所有以 &quot;张&quot; 开头的元素存储到一个新的集合</li>\n<li>把 &quot;张&quot; 开头的集合中的长度为 3 的元素存储到一个新的集合</li>\n<li>遍历上一步得到的集合</li>\n</ul>\n</li>\n<li>\n<p>原始方式示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 把集合中所有以 \"张\" 开头的元素存储到一个新的集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> zhangList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                zhangList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//        System.out.println(zhangList);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 把 \"张\" 开头的集合中的长度为 3 的元素存储到一个新的集合</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threeList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> zhangList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                threeList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        System.out.println(threeList);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 遍历上一步得到的集合</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> threeList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//Stream 流来改进</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//        list.stream ().filter (s -> s.startsWith (\"张\")).filter (s -> s.length () == 3).forEach (s -> System.out.println (s));</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 Stream 流示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//Stream 流来改进</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Stream 流的好处</p>\n<ul>\n<li>\n<p>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流、过滤姓张、过滤长度为 3、逐一打印</p>\n</li>\n<li>\n<p>Stream 流把真正的函数式编程风格引入到 Java 中</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"22stream流的常见生成方式应用\"><a class=\"anchor\" href=\"#22stream流的常见生成方式应用\">#</a> 2.2Stream 流的常见生成方式【应用】</h3>\n<ul>\n<li>Stream 流的思想</li>\n</ul>\n<p><img data-src=\"../pictures/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-Stream/image-20230814132759091.png\" alt=\"image-20230814132759091\" /></p>\n<ul>\n<li>\n<p>生成 Stream 流的方式</p>\n<ul>\n<li>\n<p>Collection 体系集合</p>\n<p>使用默认方法 stream () 生成流， default Stream&lt;E&gt; stream ()</p>\n</li>\n<li>\n<p>Map 体系集合</p>\n<p>把 Map 转成 Set 集合，间接的生成流</p>\n</li>\n<li>\n<p>数组</p>\n<p>通过 Stream 接口的静态方法 of (T... values) 生成流</p>\n</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//Collection 体系的集合可以使用默认方法 stream () 生成流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> listStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> setStream <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//Map 体系的集合间接的生成流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keyStream <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> valueStream <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entryStream <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 数组可以通过 Stream 接口的静态方法 of (T... values) 生成流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strArrayStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>strArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strArrayStream2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"stream流中间操作方法\"><a class=\"anchor\" href=\"#stream流中间操作方法\">#</a> Stream 流中间操作方法</h3>\n<ul>\n<li>\n<p>概念</p>\n<p>中间操作的意思是，执行完此方法之后，Stream 流依然可以继续执行其他操作。</p>\n</li>\n<li>\n<p>常见方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stream&lt;T&gt; filter(Predicate predicate)</td>\n<td>用于对流中的数据进行过滤</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; limit(long maxSize)</td>\n<td>返回此流中的元素组成的流，截取前指定参数个数的数据</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; skip(long n)</td>\n<td>跳过指定参数个数的数据，返回由该流的剩余元素组成的流</td>\n</tr>\n<tr>\n<td>static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)</td>\n<td>合并 a 和 b 两个流为一个流</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; distinct()</td>\n<td>返回由该流的不同元素（根据 Object.equals (Object) ）组成的流</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; sorted()</td>\n<td>返回由此流的元素组成的流，根据自然顺序排序</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; sorted(Comparator comparator)</td>\n<td>返回由该流的元素组成的流，根据提供的 Comparator 进行排序</td>\n</tr>\n<tr>\n<td>&lt;R&gt; Stream&lt;R&gt; map(Function mapper)</td>\n<td>返回由给定函数应用于此流的元素的结果组成的流</td>\n</tr>\n<tr>\n<td>IntStream mapToInt(ToIntFunction mapper)</td>\n<td>返回一个 IntStream 其中包含将给定函数应用于此流的元素的结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>filter 代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：把 list 集合中以张开头的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 需求 2：把 list 集合中长度为 3 的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 需求 3：把 list 集合中以张开头的，长度为 3 的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>limit&amp;skip 代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：取前 3 个数据在控制台输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 需求 2：跳过 3 个元素，把剩下的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 需求 3：跳过 2 个元素，把剩下的元素中前 2 个在控制台输出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>concat&amp;distinct 代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：取前 4 个数据组成一个流</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s1 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 需求 2：跳过 2 个数据组成一个流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 需求 3：合并需求 1 和需求 2 得到的流，并把结果在控制台输出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//        Stream.concat(s1,s2).forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 需求 4：合并需求 1 和需求 2 得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>sorted 代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo04</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linqingxia\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangmanyu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangzuxian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liuyan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangmin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangwuji\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：按照字母顺序把数据在控制台输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        list.stream().sorted().forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 需求 2：按照字符串长度把数据在控制台输出</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>map&amp;mapToInt 代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo05</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 需求：将集合中的字符串数据转换为整数之后在控制台输出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//        list.stream().map(s -> Integer.parseInt(s)).forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        list.stream().map(Integer::parseInt).forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        list.stream().mapToInt(Integer::parseInt).forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//int sum () 返回此流中元素的总和</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"stream流终结操作方法\"><a class=\"anchor\" href=\"#stream流终结操作方法\">#</a> Stream 流终结操作方法</h3>\n<ul>\n<li>\n<p>概念</p>\n<p>终结操作的意思是，执行完此方法之后，Stream 流将不能再执行其他操作。</p>\n</li>\n<li>\n<p>常见方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void forEach(Consumer action)</td>\n<td>对此流的每个元素执行操作</td>\n</tr>\n<tr>\n<td>long count()</td>\n<td>返回此流中的元素数</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：把集合中的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        list.stream().forEach(System.out::println);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 需求 2：统计集合中有几个以张开头的元素，并把统计结果在控制台输出</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"stream流综合练习\"><a class=\"anchor\" href=\"#stream流综合练习\">#</a> Stream 流综合练习</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<p>现在有两个 ArrayList 集合，分别存储 6 名男演员名称和 6 名女演员名称，要求完成如下的操作</p>\n<ul>\n<li>\n<p>男演员只要名字为 3 个字的前三人</p>\n</li>\n<li>\n<p>女演员只要姓林的，并且不要第一个</p>\n</li>\n<li>\n<p>把过滤后的男演员姓名和女演员姓名合并到一起</p>\n</li>\n<li>\n<p>把上一步操作后的元素作为构造方法的参数创建演员对象，遍历数据</p>\n</li>\n</ul>\n<p>演员类 Actor 已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的 get/set 方法</p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Actor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Actor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 创建集合</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> manList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周润发\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成龙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘德华\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吴京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周星驰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        manList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李连杰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> womanList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林心如\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林志玲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        womanList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        // 男演员只要名字为 3 个字的前三人</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        Stream&lt;String> manStream = manList.stream ().filter (s -> s.length () == 3).limit (3);</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        // 女演员只要姓林的，并且不要第一个</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        Stream&lt;String> womanStream = womanList.stream ().filter (s -> s.startsWith (\"林\")).skip (1);</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        // 把过滤后的男演员姓名和女演员姓名合并到一起</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        Stream&lt;String> stream = Stream.concat (manStream, womanStream);</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        // 把上一步操作后的元素作为构造方法的参数创建演员对象，遍历数据</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>//        stream.map (Actor::new).forEach (System.out::println);</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        stream.map (Actor::new).forEach (p -> System.out.println (p.getName ()));</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>manList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                womanList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Actor</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"stream流的收集操作\"><a class=\"anchor\" href=\"#stream流的收集操作\">#</a> Stream 流的收集操作</h3>\n<ul>\n<li>\n<p>概念</p>\n<p>对数据使用 Stream 流的方式操作完毕后，可以把流中的数据收集到集合中。</p>\n</li>\n<li>\n<p>常用方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>R collect(Collector collector)</td>\n<td>把结果收集到集合中</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>工具类 Collectors 提供了具体的收集方式</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public static &lt;T&gt; Collector toList()</td>\n<td>把元素收集到 List 集合中</td>\n</tr>\n<tr>\n<td>public static &lt;T&gt; Collector toSet()</td>\n<td>把元素收集到 Set 集合中</td>\n</tr>\n<tr>\n<td>public static  Collector toMap(Function keyMapper,Function valueMapper)</td>\n<td>把元素收集到 Map 集合中</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建 List 集合对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        // 需求 1：得到名字为 3 个字的流</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Stream&lt;String> listStream = list.stream ().filter (s -> s.length () == 3);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        // 需求 2：把使用 Stream 流操作完毕的数据收集到 List 集合中并遍历</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        List&lt;String> names = listStream.collect (Collectors.toList ());</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        for (String name : names) &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            System.out.println (name);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 创建 Set 集合对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        // 需求 3：得到年龄大于 25 的流</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Stream&lt;Integer> setStream = set.stream ().filter (age -> age > 25);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        // 需求 4：把使用 Stream 流操作完毕的数据收集到 Set 集合中并遍历</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Set&lt;Integer> ages = setStream.collect (Collectors.toSet ());</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        for (Integer age : ages) &#123;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            System.out.println (age);</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 定义一个字符串数组，每一个字符串数据由姓名数据和年龄数据组合而成</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"林青霞,30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张曼玉,35\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王祖贤,33\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"柳岩,25\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 需求 5：得到字符串中年龄数据大于 28 的流</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrayStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>strArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 需求 6：把使用 Stream 流操作完毕的数据收集到 Map 集合中并遍历，字符串中的姓名作键，年龄作值</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> arrayStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">Integer</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/13Lambda-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "url": "https://jihaipeng123.github.io/13Lambda-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "title": "13.Lambda&方法引用",
            "date_published": "2023-08-14T05:12:22.000Z",
            "content_html": "<h2 id=\"lambda表达式\"><a class=\"anchor\" href=\"#lambda表达式\">#</a> Lambda 表达式</h2>\n<h3 id=\"体验lambda表达式\"><a class=\"anchor\" href=\"#体验lambda表达式\">#</a> 体验 Lambda 表达式</h3>\n<ul>\n<li>\n<p>案例需求</p>\n<p>启动一个线程，在控制台输出一句话：多线程程序启动了</p>\n</li>\n<li>\n<p>实现方式一</p>\n<ul>\n<li>实现步骤\n<ul>\n<li>定义一个类 MyRunnable 实现 Runnable 接口，重写 run () 方法</li>\n<li>创建 MyRunnable 类的对象</li>\n<li>创建 Thread 类的对象，把 MyRunnable 的对象作为构造参数传递</li>\n<li>启动线程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>实现方式二</p>\n<ul>\n<li>匿名内部类的方式改进</li>\n</ul>\n</li>\n<li>\n<p>实现方式三</p>\n<ul>\n<li>Lambda 表达式的方式改进</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一的线程类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多线程程序启动了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 方式一</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//        MyRunnable my = new MyRunnable();</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        Thread t = new Thread(my);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        t.start();</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 方式二</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        new Thread(new Runnable() &#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//            @Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//            public void run() &#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//                System.out.println (\"多线程程序启动了\");</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//            &#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        &#125;).start();</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 方式三</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多线程程序启动了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数式编程思想概述</p>\n<p>函数式思想则尽量忽略面向对象的复杂语法：“强调做什么，而不是以什么形式去做”</p>\n<p>而我们要学习的 Lambda 表达式就是函数式思想的体现</p>\n</li>\n</ul>\n<h3 id=\"lambda表达式的标准格式\"><a class=\"anchor\" href=\"#lambda表达式的标准格式\">#</a> Lambda 表达式的标准格式</h3>\n<ul>\n<li>\n<p>格式：</p>\n<p 代码块=\"\">​\t(形式参数) -&gt;</p>\n<ul>\n<li>\n<p>形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可</p>\n</li>\n<li>\n<p>-&gt;：由英文中画线和大于符号组成，固定写法。代表指向动作</p>\n</li>\n<li>\n<p>代码块：是我们具体要做的事情，也就是以前我们写的方法体内容</p>\n</li>\n</ul>\n</li>\n<li>\n<p>组成 Lambda 表达式的三要素：</p>\n<ul>\n<li>形式参数，箭头，代码块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lambda表达式练习1\"><a class=\"anchor\" href=\"#lambda表达式练习1\">#</a> Lambda 表达式练习 1</h3>\n<ul>\n<li>\n<p>Lambda 表达式的使用前提</p>\n<ul>\n<li>\n<p>有一个接口</p>\n</li>\n<li>\n<p>接口中有且仅有一个抽象方法</p>\n</li>\n</ul>\n</li>\n<li>\n<p>练习描述</p>\n<p>​\t无参无返回值抽象方法的练习</p>\n</li>\n<li>\n<p>操作步骤</p>\n<ul>\n<li>\n<p>定义一个接口 (Eatable)，里面定义一个抽象方法：void eat ();</p>\n</li>\n<li>\n<p>定义一个测试类 (EatableDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useEatable (Eatable e)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useEatable 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Eatable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实现类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EatableImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Eatable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一天一苹果，医生远离我\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 测试类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EatableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 在主方法中调用 useEatable 方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Eatable</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EatableImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">useEatable</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">useEatable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一天一苹果，医生远离我\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//Lambda 表达式</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">useEatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一天一苹果，医生远离我\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useEatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Eatable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"lambda表达式练习2\"><a class=\"anchor\" href=\"#lambda表达式练习2\">#</a> Lambda 表达式练习 2</h3>\n<ul>\n<li>\n<p>练习描述</p>\n<p>有参无返回值抽象方法的练习</p>\n</li>\n<li>\n<p>操作步骤</p>\n<ul>\n<li>\n<p>定义一个接口 (Flyable)，里面定义一个抽象方法：void fly (String s);</p>\n</li>\n<li>\n<p>定义一个测试类 (FlyableDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useFlyable (Flyable f)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useFlyable 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在主方法中调用 useFlyable 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">useFlyable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Flyable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"飞机自驾游\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//Lambda</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">useFlyable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"飞机自驾游\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useFlyable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flyable</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        f<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"风和日丽，晴空万里\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"lambda表达式练习3\"><a class=\"anchor\" href=\"#lambda表达式练习3\">#</a> Lambda 表达式练习 3</h3>\n<ul>\n<li>\n<p>练习描述</p>\n<p>有参有返回值抽象方法的练习</p>\n</li>\n<li>\n<p>操作步骤</p>\n<ul>\n<li>\n<p>定义一个接口 (Addable)，里面定义一个抽象方法：int add (int x,int y);</p>\n</li>\n<li>\n<p>定义一个测试类 (AddableDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useAddable (Addable a)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useAddable 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Addable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在主方法中调用 useAddable 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">useAddable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useAddable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Addable</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"lambda表达式的省略模式\"><a class=\"anchor\" href=\"#lambda表达式的省略模式\">#</a> Lambda 表达式的省略模式</h3>\n<ul>\n<li>\n<p>省略的规则</p>\n<ul>\n<li>参数类型可以省略。但是有多个参数的情况下，不能只省略一个</li>\n<li>如果参数有且仅有一个，那么小括号可以省略</li>\n<li>如果代码块的语句只有一条，可以省略大括号和分号，和 return 关键字</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Addable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        useAddable((int x,int y) -> &#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//            return x + y;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//        &#125;);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 参数的类型可以省略</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">useAddable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        useFlyable((String s) -> &#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//            System.out.println(s);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//        &#125;);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 如果参数有且仅有一个，那么小括号可以省略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        useFlyable(s -> &#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//            System.out.println(s);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        &#125;);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 如果代码块的语句只有一条，可以省略大括号和分号</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">useFlyable</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 如果代码块的语句只有一条，可以省略大括号和分号，如果有 return，return 也要省略掉</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">useAddable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useFlyable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Flyable</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        f<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"风和日丽，晴空万里\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useAddable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Addable</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"lambda表达式的注意事项\"><a class=\"anchor\" href=\"#lambda表达式的注意事项\">#</a> Lambda 表达式的注意事项</h3>\n<ul>\n<li>\n<p>使用 Lambda 必须要有接口，并且要求接口中有且仅有一个抽象方法</p>\n</li>\n<li>\n<p>必须有上下文环境，才能推导出 Lambda 对应的接口</p>\n<ul>\n<li>\n<p>根据局部变量的赋值得知 Lambda 对应的接口</p>\n<p>​\tRunnable r = () -&gt; System.out.println (&quot;Lambda 表达式&quot;);</p>\n</li>\n<li>\n<p>根据调用方法的参数得知 Lambda 对应的接口</p>\n<p>​\tnew Thread (() -&gt; System.out.println (&quot;Lambda 表达式&quot;)).start ();</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lambda表达式和匿名内部类的区别\"><a class=\"anchor\" href=\"#lambda表达式和匿名内部类的区别\">#</a> Lambda 表达式和匿名内部类的区别</h3>\n<ul>\n<li>\n<p>所需类型不同</p>\n<ul>\n<li>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类</li>\n<li>Lambda 表达式：只能是接口</li>\n</ul>\n</li>\n<li>\n<p>使用限制不同</p>\n<ul>\n<li>\n<p>如果接口中有且仅有一个抽象方法，可以使用 Lambda 表达式，也可以使用匿名内部类</p>\n</li>\n<li>\n<p>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用 Lambda 表达式</p>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理不同</p>\n<ul>\n<li>匿名内部类：编译之后，产生一个单独的.class 字节码文件</li>\n<li>Lambda 表达式：编译之后，没有一个单独的.class 字节码文件。对应的字节码会在运行的时候动态生成</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"接口组成更新\"><a class=\"anchor\" href=\"#接口组成更新\">#</a> 接口组成更新</h2>\n<h3 id=\"接口组成更新概述\"><a class=\"anchor\" href=\"#接口组成更新概述\">#</a> 接口组成更新概述</h3>\n<ul>\n<li>\n<p>常量</p>\n<p>public static final</p>\n</li>\n<li>\n<p>抽象方法</p>\n<p>public abstract</p>\n</li>\n<li>\n<p>默认方法 (Java 8)</p>\n</li>\n<li>\n<p>静态方法 (Java 8)</p>\n</li>\n<li>\n<p>私有方法 (Java 9)</p>\n</li>\n</ul>\n<h3 id=\"接口中默认方法\"><a class=\"anchor\" href=\"#接口中默认方法\">#</a> 接口中默认方法</h3>\n<ul>\n<li>\n<p>格式</p>\n<p>public default 返回值类型 方法名 (参数列表)</p>\n</li>\n<li>\n<p>范例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意事项</p>\n<ul>\n<li>\n<p>默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉 default 关键字</p>\n</li>\n<li>\n<p>public 可以省略，default 不能省略</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口中静态方法\"><a class=\"anchor\" href=\"#接口中静态方法\">#</a> 接口中静态方法</h3>\n<ul>\n<li>\n<p>格式</p>\n<p>public static 返回值类型 方法名 (参数列表)</p>\n</li>\n<li>\n<p>范例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意事项</p>\n<ul>\n<li>\n<p>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</p>\n</li>\n<li>\n<p>public 可以省略，static 不能省略</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口中私有方法\"><a class=\"anchor\" href=\"#接口中私有方法\">#</a> 接口中私有方法</h3>\n<ul>\n<li>\n<p>私有方法产生原因</p>\n<p>Java 9 中新增了带方法体的私有方法，这其实在 Java 8 中就埋下了伏笔：Java 8 允许在接口中定义带方法体的默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是 Java 9 增加私有方法的必然性</p>\n</li>\n<li>\n<p>定义格式</p>\n<ul>\n<li>\n<p>格式 1</p>\n<p>private 返回值类型 方法名 (参数列表)</p>\n</li>\n<li>\n<p>范例 1</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>格式 2</p>\n<p>private static 返回值类型 方法名 (参数列表)</p>\n</li>\n<li>\n<p>范例 2</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>注意事项</p>\n<ul>\n<li>默认方法可以调用私有的静态方法和非静态方法</li>\n<li>静态方法只能调用私有的静态方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法引用\"><a class=\"anchor\" href=\"#方法引用\">#</a> 方法引用</h2>\n<h3 id=\"体验方法引用\"><a class=\"anchor\" href=\"#体验方法引用\">#</a> 体验方法引用</h3>\n<ul>\n<li>\n<p>方法引用的出现原因</p>\n<p>在使用 Lambda 表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作</p>\n<p>那么考虑一种情况：如果我们在 Lambda 中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑呢？答案肯定是没有必要</p>\n<p>那我们又是如何使用已经存在的方案的呢？</p>\n<p>这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案</p>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在主方法中调用 usePrintable 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        usePrintable((String s) -> &#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//            System.out.println(s);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//        &#125;);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token comment\">//Lambda 简化写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">usePrintable</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 方法引用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">usePrintable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usePrintable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Printable</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"爱生活爱Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"方法引用符\"><a class=\"anchor\" href=\"#方法引用符\">#</a> 方法引用符</h3>\n<ul>\n<li>\n<p>方法引用符</p>\n<p>::  该符号为引用运算符，而它所在的表达式被称为方法引用</p>\n</li>\n<li>\n<p>推导与省略</p>\n<ul>\n<li>如果使用 Lambda，那么根据 “可推导就是可省略” 的原则，无需指定参数类型，也无需指定的重载形式，它们都将被自动推导</li>\n<li>如果使用方法引用，也是同样可以根据上下文进行推导</li>\n<li>方法引用是 Lambda 的孪生兄弟</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"引用类方法\"><a class=\"anchor\" href=\"#引用类方法\">#</a> 引用类方法</h3>\n<p>​\t引用类方法，其实就是引用类的静态方法</p>\n<ul>\n<li>\n<p>格式</p>\n<p>类名：：静态方法</p>\n</li>\n<li>\n<p>范例</p>\n<p>Integer::parseInt</p>\n<p>Integer 类的方法：public static int parseInt (String s) 将此 String 转换为 int 类型数据</p>\n</li>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>定义一个接口 (Converter)，里面定义一个抽象方法 int convert (String s);</p>\n</li>\n<li>\n<p>定义一个测试类 (ConverterDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useConverter (Converter c)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useConverter 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Converter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConverterDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 写法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">useConverter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 引用类方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">useConverter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useConverter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Converter</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用说明</p>\n<p>Lambda 表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数</p>\n</li>\n</ul>\n<h3 id=\"引用对象的实例方法\"><a class=\"anchor\" href=\"#引用对象的实例方法\">#</a> 引用对象的实例方法</h3>\n<p>​\t引用对象的实例方法，其实就引用类中的成员方法</p>\n<ul>\n<li>\n<p>格式</p>\n<p>对象：：成员方法</p>\n</li>\n<li>\n<p>范例</p>\n<p>&quot;HelloWorld&quot;::toUpperCase</p>\n<p>String 类中的方法：public String toUpperCase () 将此 String 所有字符转换为大写</p>\n</li>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>定义一个类 (PrintString)，里面定义一个方法</p>\n<p>public void printUpper (String s)：把字符串参数变成大写的数据，然后在控制台输出</p>\n</li>\n<li>\n<p>定义一个接口 (Printer)，里面定义一个抽象方法</p>\n<p>void printUpperCase(String s)</p>\n</li>\n<li>\n<p>定义一个测试类 (PrinterDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>一个方法是：usePrinter (Printer p)</li>\n<li>一个方法是主方法，在主方法中调用 usePrinter 方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintString</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 把字符串参数变成大写的数据，然后在控制台输出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printUpper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">printUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrinterDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 简化写法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">usePrinter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 引用对象的实例方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">PrintString</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">usePrinter</span><span class=\"token punctuation\">(</span>ps<span class=\"token operator\">::</span><span class=\"token function\">printUpper</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usePrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Printer</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">printUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用说明</p>\n<p>Lambda 表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数</p>\n</li>\n</ul>\n<h3 id=\"引用类的实例方法\"><a class=\"anchor\" href=\"#引用类的实例方法\">#</a> 引用类的实例方法</h3>\n<p>​\t引用类的实例方法，其实就是引用类中的成员方法</p>\n<ul>\n<li>\n<p>格式</p>\n<p>类名：：成员方法</p>\n</li>\n<li>\n<p>范例</p>\n<p>String::substring</p>\n<p>public String substring(int beginIndex,int endIndex)</p>\n<p>从 beginIndex 开始到 endIndex 结束，截取字符串。返回一个子串，子串的长度为 endIndex-beginIndex</p>\n</li>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>定义一个接口 (MyString)，里面定义一个抽象方法：</p>\n<p>String mySubString(String s,int x,int y);</p>\n</li>\n<li>\n<p>定义一个测试类 (MyStringDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useMyString (MyString my)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useMyString 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyString</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">mySubString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStringDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 简化写法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">useMyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 引用类的实例方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">useMyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">substring</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useMyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyString</span> my<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span><span class=\"token function\">mySubString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用说明</p>\n<p>​    Lambda 表达式被类的实例方法替代的时候<br />\n​    第一个参数作为调用者<br />\n​    后面的参数全部传递给该方法作为参数</p>\n</li>\n</ul>\n<h3 id=\"引用构造器\"><a class=\"anchor\" href=\"#引用构造器\">#</a> 引用构造器</h3>\n<p>​\t引用构造器，其实就是引用构造方法</p>\n<ul>\n<li>\n<p>l 格式</p>\n<p>类名::new</p>\n</li>\n<li>\n<p>范例</p>\n<p>Student::new</p>\n</li>\n<li>\n<p>练习描述</p>\n<ul>\n<li>\n<p>定义一个类 (Student)，里面有两个成员变量 (name,age)</p>\n<p>并提供无参构造方法和带参构造方法，以及成员变量对应的 get 和 set 方法</p>\n</li>\n<li>\n<p>定义一个接口 (StudentBuilder)，里面定义一个抽象方法</p>\n<p>Student build(String name,int age);</p>\n</li>\n<li>\n<p>定义一个测试类 (StudentDemo)，在测试类中提供两个方法</p>\n<ul>\n<li>\n<p>一个方法是：useStudentBuilder (StudentBuilder s)</p>\n</li>\n<li>\n<p>一个方法是主方法，在主方法中调用 useStudentBuilder 方法</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>代码演示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StudentBuilder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">Student</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">//Lambda 简化写法</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">useStudentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 引用构造器</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">useStudentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useStudentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentBuilder</span> sb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用说明</p>\n<p>Lambda 表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</p>\n</li>\n</ul>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}