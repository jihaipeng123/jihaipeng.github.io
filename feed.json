{
    "version": "https://jsonfeed.org/version/1",
    "title": 123,
    "subtitle": 456,
    "icon": "https://jihaipeng123.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://jihaipeng123.github.io",
    "items": [
        {
            "id": "https://jihaipeng123.github.io/conda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "url": "https://jihaipeng123.github.io/conda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "title": "conda基础命令",
            "date_published": "2023-09-26T08:33:52.000Z",
            "content_html": "<p>查看所处的环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>第一列是环境名，<span class=\"token operator\">*</span>号代表现在所处环境，最后是环境所在的路径。<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda env list</pre></td></tr></table></figure><p>还可以使用参数 -y 来跳过确认询问<br />\n名字可以别取太长，进入的时候 tab 没办法补全，长了写起来麻烦</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create <span class=\"token operator\">-</span>n <span class=\"token punctuation\">(</span>环境名<span class=\"token punctuation\">)</span> python<span class=\"token operator\">=</span><span class=\"token number\">3.</span><span class=\"token function\">9</span><span class=\"token punctuation\">(</span>你想要包及版本，多个用空格隔开）</pre></td></tr></table></figure><p>进入环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda activate <span class=\"token punctuation\">(</span>环境名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>退出环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda deactivate</pre></td></tr></table></figure><p>删除环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda remove <span class=\"token operator\">-</span>n <span class=\"token punctuation\">(</span>环境名<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span>all</pre></td></tr></table></figure><p>查找包</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 精确查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda search <span class=\"token operator\">--</span>full<span class=\"token operator\">-</span>name （包名）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 模糊查找</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conda search （关键字）</pre></td></tr></table></figure><p>安装包</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 安装到当前环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda install <span class=\"token punctuation\">(</span>包名<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 安装到指定环境</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conda install <span class=\"token operator\">--</span>name <span class=\"token punctuation\">(</span>环境名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>包名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>安装包时，也会安装一些相关的包<br />\n当使用 conda install 无法进行安装时，可以使用 pip 进行安装。pip 只能安装到当前环境，如果要安装到其他环境，要先切换到目标环境。安装环境已有包时，会先卸载环境里的包，再安装指定的包<br />\n还不行就换源</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install 包名 <span class=\"token operator\">-</span>i http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>douban<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>simple <span class=\"token operator\">--</span>trusted<span class=\"token operator\">-</span>host pypi<span class=\"token punctuation\">.</span>douban<span class=\"token punctuation\">.</span>com</pre></td></tr></table></figure><p>更新包</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 更新指定包（多个包时用空格隔开）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda update <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>package_name<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conda upgrade <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>package_name<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 更新全部包</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>conda update <span class=\"token operator\">--</span>all</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>conda upgrade <span class=\"token operator\">--</span>all</pre></td></tr></table></figure>",
            "tags": [
                "人工智能"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/",
            "url": "https://jihaipeng123.github.io/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/",
            "title": "人工智能导论",
            "date_published": "2023-09-26T06:08:02.000Z",
            "content_html": "<h1 id=\"机器学习\"><a class=\"anchor\" href=\"#机器学习\">#</a> 机器学习</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>机器学习是一门<strong>多领域交叉学科</strong>，涉及<strong>概率论</strong>、<strong>统计学</strong>、逼近论、凸分析、算法复杂度理论等多门学科。它通过专门研究计算机怎样模拟或实现人类的学习行为，以<strong>获取</strong>新的<strong>知识</strong>或<strong>技能</strong>，还凭借重新组织已有的知识结构来不断改善自身的性能。</p>\n<p>近十年来人工智能越来越热门，在我们的日常学习中，我们经常听到一大堆专有名词，像<strong>人工智能</strong>，<strong>机器学习</strong>，<strong>监督学习</strong>，<strong>非监督学习</strong>，<strong>深度学习</strong>，<strong>强化学习</strong>这些， 那它们之间存在什么样的关系呢？</p>\n<p>其中，<strong>强化学习</strong>（Reinforcement Learning, RL），又称再励学习、评价学习或增强学习，用于描述和解决<strong>智能体（agent）在与环境的</strong>交互过程中通过学习策略以达成回报最大化或实现特定目标的问题。</p>\n<p>目标：解决预测<strong>和</strong>分类等问题。</p>\n<h2 id=\"机器学习方法\"><a class=\"anchor\" href=\"#机器学习方法\">#</a> 机器学习方法</h2>\n<p>机器学习实际上包含很多数学方法，会涉及到<strong>统计学</strong>、<strong>概率论</strong>、<strong>信息论</strong>等知识。 目标是：利用已知的数据，创建一个数学模型，并最终利用该模型进行预测。</p>\n<p>如上图，采用大量<strong>历史（训练）数据</strong>进行训练， 获取到一个<strong>经验推理</strong>模型。预测就是应用训练出来的模型，来解决一个未知的问题。</p>\n<p>数据是否有效，关系到训练最终的模型质量。</p>\n<p>训练方法是否有效，同样关系到训练最终的模型质量。</p>\n<h2 id=\"机器学习的步骤\"><a class=\"anchor\" href=\"#机器学习的步骤\">#</a> 机器学习的步骤</h2>\n<p>​            1.       确定与问题相关的数据（<strong>明确输入和输出、均为可观测数据</strong>）</p>\n<p>​            2.       收集数据、并预处理（<strong>数据准备，适用于学习和训练的形式</strong>）</p>\n<p>​            3.       分析预测结果的类型（<strong>分类，回归<strong><strong> à</strong></strong> 是预测温度值，还是判断属于某类</strong>）</p>\n<p>​            4.       根据预测结果的类型，找到<strong>输入</strong>和<strong>输出</strong>之间的逻辑关系（黑盒），确定合适的模型或算法。</p>\n<p>​            5.       用这个算法（<strong>模型</strong>）去解决新的问题（<strong>未知数据<strong><strong> à</strong></strong> 同类问题预测</strong>）</p>\n<h2 id=\"机器学习的常用术语\"><a class=\"anchor\" href=\"#机器学习的常用术语\">#</a> 机器学习的常用术语</h2>\n<p>特征（feature）à 模型的<strong>输入</strong> à 比拟函数中的<strong>自变量</strong></p>\n<p>标记（label） à 模型的期望<strong>输出</strong>（非预测值）à 比拟函数中的<strong>因变量</strong></p>\n<p>例如，最简单的线性方程预测模型：<em>f</em> (x) = mx + b ，其中 x 是特征 **（feature, 自变量），是函数（模型）的输入数据，<strong>f (x) 是预测输出</strong>的结果（因变量），其目标是尽量与 ** 标记值 y 相同或相近。</p>\n<p>我们的目标就是获取<em> f</em> (x) 的具体形式，也就是模型中的参数 m 和 b。例如：农业中的测产，不同情况的变量，造成农作物的产量和品质的变化。其目标是<strong>学习规律，进行调控</strong>。</p>\n<h2 id=\"分类和回归\"><a class=\"anchor\" href=\"#分类和回归\">#</a> 分类和回归</h2>\n<p>机器学习的主要任务便是聚焦于两个问题：分类和回归。</p>\n<p>回归问题： regression, 数据通常是连续的。</p>\n<p>​                ●  根据车的品牌，车龄，型号，预测车的价值</p>\n<p>​                ●  根据每天卡路里摄入以及运动量，预测一周后的体重</p>\n<p>​                ●  基于树的直径，预测树的年龄</p>\n<p>分类问题：classification, 数据结果往往是离散的</p>\n<p>​                ●  根据影像学资料，判断是否患有某种疾病</p>\n<p>​                ●  根据 email 内容，判断是否为垃圾邮件</p>\n<h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<ol>\n<li>训练模型的输入输出，就是自变量和因变量， 对应 feature 和 predict（理想状况下 predict==label）。</li>\n<li>训练和测试的数据集必须是规范，格式统一的，方便计算机处理。</li>\n<li><strong>分类</strong>的数目必须是有限个。例如，最常见的二分类问题。属于定性问题。</li>\n</ol>\n<p><strong>回归</strong>问题，目标是寻找最优拟合的连续曲线，属于定量问题。</p>\n<ol start=\"4\">\n<li>训练的核心就是从数据的 feature 和 label 间寻找<strong>联系</strong>，可能有无数种的算法（模型）， 每种算法都有自己的优缺点（根据场景选择合适的）。</li>\n<li>根据预测（predict）的情况，我们可能需要重新<strong>调整算法</strong>和<strong>模型</strong>（<strong>炼丹师</strong>）。</li>\n</ol>\n<h1 id=\"环境安装\"><a class=\"anchor\" href=\"#环境安装\">#</a> 环境安装</h1>\n<p>任务：搭建 python 环境，安装神经网络框架（平台工具）以及要使用的功能模块库等等。</p>\n<h2 id=\"安装conda虚拟环境\"><a class=\"anchor\" href=\"#安装conda虚拟环境\">#</a> 安装 Conda 虚拟环境</h2>\n<p>​            1.      Anaconda 的安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tLyVFRiVCQyU4QyVFNSVBRSU4QyVFNiU4OCU5MCVFNSU5MCU4RSVFNSU5QyVBOCVFMiU4MCU5Q0FuYWNvbmRh\">https://www.anaconda.com/，完成后在 “Anaconda</span> prompt” 中，采用命令行去创建虚拟环境。</p>\n<p>​            2.     创建虚拟环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create <span class=\"token operator\">-</span>n py38 python<span class=\"token operator\">=</span><span class=\"token number\">3.8</span></pre></td></tr></table></figure><p>​            3.      然后激活当前环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda activate py38</pre></td></tr></table></figure><p>​            4.      查看当前虚拟环境中已安装内容</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda list</pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p>查看当前已有的虚拟环境</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda env list</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"pip更换国内镜像\"><a class=\"anchor\" href=\"#pip更换国内镜像\">#</a> pip 更换国内镜像</h2>\n<p>1. 方法一、临时使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple some<span class=\"token operator\">-</span><span class=\"token keyword\">package</span> 包名</pre></td></tr></table></figure><ol start=\"2\">\n<li>windows 下 pip 更换国内源的方法</li>\n</ol>\n<p>打开我的电脑，在地址栏中输入 % APPDATA% 按回车跳转到目标目录。在目录下创建一个 pip 文件夹，并在其中创建一个 pip.ini 文件。输入以下信息（不用 window 自带的记事本，建议采 notepad++）</p>\n<p>文件内容为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>global<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>timeout <span class=\"token operator\">=</span> <span class=\"token number\">6000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>index<span class=\"token operator\">-</span>url <span class=\"token operator\">=</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirrors<span class=\"token punctuation\">.</span>aliyun<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>pypi<span class=\"token operator\">/</span>simple<span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>trusted<span class=\"token operator\">-</span>host <span class=\"token operator\">=</span> mirrors<span class=\"token punctuation\">.</span>aliyun<span class=\"token punctuation\">.</span>come</pre></td></tr></table></figure><h2 id=\"安装神经网络框架平台\"><a class=\"anchor\" href=\"#安装神经网络框架平台\">#</a> 安装神经网络框架（平台）</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1QeVRvcmNoUHlUb3JjaC1ydDl6djQ2MmFtajVhZzAwY2lwMWIub3Jn\">访问 PyTorch 的官网 PyTorch.org</span> 按照官网提示选择对应的版本进行安装。</p>\n<p>需注意的是：如果你的电脑支持 CUDA 并且显存大于 2G，可以安装 CUDA 版本，在神经网络的训练过程中效率会高一点。安装 Cuda 驱动的版本是 cuda11， 所以上面选择的也是 11。</p>\n<p>如果电脑显卡不支持 cuda, 那还可以安装 CPU 版本</p>\n<p><img data-src=\"../pictures/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/image-20230926154821497.png\" alt=\"image-20230926154821497\" /></p>\n<h2 id=\"安装jupyter-notebook\"><a class=\"anchor\" href=\"#安装jupyter-notebook\">#</a> 安装 jupyter notebook</h2>\n<p>Jupyter Notebook 是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkMlOTYlRTclQTglOEIlRTglQUYlQUQlRTglQTglODAvOTg0NTEzMT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">编程语言</span>。</p>\n<p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享程序文档，支持实时代码，数学方程，可视化和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9tYXJrZG93bi8zMjQ1ODI5P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">markdown</span>。 用途包括：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTYlQjglODUlRTclOTAlODYvMTA5NzI0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">数据清理</span>和转换，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODAlQkMlRTYlQTglQTElRTYlOEIlOUYvODMwMTU4Mz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">数值模拟</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkIlOUYlRTglQUUlQTElRTUlQkIlQkElRTYlQTglQTEvMjY3NjA5P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">统计建模</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlQkElRTUlOTklQTglRTUlQUQlQTYlRTQlQjklQTAvMjE3NTk5P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">机器学习</span>等</p>\n<p>即 Jupyter Notebook 中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。这些文档是保存为后缀名为 **.ipynb** 的 JSON 格式文件，不仅便于版本控制，也方便与他人共享。此外，文档还可以导出为：HTML、LaTeX、PDF 等格式。</p>\n<p>下面的命令用于安装 jupyter notebook：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install jupyter </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip install <span class=\"token operator\">--</span>upgrade notebook<span class=\"token operator\">==</span><span class=\"token number\">6.4</span><span class=\"token number\">.12</span></pre></td></tr></table></figure><p>安装 jupyter notebook 的提示功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install jupyter_contrib_nbextensions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jupyter contrib nbextension install <span class=\"token operator\">--</span>user</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pip install <span class=\"token operator\">--</span>user jupyter_nbextensions_configurator</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jupyter nbextensions_configurator enable <span class=\"token operator\">--</span>user</pre></td></tr></table></figure><p>启动 jupyter</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jupyter notebook</pre></td></tr></table></figure>",
            "tags": [
                "人工智能"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "url": "https://jihaipeng123.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "title": "博客搭建",
            "date_published": "2023-09-26T01:34:01.000Z",
            "content_html": "<h1 id=\"安装nodejs\"><a class=\"anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h1>\n<ol>\n<li>进入官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2Fk\">Download | Node.js (nodejs.org)</span></li>\n<li>点击下载好的文件进行安装 node.js</li>\n</ol>\n<p>注意：选 windows 版本，使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p>\n<h1 id=\"安装git\"><a class=\"anchor\" href=\"#安装git\">#</a> 安装 Git</h1>\n<p>进入 Git 淘宝镜像:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tL2JpbmFyeS5odG1sP3BhdGg9Z2l0LWZvci13aW5kb3dzLw==\">CNPM Binaries Mirror (npmmirror.com)</span><br />\n 滑到底部点击最后一个 (可能因为时间原因，看到本文时已经出现新版本，请选择最新版本)<br />\n 打开下载好的文件进行安装</p>\n<h1 id=\"初始化站点\"><a class=\"anchor\" href=\"#初始化站点\">#</a> 初始化站点</h1>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token operator\">-</span>g hexo<span class=\"token operator\">-</span>cli</pre></td></tr></table></figure><p><strong>到这里，Hexo 就已经完全安装成功了！我们来测试一下 hexo.</strong></p>\n<ol>\n<li>不出意外的话，你现在的电脑在任意一个文件夹，选择右键，可以看到一个 Git Bash Here.</li>\n<li>点击它！</li>\n<li>然后在弹出来的框框里面输入  <code>hexo -version</code>  , 即为安装成功</li>\n</ol>\n<h1 id=\"初始化-hexo-模板\"><a class=\"anchor\" href=\"#初始化-hexo-模板\">#</a> 初始化 hexo 模板</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init </pre></td></tr><tr><td data-num=\"2\"></td><td><pre># 此条命令执行后<span class=\"token punctuation\">,</span>可以看到很多文件夹<span class=\"token punctuation\">.</span>说明安装成功</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install </pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 此条命令即为安装上一步缺少的库<span class=\"token punctuation\">,</span>大家在上一个命令执行之后 直接执行即可</pre></td></tr></table></figure><h2 id=\"各个目录简介\"><a class=\"anchor\" href=\"#各个目录简介\">#</a> 各个目录简介</h2>\n<pre><code>source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n\nthemes\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n\n_config.yml\n网站的 配置 信息，您可以在此配置大部分的参数。\n\npackage.json\n应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。\n</code></pre>\n<h1 id=\"解锁预览功能\"><a class=\"anchor\" href=\"#解锁预览功能\">#</a> 解锁预览功能</h1>\n<p>已经完成基本的功能了，虽然主题还是默认的 landscape 主题，但此时我们已经可以预览网站文件了！</p>\n<p>请在 Git Bash Here 中输入以下内容</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 即为删除hexo的缓存<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>建议每次都要执行<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hexo clean的简写<span class=\"token punctuation\">)</span>清除缓存文件db<span class=\"token punctuation\">.</span>json和已生成的静态文件 <span class=\"token keyword\">public</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo cl</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>创建缓存文件 <span class=\"token punctuation\">(</span>即为hexo generate 的简写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr></table></figure><pre><code># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。(hexo server的简写)\nhexo s \n</code></pre>\n<p>不出意外的话，现在你已经可以访问 http://localhost:4000/ 看到刚刚创建的网站了.</p>\n<pre><code>上述命令还可以连起来写 hexo cl&amp;&amp;hexo g&amp;&amp;hexo s ,作为之后预览网站的快捷指令\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>为生成静态网页文件<span class=\"token punctuation\">,</span>此命令执行后会生成<span class=\"token keyword\">public</span>文件夹<span class=\"token punctuation\">,</span>其中的文件就是网站所产生的静态网页文件<span class=\"token punctuation\">,</span>部署网站</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo d</pre></td></tr></table></figure><h1 id=\"github创建个人仓库\"><a class=\"anchor\" href=\"#github创建个人仓库\">#</a> GitHub 创建个人仓库</h1>\n<p>首先，你先要有一个 GitHub 账户，去注册一个。注册完登录后，在 GitHub.com 中看到一个 New repository，新建仓库</p>\n<p>创建一个和你用户名相同的仓库，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS15ZnIxNmFuMTlsLmdpdGh1Yi5pbw==\">后面加.github.io</span>，只有这样，将来要部署到 GitHub page 的时候，才会被识别，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS14eHh4LTRtNWYzNTRldjVwLmdpdGh1Yi5pbw==\">也就是 xxxx.github.io</span>，其中 xxx 就是你注册 GitHub 的用户名。</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927141148282.png\" alt=\"image-20230927141148282\" /></p>\n<h1 id=\"生成ssh添加到github\"><a class=\"anchor\" href=\"#生成ssh添加到github\">#</a> 生成 SSH 添加到 GitHub</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"yourname\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"youremail\"</span></pre></td></tr></table></figure><p>这里的 yourname 输入你的 GitHub 用户名，youremail 输入你 GitHub 的邮箱。这样 GitHub 才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config user<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config user<span class=\"token punctuation\">.</span>email</pre></td></tr></table></figure><p>然后创建 SSH, 一路回车.</p>\n<p>这个时候它会告诉你已经生成了.ssh 的文件夹。在你的电脑中找到这个文件夹。</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927141436968.png\" alt=\"image-20230927141436968\" /></p>\n<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa 是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub 是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。</p>\n<p>而后在 GitHub 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key,  把你的 id_rsa.pub 里面的信息复制进去。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在gitbash中，查看是否成功</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssh <span class=\"token operator\">-</span><span class=\"token class-name\">T</span> git<span class=\"token annotation punctuation\">@github.com</span></pre></td></tr></table></figure><h1 id=\"将hexo部署到github\"><a class=\"anchor\" href=\"#将hexo部署到github\">#</a> 将 hexo 部署到 GitHub</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deploy<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type<span class=\"token operator\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  repo<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">YourgithubName</span><span class=\"token operator\">/</span><span class=\"token class-name\">YourgithubName</span><span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  branch<span class=\"token operator\">:</span> main</pre></td></tr></table></figure><p>这个时候需要先安装 deploy-git ，也就是部署的命令，这样你才能用命令部署到 GitHub。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>deployer<span class=\"token operator\">-</span>git <span class=\"token operator\">--</span>save</pre></td></tr></table></figure><p>其中 hexo clean 清除了你之前生成的东西，也可以不加。<br />\nhexo generate 顾名思义，生成静态文章，可以用 hexo g 缩写<br />\n hexo deploy 部署文章，可以用 hexo d 缩写</p>\n<p>注意 deploy 时可能要你输入 username 和 password。</p>\n<p>过一会儿就可以在 http://yourname.github.io 这个网站看到你的博客了</p>\n<h1 id=\"设置个人域名\"><a class=\"anchor\" href=\"#设置个人域名\">#</a> 设置个人域名</h1>\n<p>现在你的个人网站的地址是 <span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJuYW1lLmdpdGh1Yi5pbw==\">yourname.github.io</span>，如果觉得这个网址强度不太够，这就需要你设置个人域名了。</p>\n<p>注册一个阿里云账户，在阿里云上买一个域名，可以买 xxx.top，或者 cn，比如最广泛的.com 就比较贵，看个人喜好咯。</p>\n<p>你需要先去进行实名认证，然后在域名控制台中，看到你购买的域名。</p>\n<p>点解析进去，添加解析。</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927142924937.png\" alt=\"image-20230927142924937\" /></p>\n<p>其中，192.30.252.153 和 192.30.252.154 是 GitHub 的服务器地址。<br />\n<strong>注意，解析线路选择默认</strong>，不要选境外。这个境外是后面来做国内外分流用的，。记得现在选择<strong>默认</strong>！！</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927143025929.png\" alt=\"image-20230927143025929\" /></p>\n<p>登录 GitHub，进入之前创建的仓库，点击 settings，设置 Custom domain，输入你的域名 xxx.top</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927143106583.png\" alt=\"image-20230927143106583\" /></p>\n<p>然后在你的博客文件 source 中创建一个名为 CNAME 文件，不要后缀。只写上你的域名。</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927143226900.png\" alt=\"image-20230927143226900\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>\n<h1 id=\"编写文章\"><a class=\"anchor\" href=\"#编写文章\">#</a> 编写文章</h1>\n<ul>\n<li>命令: hexo new  &quot;文章的标题&quot;</li>\n<li>然后全部的文章文件将位于  <code>\\source\\posts</code>  文件夹下</li>\n<li>请使用 md 文件编辑器进行编辑</li>\n</ul>\n<h1 id=\"设置主题\"><a class=\"anchor\" href=\"#设置主题\">#</a> 设置主题</h1>\n<h2 id=\"hexo基本配置\"><a class=\"anchor\" href=\"#hexo基本配置\">#</a> hexo 基本配置</h2>\n<p>在文件根目录下的 <code>_config.yml</code> ，就是整个 hexo 框架的配置文件了。可以在里面修改大部分的配置。详细可参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==\">官方的配置</span>描述</p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927143751226.png\" alt=\"image-20230927143751226\" /></p>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927143813675.png\" alt=\"image-20230927143813675\" /></p>\n<p>在这里，你需要把 <code>url</code>  改成你的网站域名。</p>\n<p>theme 就是选择主题，也就是在 <code>theme</code>  这个文件夹下，默认给你安装的是 <code>lanscape</code>  这个主题。更换主题时，在 hexo 官网上下载，把主题的文件放在 theme 文件夹下，再修改这个参数就可以了。</p>\n<p>直接在 github 链接上下载下来，然后放到 theme 件夹下就行了，然后再在刚才说的配置文件中把 theme` 换成那个主题文件夹的名字。</p>\n<h2 id=\"主题设置\"><a class=\"anchor\" href=\"#主题设置\">#</a> 主题设置</h2>\n<p>详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\"> Step.2 基本配置 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka = 優萌初華 = 有夢書架 (lostyu.me)</span></p>\n<h2 id=\"menu菜单栏\"><a class=\"anchor\" href=\"#menu菜单栏\">#</a> menu（菜单栏）</h2>\n<p><img data-src=\"../pictures/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20230927144517891.png\" alt=\"image-20230927144517891\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>其中，<span class=\"token class-name\">About</span>这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo <span class=\"token keyword\">new</span> page about</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它就会在根目录下source文件夹中新建了一个about文件夹，以及index<span class=\"token punctuation\">.</span>md，在index<span class=\"token punctuation\">.</span>md中写上你想要写的东西，就可以在网站上展示出来</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果你想要自己再自定义一个菜单栏的选项，那么就</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo <span class=\"token keyword\">new</span> page yourdiy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>然后在主题配置文件的menu菜单栏添加一个 <span class=\"token class-name\">Yourdiy</span> <span class=\"token operator\">:</span> <span class=\"token operator\">/</span>yourdiy，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在languages文件夹中，找到zh<span class=\"token operator\">-</span><span class=\"token constant\">CN</span><span class=\"token punctuation\">.</span>yml，在index中添加yourdiy<span class=\"token operator\">:</span> <span class=\"token char\">'中文意思'</span>就可以显示中文了。</pre></td></tr></table></figure><h2 id=\"customize定制\"><a class=\"anchor\" href=\"#customize定制\">#</a> customize (定制)</h2>\n<p>在这里可以修改你的个人 logo，默认是那个 hueman，在 source/css/images 文件夹中放入自己要的 logo，再改一下 url 的链接名字就可以了。</p>\n<p>favicon 是网站中出现的那个小图标的 icon，找一张你喜欢的 logo，然后转换成 ico 格式，放在 images 文件夹下，配置一下路径就行。</p>\n<p>social_links ，可以显示你的社交链接，而且是有 logo 的。<strong>tips:</strong></p>\n<p>在这里可以添加一个 rss 功能，也就是那个符号像 wifi 一样的东西。</p>\n<p>注意：本篇摘自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM3NzgxMzA0L2FydGljbGUvZGV0YWlscy84MjcyOTAyOT9vcHNfcmVxdWVzdF9taXNjPSU3QiUyMnJlcXVlc3QlNUZpZCUyMiUzQSUyMjE2OTU3OTQ5MTkxNjgwMDE4NTg0Nzg5NiUyMiUyQyUyMnNjbSUyMiUzQSUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTIyJTdEJmFtcDtyZXF1ZXN0X2lkPTE2OTU3OTQ5MTkxNjgwMDE4NTg0Nzg5NiZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnRvcF9wb3NpdGl2ZX5kZWZhdWx0LTEtODI3MjkwMjktbnVsbC1udWxsLjE0MiU1RXY5NCU1RWluc2VydF9kb3duMSZhbXA7dXRtX3Rlcm09aGV4byVFNiU5MCVBRCVFNSVCQiVCQSVFNCVCOCVBQSVFNCVCQSVCQSVFNSU4RCU5QSVFNSVBRSVBMiZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\"> hexo 史上最全搭建教程 - CSDN 博客</span></p>\n",
            "tags": [
                "博客",
                "博客"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/",
            "url": "https://jihaipeng123.github.io/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/",
            "title": "算法题解",
            "date_published": "2023-09-25T11:22:45.000Z",
            "content_html": "<h1 id=\"dfs1\"><a class=\"anchor\" href=\"#dfs1\">#</a> dfs1</h1>\n<p>给定 n 个整数，要求选出 K 个数，使得选出来的 K 个数的和为 sum; 求一下有多少种情况；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//n 代表一共多少个数，k 代表需要选的的数个数，sum 代表当前累加的数，ans 表示有多少种情况</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//cnt 当前累加的个数； s = 当前累加的数之和</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> k <span class=\"token operator\">&amp;&amp;</span> s <span class=\"token operator\">==</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k <span class=\"token operator\">>></span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bool xuan<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> sum <span class=\"token operator\">&amp;&amp;</span> cnt <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xuan<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            xuan<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            xuan<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k <span class=\"token operator\">>></span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二种会显示 12，因为组合 2，3，5 和 3，2，5 和 5，3，2 等当成了不同方法。等待优化</p>\n<p>从 0 到 29 这 30 个数中选出 8 个数，使其和值为 200；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> n <span class=\"token operator\">&amp;&amp;</span> cnt <span class=\"token operator\">==</span> k <span class=\"token operator\">&amp;&amp;</span> s <span class=\"token operator\">==</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tn <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tk <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tsum <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"dfs2\"><a class=\"anchor\" href=\"#dfs2\">#</a> dfs2</h1>\n<p>输入整数 n, 表示木棍数量 (3 &lt; n &lt;= 10)，接下来输入 n 根木棍的长度 pi (1 &lt; pi &lt; 10000), 看是否能装出等边三角形。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bool f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        f <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">=</span> sum<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        sum <span class=\"token operator\">+=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"nono\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"yesyes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"nono\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>memset(dp,0,sizeof(dp))\n</code></pre>\n",
            "tags": [
                "算法题库"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/",
            "url": "https://jihaipeng123.github.io/%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/",
            "title": "算法小结",
            "date_published": "2023-09-17T09:36:58.000Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include<span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> pp <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 等于 pi, 对精度要求高的题目有用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%0.10lf\"</span><span class=\"token punctuation\">,</span> pp<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"../pictures/%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/image-20230917194058604.png\" alt=\"image-20230917194058604\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cin<span class=\"token operator\">>></span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2000 年的 1 月 1 日，是那一年的第 1 天。<br />\n那么，2000 年的 5 月 4 日，是那一年的第几天？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">365</span><span class=\"token punctuation\">,</span><span class=\"token number\">366</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bool <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">,</span> dd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin <span class=\"token operator\">>></span> yy <span class=\"token operator\">>></span> mm <span class=\"token operator\">>></span> dd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> yy<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> sum <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mm<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tsum <span class=\"token operator\">+=</span> dd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h4>\n<p>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0）<br />\n在 1 到 40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。<br />\n请问，在 1 到 n 中，所有这样的数的和是多少？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tres <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">==</span> <span class=\"token number\">9</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tsum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tnum <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"回文日期\"><a class=\"anchor\" href=\"#回文日期\">#</a> 回文日期</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">20110101</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">20111231</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>不能枚举日期然后进行判断，这样跟写一个日历似的，太复杂</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>枚举所有年份，然后把它翻过来扩充成一个“日期”，然后看这个得到的“日期”是不是一个正常的日期格式，然后在看看是不是符合输入给的范围</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> check函数来判断这个日期是不是一个正常的日期格式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>一个数除几个<span class=\"token number\">0</span>，就是忽略掉这个数后面的几位</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>一个数mod几个<span class=\"token number\">0</span>，就是拿到这个数后面的几位</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>cstring<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bool <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> date <span class=\"token operator\">/</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> mouth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> date <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mouth <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> mouth <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> mouth <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> day <span class=\"token operator\">></span> days<span class=\"token punctuation\">[</span>mouth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mouth <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> leap <span class=\"token operator\">=</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>day <span class=\"token operator\">></span> days<span class=\"token punctuation\">[</span>mouth<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> leap<span class=\"token punctuation\">)</span>   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> date1<span class=\"token punctuation\">,</span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cin <span class=\"token operator\">>></span> date1 <span class=\"token operator\">>></span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> date <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    date <span class=\"token operator\">=</span> date <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>date1 <span class=\"token operator\">&lt;=</span> date <span class=\"token operator\">&amp;&amp;</span> date <span class=\"token operator\">&lt;=</span> date2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   res <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><div class=\"links\"><div class=\"item\" title=\"me\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU4MzY3NTg2L2FydGljbGUvZGV0YWlscy8xMjM5ODUzNTc/b3BzX3JlcXVlc3RfbWlzYz0lN0IlMjJyZXF1ZXN0JTVGaWQlMjIlM0ElMjIxNjk0OTUxOTA3MTY4MDAxODU4MTUzNTElMjIlMkMlMjJzY20lMjIlM0ElMjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyMiU3RCZyZXF1ZXN0X2lkPTE2OTQ5NTE5MDcxNjgwMDE4NTgxNTM1MSZiaXpfaWQ9MCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTEyMzk4NTM1Ny1udWxsLW51bGwuMTQy\" data-background-image=\"https://jihaipeng123.github.io/images/image-main/image(50).jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU4MzY3NTg2L2FydGljbGUvZGV0YWlscy8xMjM5ODUzNTc/b3BzX3JlcXVlc3RfbWlzYz0lN0IlMjJyZXF1ZXN0JTVGaWQlMjIlM0ElMjIxNjk0OTUxOTA3MTY4MDAxODU4MTUzNTElMjIlMkMlMjJzY20lMjIlM0ElMjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyMiU3RCZyZXF1ZXN0X2lkPTE2OTQ5NTE5MDcxNjgwMDE4NTgxNTM1MSZiaXpfaWQ9MCZ1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTEyMzk4NTM1Ny1udWxsLW51bGwuMTQy\">刷题</span>\n          <p class=\"desc\">123</p>\n          </div></div></div></p>\n",
            "tags": [
                "算法题库",
                "算法"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/6-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/",
            "url": "https://jihaipeng123.github.io/6-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/",
            "title": "6.Linux数据库远程连接",
            "date_published": "2023-09-15T08:39:53.000Z",
            "content_html": "<p>主要针对 CentOS7 系统安装 mysql 进行全面讲解与步骤解析</p>\n<h1 id=\"特别强调\"><a class=\"anchor\" href=\"#特别强调\">#</a> 特别强调</h1>\n<p>1. 此方法适合 OS7 以上版本，7 以下的就别费劲了<br />\n 2. 保证你的网络是通的，如果因为 dns 解析 等网络问题，自行百度解决<br />\n 3. 以前装过 mysql 的最好卸载干净，不然会有冲突</p>\n<h1 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h1>\n<p>先清空以前安装 mysql 数据残留</p>\n<p>一、检查是否安装了 Mysql</p>\n<p>Yum 检查</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum list installed <span class=\"token operator\">|</span> grep mysql</pre></td></tr></table></figure><p>直接删除</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove mysql<span class=\"token operator\">-</span>community<span class=\"token operator\">-</span>client<span class=\"token punctuation\">.</span>x86_64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum remove mysql mysql<span class=\"token operator\">-</span>server mysql<span class=\"token operator\">-</span>libs compat<span class=\"token operator\">-</span>mysql</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum remove mysql<span class=\"token operator\">-</span>community<span class=\"token operator\">-</span>release</pre></td></tr></table></figure><p><img data-src=\"../pictures/5-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20230915164830155.png\" alt=\"image-20230915164830155\" /></p>\n<p>rpm 检查：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rpm <span class=\"token operator\">-</span>qa <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>i mysql</pre></td></tr></table></figure><p><img data-src=\"../pictures/5-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20230915164937638.png\" alt=\"image-20230915164937638\" /></p>\n<p>二、口令查找 Mysql 的安装目录和残存文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>whereis mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>find <span class=\"token operator\">/</span> <span class=\"token operator\">-</span>name mysql</pre></td></tr></table></figure><p>找到后，全部 rm -rf 删除，如果提示此为目录文件 则使用命令 rm -r<br />\n 会有提示就输入 y 一个个删</p>\n<p>删除<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1teXNxbCVFOSU4NSU4RCVFNyVCRCVBRSVFNiU5NiU4NyVFNCVCQiVCNiZhbXA7c3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\"> mysql 配置文件</span>：<br />\n一般在 /etc/my.cnf 有就直接删除则可</p>\n<p>最后重复上面步骤 检查，直到彻底删除干净为准</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>查看安装过程</p>\n<h1 id=\"配置远程登录\"><a class=\"anchor\" href=\"#配置远程登录\">#</a> 配置远程登录</h1>\n<p>开启远程访问权限</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> grant all privileges on <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>* <span class=\"token keyword\">to</span> <span class=\"token namespace\">root</span>@<span class=\"token char\">'%'</span> identified by 'hspedu100'<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysql<span class=\"token operator\">></span> flush privileges<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至此 算是安装完毕，如果有问题 就重启 mysql ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart mysqld</pre></td></tr></table></figure><p>如果还有问题，检查前面是否删除干净，重装一遍</p>\n<h1 id=\"远程访问\"><a class=\"anchor\" href=\"#远程访问\">#</a> 远程访问</h1>\n<p>设置 远程访问的问题了，大部分都是因为防火墙导致；</p>\n<p><img data-src=\"../pictures/5-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20230915165611859.png\" alt=\"image-20230915165611859\" /></p>\n<p>步骤：开启 mysql 权限 -&gt; 关闭 linux 防火墙 -&gt; 关闭 windows 防火墙</p>\n<h1 id=\"关闭-linux防火墙\"><a class=\"anchor\" href=\"#关闭-linux防火墙\">#</a> 关闭 linux 防火墙</h1>\n<p>1. 在 CentOS7 中关闭防火墙使用以下命令，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 临时关闭</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl stop firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 禁止开机启动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl disable firewalld</pre></td></tr></table></figure><p>如果安装了 iptables-service，也可以使用下面的命令</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum install <span class=\"token operator\">-</span>y iptables<span class=\"token operator\">-</span>services</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 关闭防火墙</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>service iptables stop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 检查防火墙状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>service iptables status</pre></td></tr></table></figure><h1 id=\"关闭windows-防火墙\"><a class=\"anchor\" href=\"#关闭windows-防火墙\">#</a> 关闭 windows 防火墙</h1>\n<p>控制面板 -&gt; 系统和安全 -&gt; 防火墙 -&gt; 启用或关闭 Windows 防火墙 -&gt; 将两个选项设置为关闭</p>\n<p><img data-src=\"../pictures/5-Linux%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20230915170257437.png\" alt=\"image-20230915170257437\" /></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/",
            "url": "https://jihaipeng123.github.io/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/",
            "title": "1.数据库基础",
            "date_published": "2023-09-09T06:13:22.000Z",
            "content_html": "<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230909142044884.png\" alt=\"image-20230909142044884\" /></p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230909142206476.png\" alt=\"image-20230909142206476\" /></p>\n<h1 id=\"表操作\"><a class=\"anchor\" href=\"#表操作\">#</a> 表操作</h1>\n<h2 id=\"查询创建\"><a class=\"anchor\" href=\"#查询创建\">#</a> 查询创建</h2>\n<p>查询当前数据库所有表</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use itcast<span class=\"token punctuation\">;</span>     <span class=\"token operator\">--</span>进入数据库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>show tables<span class=\"token punctuation\">;</span>    <span class=\"token operator\">--</span>查询表</pre></td></tr></table></figure><p>查看指定表结构</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>desc 表名；</pre></td></tr></table></figure><p>查询指定表的建表语句</p>\n<pre><code class=\"language-java1\">show create table 表名；\n</code></pre>\n<p>创建表结构</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> 表名<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t字段<span class=\"token number\">1</span> 字段<span class=\"token number\">1</span>类型 <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 字段<span class=\"token number\">1</span>注释 <span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t字段<span class=\"token number\">2</span> 字段<span class=\"token number\">2</span>类型 <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 字段<span class=\"token number\">2</span>注释 <span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字段<span class=\"token number\">3</span> 字段<span class=\"token number\">3</span>类型 <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 字段<span class=\"token number\">3</span>注释 <span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t字段n 字段n类型 <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span>字段注释 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 表注释 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"数值类型\"><a class=\"anchor\" href=\"#数值类型\">#</a> 数值类型</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917145828380.png\" alt=\"image-20230917145828380\" /></p>\n<h2 id=\"字符串类型\"><a class=\"anchor\" href=\"#字符串类型\">#</a> 字符串类型</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917150426550.png\" alt=\"image-20230917150426550\" /></p>\n<h2 id=\"日期时间类型\"><a class=\"anchor\" href=\"#日期时间类型\">#</a> 日期时间类型</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917150519694.png\" alt=\"image-20230917150519694\" /></p>\n<h1 id=\"图形化界面工具\"><a class=\"anchor\" href=\"#图形化界面工具\">#</a> 图形化界面工具</h1>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917150745656.png\" alt=\"image-20230917150745656\" /></p>\n<h1 id=\"安装使用datagrip\"><a class=\"anchor\" href=\"#安装使用datagrip\">#</a> 安装使用 DataGrip</h1>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917150923398.png\" alt=\"image-20230917150923398\" /></p>\n<p>创建数据库</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>以下俩种方式都可以创建数据库：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>create database itcast<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>create schema itcast<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建表</p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917151335035.png\" alt=\"image-20230917151335035\" /></p>\n<p>在 DataGrip 中执行 SQL 语句</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在指定的数据库上，右键<span class=\"token class-name\">New</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">Query</span> <span class=\"token class-name\">Console</span></pre></td></tr></table></figure><h1 id=\"存储引擎\"><a class=\"anchor\" href=\"#存储引擎\">#</a> 存储引擎</h1>\n<h2 id=\"mysql体系结构\"><a class=\"anchor\" href=\"#mysql体系结构\">#</a> MySQL 体系结构</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917151925810.png\" alt=\"image-20230917151925810\" /></p>\n<p>1). 连接层<br />\n最上层是一些客户端和链接服务，包含本地 sock 通信和大多数基于客户端 / 服务端工具实现的类似于 TCP/IP 的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于 SSL 的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>\n<p>2). 服务层<br />\n第二层架构主要完成大多数的核心服务功能，如 SQL 接口，并完成缓存的查询，SQL 的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等，最后生成相应的执行操作。如果是 select 语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>\n<p>3). 引擎层<br />\n存储引擎层， 存储引擎真正的负责了 MySQL 中数据的存储和提取，服务器通过 API 和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库中的索引是在存储引擎层实现的。</p>\n<p>4). 存储层<br />\n数据存储层， 主要是将数据 (如: redolog、undolog、数据、索引、二进制日志、错误日志、查询日志、慢查询日志等) 存储在文件系统之上，并完成与存储引擎的交互。和其他数据库相比，MySQL 有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>\n<h2 id=\"存储引擎-2\"><a class=\"anchor\" href=\"#存储引擎-2\">#</a> 存储引擎</h2>\n<p>建表时指定存储引擎</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> 表名<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>字段<span class=\"token number\">1</span> 字段<span class=\"token number\">1</span>类型 <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 字段<span class=\"token number\">1</span>注释 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>字段n 字段n类型 <span class=\"token punctuation\">[</span><span class=\"token constant\">COMMENT</span> 字段n注释 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token constant\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token constant\">INNODB</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">COMMENT</span> 表注释 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查询当前数据库支持的存储引擎</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>show engines<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"存储引擎特点\"><a class=\"anchor\" href=\"#存储引擎特点\">#</a> 存储引擎特点</h1>\n<p>介绍三种存储引擎 InnoDB、MyISAM、Memory 的特点。</p>\n<h2 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> InnoDB</h2>\n<p>介绍</p>\n<p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 存储引擎。</p>\n<p>特点</p>\n<ul>\n<li>\n<p>DML 操作遵循 ACID 模型，支持事务；</p>\n</li>\n<li>\n<p>行级锁，提高并发访问性能；</p>\n</li>\n<li>\n<p>支持外键 FOREIGN KEY 约束，保证数据的完整性和正确性；</p>\n</li>\n</ul>\n<p>逻辑存储结构</p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917152928877.png\" alt=\"image-20230917152928877\" /></p>\n<p>表空间 : InnoDB 存储引擎逻辑结构的最高层，ibd 文件其实就是表空间文件，在表空间中可以包含多个 Segment 段。<br />\n段：表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB 中对于段的管理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。<br />\n区：区是表空间的单元结构，每个区的大小为 1M。 默认情况下， InnoDB 存储引擎页大小为 16K， 即一个区中一共有 64 个连续的页。<br />\n页：页是组成区的最小单元，页也是 InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。<br />\n行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时所指定的字段以外，还包含两个隐藏字段 (后面会详细介绍)。</p>\n<h2 id=\"myisam\"><a class=\"anchor\" href=\"#myisam\">#</a> MyISAM</h2>\n<p>介绍：<br />\nMyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>2). 特点<br />\n不支持事务，不支持外键<br />\n支持表锁，不支持行锁<br />\n访问速度快</p>\n<h2 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> Memory</h2>\n<p>emory 引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。<br />\n特点<br />\n内存存放<br />\n hash 索引（默认）<br />\n文件<br />\n xxx.sdi：存储表结构信息</p>\n<h2 id=\"区别和特点\"><a class=\"anchor\" href=\"#区别和特点\">#</a> 区别和特点</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917155711793.png\" alt=\"image-20230917155711793\" /></p>\n<h2 id=\"存储引擎选择\"><a class=\"anchor\" href=\"#存储引擎选择\">#</a> 存储引擎选择</h2>\n<p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。<br />\nInnoDB:</p>\n<p>是 Mysql 的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么 InnoDB 存储引擎是比较合适的选择。<br />\nMyISAM ：</p>\n<p>如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。<br />\nMEMORY：</p>\n<p>将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY 的缺陷就是<br />\n对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。</p>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>索引（index）是帮助 MySQL 高效获取数据的数据结构 (有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<p>优势：提高数据检索的效率，降低数据库 IO 成本；通过索引列对数据进行排序，降低数据排序的成本，降低 cpu 的消耗；</p>\n<p>劣势：索引列占用空间；降低更新表的速度，如对表进行 insert,update 时，效率降低</p>\n<h2 id=\"索引结构\"><a class=\"anchor\" href=\"#索引结构\">#</a> 索引结构</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917160404318.png\" alt=\"image-20230917160404318\" /></p>\n<p>二叉树</p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917160750413.png\" alt=\"image-20230917160750413\" /></p>\n<p>如果选择二叉树作为索引结构，会存在以下缺点：</p>\n<ul>\n<li>顺序插入时，会形成一个链表，查询性能大大降低。</li>\n<li>大数据量情况下，层级较深，检索速度慢。</li>\n</ul>\n<p>B-Tree</p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917161043612.png\" alt=\"image-20230917161043612\" /></p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917161110522.png\" alt=\"image-20230917161110522\" /></p>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能，利于排序。</p>\n<p>Hash</p>\n<p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。</p>\n<p>MySQL 中，支持 hash 索引的是 Memory 存储引擎。 而 InnoDB 中具有自适应 hash 功能，hash 索引是 InnoDB 存储引擎根据 B+Tree 索引在指定条件下自动构建的。</p>\n<h2 id=\"索引分类\"><a class=\"anchor\" href=\"#索引分类\">#</a> 索引分类</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917161342539.png\" alt=\"image-20230917161342539\" /></p>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917161417340.png\" alt=\"image-20230917161417340\" /></p>\n<h2 id=\"回表查询\"><a class=\"anchor\" href=\"#回表查询\">#</a> 回表查询</h2>\n<p><img data-src=\"../pictures/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/image-20230917161523916.png\" alt=\"image-20230917161523916\" /></p>\n<ul>\n<li>\n<p>如果存在主键，主键索引就是聚集索引。</p>\n</li>\n<li>\n<p>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</p>\n</li>\n<li>\n<p>如果表没有主键，或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引。</p>\n</li>\n</ul>\n<h2 id=\"索引语法\"><a class=\"anchor\" href=\"#索引语法\">#</a> 索引语法</h2>\n<p>创建索引</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">CREATE</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">UNIQUE</span> <span class=\"token operator\">|</span> <span class=\"token constant\">FULLTEXT</span> <span class=\"token punctuation\">]</span> <span class=\"token constant\">INDEX</span> index_name <span class=\"token class-name\">ON</span> table_name <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>index_col_name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查看索引</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">SHOW</span> <span class=\"token constant\">INDEX</span> <span class=\"token class-name\">FROM</span> table_name <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>删除索引</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">DROP</span> <span class=\"token constant\">INDEX</span> index_name <span class=\"token class-name\">ON</span> table_name <span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/5-%E7%BB%84-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/",
            "url": "https://jihaipeng123.github.io/5-%E7%BB%84-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/",
            "title": "5.组.权限管理",
            "date_published": "2023-09-08T02:03:58.000Z",
            "content_html": "<h1 id=\"linux组\"><a class=\"anchor\" href=\"#linux组\">#</a> Linux 组</h1>\n<p>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件有所有者、所在组、其它组的概念。</p>\n<p>1) 所有者</p>\n<p>2) 所在组</p>\n<p>3) 其它组</p>\n<p>4) 改变用户所在的组</p>\n<p><img data-src=\"../pictures/5-%E7%BB%84-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20230908100607586.png\" alt=\"image-20230908100607586\" /></p>\n<p>文件 / 目录所有者一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者。</p>\n<p>查看文件的所有者指令：ls – ahl</p>\n<p>修改文件所有者指令 ：chown 用户名  文件名</p>\n<p>应用案例要求：使用 root 创建一个文件 apple.txt，然后将其所有者修改成 tom;      chown  tom  apple.txt</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/",
            "url": "https://jihaipeng123.github.io/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/",
            "title": "4.Linux安装配置",
            "date_published": "2023-08-31T10:51:07.000Z",
            "content_html": "<p>Linux 之 JavaEE 定制篇 - 搭建 JavaEE 环境</p>\n<p><img data-src=\"../pictures/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831185412261.png\" alt=\"image-20230831185412261\" /></p>\n<h1 id=\"安装-jdk\"><a class=\"anchor\" href=\"#安装-jdk\">#</a> 安装 JDK</h1>\n<h2 id=\"安装步骤\"><a class=\"anchor\" href=\"#安装步骤\">#</a> 安装步骤</h2>\n<ol>\n<li>\n<p>在虚拟机上操作  mkdir /opt/jdk</p>\n</li>\n<li>\n<p>通过 xftp7 上传到 /opt/jdk 下</p>\n</li>\n<li>\n<p>cd /opt/jdk</p>\n</li>\n<li>\n<p>解压 tar -zxvf jdk-8u261-linux-x64.tar.gz</p>\n</li>\n<li>\n<p>mkdir /usr/local/java</p>\n</li>\n<li>\n<p>mv /opt/jdk/jdk1.8.0_261 /usr/local/java</p>\n</li>\n<li>\n<p>配置环境变量的配置文件 vim /etc/profile</p>\n<p>打开文件，找到最后加入下面俩句话 (保存)</p>\n</li>\n<li>\n<p>export JAVA_HOME=/usr/local/java/jdk1.8.0_261</p>\n</li>\n<li>\n<p>export PATH=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mi>A</mi><mi>V</mi><msub><mi>A</mi><mi>H</mi></msub><mi>O</mi><mi>M</mi><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">JAVA_HOME/bin:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span></span></span>PATH</p>\n</li>\n<li>\n<p>source /etc/profile 刷新环境变量，指令不可少。[让新的环境变量生效]</p>\n</li>\n</ol>\n<h2 id=\"测试安装\"><a class=\"anchor\" href=\"#测试安装\">#</a> 测试安装</h2>\n<p>编写一个简单的 Hello.java 输出 &quot;hello,world!&quot;</p>\n<ul>\n<li>vim Hello.java</li>\n<li>javac Hello.java</li>\n<li>java Hello</li>\n</ul>\n<h1 id=\"tomcat-的安装\"><a class=\"anchor\" href=\"#tomcat-的安装\">#</a> Tomcat 的安装</h1>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<ol>\n<li>\n<p>上传安装文件，并解压缩到 /opt/tomcat</p>\n</li>\n<li>\n<p>进入解压目录 /bin , 启动 tomcat 命令为   ./startup.sh</p>\n</li>\n<li>\n<p>开放端口 8080 , 执行命令：</p>\n<ul>\n<li>firewall -cmd --permanent --add-port=8080/tcp</li>\n<li>firewall -cmd --reload</li>\n</ul>\n<p>查看端口是否开放：firewall -cmd --query-port=8080/tcp</p>\n</li>\n</ol>\n<h2 id=\"测试安装-2\"><a class=\"anchor\" href=\"#测试安装-2\">#</a> 测试安装</h2>\n<p>在 windows、Linux 下 访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xpbnV4aXA6ODA4MA==\">http://linuxip:8080</span></p>\n<p><img data-src=\"../pictures/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831193911339.png\" alt=\"image-20230831193911339\" /></p>\n<ul>\n<li>在 Linux 的浏览器中：<span class=\"exturl\" data-url=\"aHR0cDovL2xpbnV4aXA6ODA4MC9oc3AuaHRtbA==\">http://linuxip:8080/hsp.html</span> 查看</li>\n</ul>\n<h1 id=\"idea-2020-的安装\"><a class=\"anchor\" href=\"#idea-2020-的安装\">#</a> idea 2020 的安装</h1>\n<h2 id=\"步骤-2\"><a class=\"anchor\" href=\"#步骤-2\">#</a> 步骤</h2>\n<p>（破解版真的香）</p>\n<ol>\n<li>下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2FkLyNzZWN0aW9uPXdpbmRvd3M=\">https://www.jetbrains.com/idea/download/#section=windows</span></li>\n<li>解压缩到 /opt/idea</li>\n<li>启动 idea bin 目录下 ./idea.sh，配置 jdk</li>\n<li>在 VM 下编写 Hello world 程序并测试成功！</li>\n</ol>\n<p><img data-src=\"../pictures/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831185652129.png\" alt=\"image-20230831185652129\" /></p>\n<h1 id=\"mysql57-的安装\"><a class=\"anchor\" href=\"#mysql57-的安装\">#</a> mysql5.7 的安装</h1>\n<ol>\n<li>\n<p>. 新建文件夹 /opt/mysql，并 cd 进去</p>\n</li>\n<li>\n<p>运行 wget <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5teXNxbC5jb20vZ2V0L215c3FsLTUuNy4yNi0xLmVsNy54ODZfNjQucnBtLWJ1bmRsZS50YXIlRUYlQkMlOEM=\">http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar，</span></p>\n<p>在 Linux 下直接获取并下载 mysql 安装包，开发中常用</p>\n</li>\n</ol>\n<p>PS：centos7.6 自带的类 mysql 数据库是 mariadb，会跟 mysql 冲突，要先删除。</p>\n<ol start=\"3\">\n<li>运行 tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</li>\n<li>运行 rpm -qa|grep mari，查询 mariadb 相关安装包<img data-src=\"../pictures/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831185919784.png\" alt=\"image-20230831185919784\" /></li>\n<li>运行 rpm -e --nodeps mariadb-libs，都卸载</li>\n<li>然后开始真正安装 mysql，依次运行以下几条</li>\n</ol>\n<p>rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm<br />\nrpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm<br />\nrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm<br />\nrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</p>\n<ol start=\"7\">\n<li>运行 systemctl start mysqld.service，启动 mysql</li>\n<li>然后开始设置 root 用户密码<img data-src=\"../pictures/4-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831185941731.png\" alt=\"image-20230831185941731\" /></li>\n</ol>\n<p>Mysql 自动给 root 用户设置随机密码，运行 grep &quot;password&quot; /var/log/mysqld.log 可看到当前密码</p>\n<ol start=\"9\">\n<li>运行 mysql -u root -p，用 root 用户登录，提示输入密码可用上述的，可以成功登陆进入 mysql 命令行</li>\n<li>设置 root 密码，对于个人开发环境，如果要设比较简单的密码（生产环境服务器要设复杂密码），可以运行</li>\n</ol>\n<p>set global validate_password_policy=0; 提示密码设置策略<br />\n（validate_password_policy 默认值 1，）</p>\n<ol start=\"11\">\n<li>set password for 'root'@'localhost' =password('hspedu100');</li>\n<li>运行 flush privileges; 使密码设置生效</li>\n</ol>\n<ul>\n<li>quit   退出数据库</li>\n</ul>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/3-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "https://jihaipeng123.github.io/3-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "3.Linux常用命令",
            "date_published": "2023-08-30T02:40:52.000Z",
            "content_html": "<h1 id=\"关机注销重启\"><a class=\"anchor\" href=\"#关机注销重启\">#</a> 关机注销重启</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830104820906.png\" alt=\"image-20230830104820906\" /></p>\n<h1 id=\"系统信息和性能查看\"><a class=\"anchor\" href=\"#系统信息和性能查看\">#</a> 系统信息和性能查看</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830104936576.png\" alt=\"image-20230830104936576\" /></p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830104953152.png\" alt=\"image-20230830104953152\" /></p>\n<h1 id=\"磁盘和分区\"><a class=\"anchor\" href=\"#磁盘和分区\">#</a> 磁盘和分区</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105028686.png\" alt=\"image-20230830105028686\" /></p>\n<h1 id=\"用户和用户组\"><a class=\"anchor\" href=\"#用户和用户组\">#</a> 用户和用户组</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105108202.png\" alt=\"image-20230830105108202\" /></p>\n<h1 id=\"网络和进程管理\"><a class=\"anchor\" href=\"#网络和进程管理\">#</a> 网络和进程管理</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105143706.png\" alt=\"image-20230830105143706\" /></p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105202375.png\" alt=\"image-20230830105202375\" /></p>\n<h1 id=\"常见系统服务命令\"><a class=\"anchor\" href=\"#常见系统服务命令\">#</a> 常见系统服务命令</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105245852.png\" alt=\"image-20230830105245852\" /></p>\n<h1 id=\"文件和目录操作\"><a class=\"anchor\" href=\"#文件和目录操作\">#</a> 文件和目录操作</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105317803.png\" alt=\"image-20230830105317803\" /></p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105400233.png\" alt=\"image-20230830105400233\" /></p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105414945.png\" alt=\"image-20230830105414945\" /></p>\n<h1 id=\"文件查看和处理\"><a class=\"anchor\" href=\"#文件查看和处理\">#</a> 文件查看和处理</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105445618.png\" alt=\"image-20230830105445618\" /></p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105501127.png\" alt=\"image-20230830105501127\" /></p>\n<h1 id=\"打包和解压\"><a class=\"anchor\" href=\"#打包和解压\">#</a> 打包和解压</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105539241.png\" alt=\"image-20230830105539241\" /></p>\n<h1 id=\"rpm包管理命令\"><a class=\"anchor\" href=\"#rpm包管理命令\">#</a> RPM 包管理命令</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105626043.png\" alt=\"image-20230830105626043\" /></p>\n<h1 id=\"yum包管理命令\"><a class=\"anchor\" href=\"#yum包管理命令\">#</a> YUM 包管理命令</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105651606.png\" alt=\"image-20230830105651606\" /></p>\n<h1 id=\"dpkg包管理命令\"><a class=\"anchor\" href=\"#dpkg包管理命令\">#</a> DPKG 包管理命令</h1>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105730627.png\" alt=\"image-20230830105730627\" /></p>\n<p>APT 软件工具</p>\n<p><img data-src=\"../pictures/3-Linuxmingling/image-20230830105806146.png\" alt=\"image-20230830105806146\" /></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%84%8F%E4%B9%89/",
            "url": "https://jihaipeng123.github.io/%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%84%8F%E4%B9%89/",
            "title": "写博客的意义",
            "date_published": "2023-08-29T05:57:08.000Z",
            "content_html": "<p>听完<span class=\"red\">程序羊的 “为什么程序员必须写技术博客”</span>，我好像懂了一点。</p>\n<p>如何培养自己的总结能力，知识学的不深，学了总忘。</p>\n<p>一定要让自己学的知识在某个地方留下一道刻痕，不容易流失。</p>\n<p>每学一个东西，试着输出点什么，笔记，心得，源码的小 demo。</p>\n<p><span class=\"blue\">博客的意义所在：记录</span></p>\n<div class=\"note info\">\n<p>作用：</p>\n</div>\n<p>坚持写博客百利无一害；</p>\n<p>技术博客绝对的面试加分项；</p>\n<p>写博客可以系统的整合自己某一阶段的学习成果；</p>\n<p>加深对技术点的理解（看的过程 == 认知，写的过程 == 复现）；</p>\n<p>让自己有一张 “自己的知识清单”；</p>\n<p>个人博客是自己很好的备忘录 + 踩坑记录；</p>\n<p>通过技术博客，结交志同道合的朋友；</p>\n<p>提高自己的写作水平，语言复述；</p>\n<div class=\"note danger\">\n<p>误区：</p>\n</div>\n<p>初学者博客没技术含量，不是牛人也可以写博客。你只要写就可以了。</p>\n<p>要有正确的态度，内容为王，内容沉淀为主，多坚持一会</p>\n<p>敬畏之心，尊重知识产权，引用别人代码，文字，片段表明出处，尽量自己写笔记</p>\n<p>一定要可复现的内容</p>\n<p>如何写：</p>\n<p>写作形式：markdown, 习惯了就好</p>\n<div class=\"note success\">\n<p>内容：</p>\n</div>\n<p>写入门系列（备忘录，笔记，基础理解，踩坑记录）</p>\n<p>写实战类文章（安装过程，环境搭建，操作记录等）</p>\n<p>一年半载后可以写源码分析，模式提炼，做开源项目</p>\n<p>心态放正，敢于去写，敢于尝试，敢于展示，敢于分享</p>\n<p>从无到有，开头难，坚持下去，</p>\n",
            "tags": [
                "博客",
                "博客"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB%E5%90%8E%E7%BB%AD/",
            "url": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB%E5%90%8E%E7%BB%AD/",
            "title": "回顾总结大一生活后续",
            "date_published": "2023-08-28T23:51:32.000Z",
            "content_html": "<p>做事情应该有始有终，基于昨晚草草的结束，我决定继续写一点东西来讲述讲述。上了大学，这是我第一次写这么长的作文了（真不容易，感动自我了。呜呜～）当你静下心来写的时候，时间真的走的很快，不要吝啬时间，虽然看似好几个小时只写了一篇好似没大用的仿佛狗啃的文章，那你的格局就小喽，这也算是自己对过去一年的时间的总结。总结反思很重要的，总该对过去记录一下。为曾经虚晃一年，碌碌无为的一年勉强的来写一篇总结。</p>\n<div class=\"note success\">\n<p>昨天写过什么，别问问就是忘了，但是今天的我很清醒，大抵我知道自己要写什么吧。🤔</p>\n</div>\n<p><span class=\"orange\">大雁说过：不懂得浪费时间的人绝对考不上研。</span>（大雁讲的视频都好有道理，等我哪天好好刷一下）学习讲究效率，讲究方法，而不是耗时间，不是看你坐板凳是否做了一天。我自己好像就中招了，反对无效学习，学习是给自己学的，不是装给他他人看的。感觉自己学了一天，回过头来，好好想一下自己真的到底学过多少东西，收获了多少。学 3 分钟看 5 分钟抖音，结果这仅学的 3 分钟内心里还在等着接受别人的消息。好像说的妥妥的就是我。反思一下：学习的时候就是学习，全神贯注的学。手机真的 “红颜祸水”。说到手机，给自己一个警告吧：手机真的没啥用，玩手机无非是刷抖音，玩游戏，聊天，好好想想这些能让你成长吗？？？跑远了，回来... 学习的时候就要学习，玩耍的时候就放开玩。哎，俺从小就是这样，学的时候想玩，玩的时候想学，大家呢？自己总是可以多多培养一下兴趣，“雨露均沾”🙂也不是不可以的，劳逸结合，才能更加高效的学习。</p>\n<p>突然想起这个话题，有必要认真的讲一下：<span class=\"blue\">我就是我，我们只做最真实的自己。</span>我们总是很在意别人的眼光，在意别人的看法。从小学一路走来，想想哪一位大佬不是都那么的有个性。上课瞧着二郎腿，叼着牙签睡觉，考试永远第一的；一直戴着搞笑帽子，走路唱着难歌走进清华的；永远光头情商为 0 的大佬，总而言之，哪一位大佬都是那样的不一样。我是妥妥的菜狗，我也没有人家那样的实实力（好像说错了，我还没努力呢）<span class=\"blue\">狭路相逢勇者胜。</span>😠所以说：永远不要在意别人对你的看法，大家可能会吐槽，（我也会吐槽的哈哈）但是事实就是无非你吐槽俩句，有影响自己的生活吗？不影响。做好最真实的自己，我的生活我的行为我自己主宰。虽然这样显得自己好像很不合群，去所谓，适合你的圈子总会有的。容我吐槽一下：大学里真的替社会给我给我上了一节课呐，打好全班关系真的很重要。记得有次优秀团员评选，虽然没啥用吧，（但是人总是有欲望的，有总比没有好)，是学生大家评选，哎，我的那票数惨不忍睹，单纯的我认为只要学习好啥都可以。无所谓，我认为：没必要的去迎合所有人，陪他们打游戏？闲的瞎聊？无聊愚蠢的行为。可能在别人眼里我是很 “独” 的一个人吧。做好自己就可以了。反对无效社交，嗯，我真聪明・・・😝</p>\n<p>还有就是，进入大学的一年时间，我认识了好多优秀的学长们，朋友们。每一个人都在努力，可能好多人认为大学里就是玩耍的地方。正如我之前提过的，每个人都要为自己错误的行为买单，熬夜打游戏，上课睡觉的都是，但是你为什么不去和那些日日夜夜学习的那些人学习呢？优秀的人总是优秀的，图书馆里那每天背着书包，等着开门，为自己奋斗的・，回宿舍路上耳机里放的是英语听力的，刷视频刷着宋浩的课程，想来自己原来就是小丑，居然还在为着自己今天背了 1 个单词沾沾自喜。大一结束了，在学长们的答疑下，渐渐的我对自己的未来有了些许的规划。😉</p>\n<p>大二要多学一些技术，技多不压身嘛，有精力的话我会自学大学所有的课程。多参加一些比赛，真的很羡慕拿奖的感觉，虽然不知道拿奖能干什么，但是总是有好处的。大三应该要全力备考考研了吧。我不相信那些什么说什么备考时间长了坚持不下去，只要付出一定会有收获。前提你得真的学习，而不是那些所谓的形式主义。大四俺一定会成功上岸的！！！考研无非就是公共平平得答试卷，靠得都是大家的实力，我喜欢。还有一个长期的计划，每天都必须抽出时间学英语。</p>\n<p>自己有个算是喜好吧，<span class=\"yellow\">总是喜欢优秀的人。</span>“男女老少通吃哇”，这可怎么整呐，遇到大佬，总是很自卑胆小，偷偷的努力去超越。遇到那些不学习的甚至影响自己的，尽量远离，这就是为什么我不回宿舍的原因，回宿舍就只有打游戏了（我和舍友关系还是非常好的），我暗恋过每一个学习好的女生哈哈・・・・（当然开玩笑），妙不可言。好讨厌别人说我卷，我是真的菜，虽然说每天学习了，但是回过头来真的不知道自己学了什么。反思一下：学习过程有点快，没有做到深入理解，只是单纯的听一遍课是不够的・。单纯的听课没有实践。以后每天听完课，要复盘一下，学完课程一定要尝试去代码实现操作一下。永远不要惧怕困难。第一次整这个博客别提有多头大了🤡，什么也不懂，都是靠着别人搭建起来的。后来让自己玩坏了，全部都删从心安装，虽然花费了很多时间但是很成功的完成了，现在回过头来去看过程代码，so easy。😁原来你对自己的潜力一无所知，没有什么东西解决不了，你都没有尝试就已经害怕了，这是永远都不能有的。哪怕尝试了还没有解决，我们可以找学长朋友帮忙，那不雷军说过 “<span class=\"green\">实际上，无论你遇到什么问题，别人可能都遇到过，都解决了，甚至都有标准答案，你只要找别人问问就可以了</span>”。<span class=\"green\">你所经历的所有挫折，失败，甚至那些看似毫无意义消磨时间的事情，都将成为你最宝贵的财富。</span>哈哈，我还年轻<span>我若成佛，天下无魔；我若成魔，佛奈我何</span>～，要不多做一些看似毫无意义消磨时间的事情？？？随便大胆的去做一些自己想要做的事情，不要害怕，不要去想后果，你只管过程，我不相信命运，我只相信人定胜天，逆天改命。我最喜欢的一句话 “<span class=\"blue\">我若成佛，天下无魔；我若成魔，佛奈我何</span>”😆</p>\n<p>好像想说的也就差不多就这些了吧，不对还有还有。哎，想说什么却又无从开口。可能妈妈又因为我的 4 级日夜无眠吧，现在连打电话的勇气都没有了。一年了，不仅我长了一岁，更多的是妈妈又老了一岁。爸爸也接着日复一日的苦活，哎... 不提了，接着努力学习吧，不要辜负父母们对自己的期望，希望每次聊天的时候都能给他们带去好消息。</p>\n<p>读书不是为了某一刻的熠熠生辉，而是为了人生的每一个时刻，都能够拥有自己的，不管结果怎样，全力以赴去努力过的青春。<span class=\"purple\">少年拉满弓，不惧岁月不惧风。我将带着过去的未完成，在未来奔跑起来，即使道路泥泞，也会收获遍野的灿漫。</span></p>\n<div class=\"note warning\">\n<p>整整一年的时间也就由这短短的一篇文章就给结束啦</p>\n</div>\n<p>总结是写完了，不知道自己是否真的会像写的这样做，不晓得之后自己再看这篇文章有何感想。（我不会在抽风吧哈哈）写这篇文章就当对自己勉励一下吧，原来自己还是清醒的，至于是否在清醒中堕落就不知道了！！<span class=\"aqua\">人就该有所追求，星光不问赶路人，时光不负有心人，愿未来的我们不为虚度年华而悔恨，所愿皆所得，让我们各自努力，顶峰相见。</span>💝</p>\n<div class=\"note info\">\n<p>（最后修修改改，整点特效吧。--- 主打摆烂）</p>\n</div>\n",
            "tags": [
                "自能成羽翼，何必仰云梯"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB/",
            "url": "https://jihaipeng123.github.io/%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93%E5%A4%A7%E4%B8%80%E7%94%9F%E6%B4%BB/",
            "title": "回顾总结大一生活",
            "date_published": "2023-08-28T12:13:18.000Z",
            "content_html": "<div class=\"note info\">\n<p>从何说起呢？好问题😃</p>\n</div>\n<p>看着反复删除的开头，和我这缓慢的打字速度，我猜这篇总结可能会在黑暗中终结吧。</p>\n<p>想说什么却又不敢说，无所谓啦，想起什么就写什么了，反正能没人看到我写的，某些人看到的话 --- 就当分享给朋友也是可以的。我还是有朋友的，有朋友的感觉真的不错；</p>\n<p>今天晚上不学了，收拾一下心情，反省自己，换副姿态，重新开始。</p>\n<p>回归正题：</p>\n<p>今天是 2023 年 8 月 28 日，我开始做我对过去的总结，人生的第一次，哈哈。曾经无数次的想要养成做日常笔记的习惯，感觉很帅。高中的时候，舍友每天都会拿起自己的小本本总结一下我就傻傻的看着。想来，别提了，我太懒；以后我会经常的更新我的日常生活，分享心情。说出来就是痛快，放个小歌 ，喝个小酒，随意的敲击键盘...（原谅我，我在做梦😂）</p>\n<p>不知不觉大一转眼就过去了，时间真的不等人啊！从曾经刚来学校的不停吐槽的我到如今只能自我安慰随遇而安的摆烂的我，早已没有了当年的那股傲气，想想曾经高中奋斗的 3 年，真的满是不甘，想想高一的第一，高二的前几，高三的几十，想想智学网上那一次次的考试，想想那 3 次模拟 5 百六七的感觉，再想想高考的 506，哎，过去的都过去了，想想网上那些安慰高考失利的孩子的话，高考只是通向成功的一条道路，想想有道理。于是我奔向未知的前方，来到了石家庄学院。</p>\n<p>这算我人生的起点了吧，以后出去找工作别人会说自己是哪哪 981，211，自己这算在起跑线都输了吧，哎，无所谓，走一步看一步啦，今天路途的风景都没有看够呢，为什么要想以后呢？今天的我只需要保质保量做好我今天的事，相信未来的路途一定不会差；说到以后，我一定要考研，不知道自己到备考的时候是否还会有现在的决心。当你走出校门的那一刻，意味着你真正的长大了，你的青春就结束了，你永远都不会在踏进学校的大门，你的目标就成为了工作。我希望我可以一直学下去，一直享受学生的那种无忧。考研目标现在还没有呢，容我下去认真的研究研究。</p>\n<p>面对着已经过去的大一，问自己一个问题 “<span class=\"red\">这一年你干了什么，有什么收获？</span>” 又是一个好问题，让我好好的回味一下这个问题。🤔</p>\n<div class=\"note danger\">\n<p>干了什么？？？干了一堆荒唐事，容我慢慢道来。</p>\n</div>\n<p>先说选班委的事情吧，真得很想当学习委员，真的很想，为啥吧，我个人单纯认为：首先可以先在老师面前刷个脸缘，有助于更好的和老师打好关系，多多请教些问题，真的是再好不过了，不会的问题我都敢问三遍，哎，后来吧自己也社恐，看着班级群里天天聊天早已和学长学，同学们打好关系的抢着当学委的那些..... 我放弃了，如果再给我一次机会，我一定会有信心的去争。做什么都不要轻言放弃，你都未曾开始，哪里来的” 我就一定会失败 “。我就是我，我就是那个桀骜不驯的我，你们都是大白菜，我都瞧不起，不要迷恋哥，哥只是个传说，哥略微出手，就已是这个分段的极限。来玩笑的，我就是妥妥的菜狗😿。</p>\n<p>还有就是，这个哎，浅提一下吧，暗恋过一个小姑娘吧，也不算吧单纯好感，至于结果吧，我是沙雕，阳光开朗大男孩，女生都是神秘物种，都是开渔塘的，有对象还到处瞎聊，也对，大学生这年龄也就是瞎玩的年龄，哦不对，还是有真爱的，比如特例：王某某同学呀，由衷的祝福他们（真心的，骗人是小狗）。搞对象无非是牵着别人牵过的手，亲这别人亲过的嘴，搂着别人摸过的腿，没意思。<span class=\"red\">（在我的律师到来之前，我拒绝发言，有对象的人别动手，实在不行轻点打。）</span>所以我觉得：在我有绝对的实力和金钱之前，我愿意做一条单生狗。听说搞对象老花钱哩，对于我这种月花 600 块钱的刚刚解决温饱的人来说，俩个字：要命；😷况且 lihuibear 大师说过一句名言：<span class=\"green\">没前途，女生有那俩行代码好看吗，有那时间不如多敲一敲代码。</span>说这话是那鄙夷的目光现在还记忆犹新；因此一句话总结：<span class=\"pink\">智者不如爱河，冥王一路硕博💯</span>；</p>\n<p>还有一件事吧，哎，更丢人，还想当学习委员的我做梦也想不到我挂科了，离谱，离了个大谱。大一下学期我的网修课程挂了😿，就是人们口中所说的水课，挂个脚本自己就可以刷的课，而且还挂了 2 门，我觉得：这将可能是我大学生活里永远不能忘记的事了。有句话说到没挂过科的大学不算上过大学，哈哈我已经把大学读完了，从此什么评优可能都与我擦肩而过了吧！！！我曾还埋怨过那些班团怎么不提醒，别的班都提醒了，哎，就只是为我的无知为我的愚蠢找个借口吧，多大的人了，做错事情总事要为自己的错误买单。人家有什么义务替你操心，自己的事情一定要自己放到心上。</p>\n<p>应该是我最后一件事吧，我的第一次 4 级考试 401，距离 425 差的好远，哎，接着学吧。从我参加报名到考试中间也有小一段时间，想想这段时间我干了什么，干了什么我忘了，但是我清楚的记得我没有学英语。考试那天早晨，我在网上查着要靠什么题型，你们可能会很震惊😢？不骗你们，事实真的就是这样，虽然脑中真的记着这件事情，嘴上也说着要学英语，但是成绩不会骗人，没学就是没学，你要过了就是对那些学习的人的不公平，我认。有时候，学习不是你咋呼咋呼就来的，是那种脚踏实地，一步一步的积累起来的。我英语一直都差，英语差的无非都是懒，但勤快点也不至于如此。。。话说到这里，突然想起自己一直说着要好好学算法，惭愧惭愧😭，又过嘴瘾了，想抽自己大嘴巴子。哎，从明天开始，我得详细得做个计划了。总结一下：学习不是你说说就能学会的，不能懒，要扎扎实实地去做，行动起来。</p>\n<p>有些事情要说做就做，一定不能拖拉。一直想参加一些能够学习的社团，比赛。结果大一下学期才进入算法社团，有点小晚。但是只要学多会都不晚，加油，太空慢步的皮卡丘，不就是迟进了社团嘛，晓得后来者居上嘛！！！看着别人在老师的带领下拿奖，纯纯羡慕。当班团确实是真的有好处啊，俺想参加还没机会哩～～～妙不可言。。。所以有些事情要自己决定，机会总会留给有准备的人，一定要有勇气，多请教学长老师，再次提 pink 一下王铭颢学长，真的给我解了很多疑惑。感谢学长（不要问为什么是再次提一下）哈哈～</p>\n<p>至于大一学到了什么，我做过的每一件事都让我学到了很多很多。浅浅的提一下具体学习历程吧：先是在图书馆度过了无数的啃书时间（傻笑😃，没有无数，也就是除了上课时间，晚上回宿舍睡觉，其余时间差不多都在吧)，后来就来到项目组蹭空调，抛弃了我的 “同伙”。等大二开学，一定叫他来陪我。一年内学过没用的物理，学完高数，线代，英语，C 语言，数据结构。。。学啥忘啥，主打经典白学，哎，别提了。。</p>\n<div class=\"note info\">\n<p>时间不早了，22 点 43 了，要回宿舍了，今天的总结草草的就收尾了。。</p>\n</div>\n<p>😴<span class=\"blue\">汝欲醉眠吾且去，明朝有意抱琴来....</span></p>\n",
            "tags": [
                "自能成羽翼，何必仰云梯"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/2-Linux%E5%AE%9E%E6%93%8D/",
            "url": "https://jihaipeng123.github.io/2-Linux%E5%AE%9E%E6%93%8D/",
            "title": "2.Linux实操",
            "date_published": "2023-08-28T09:02:21.000Z",
            "content_html": "<h1 id=\"关机重启\"><a class=\"anchor\" href=\"#关机重启\">#</a> 关机 &amp; 重启</h1>\n<h2 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<ol>\n<li>\n<p>shutdown  –h  now</p>\n<p>立该进行关机</p>\n</li>\n<li>\n<p>shudown  -h  1</p>\n<p>&quot;hello,1 分钟后会关机了&quot;</p>\n</li>\n<li>\n<p>shutdown  –r  now</p>\n<p>现在重新启动计算机</p>\n</li>\n<li>\n<p>halt</p>\n<p>关机，作用和上面一样.</p>\n</li>\n<li>\n<p>reboot</p>\n<p>现在重新启动计算机</p>\n</li>\n<li>\n<p>sync</p>\n<p>把内存的数据同步到磁盘</p>\n</li>\n</ol>\n<p>注意：</p>\n<ul>\n<li>\n<p>不管是重启系统还是关闭系统，首先要运行<span class=\"orange\"> sync 命令</span>，把内存中的数据写到磁盘中</p>\n</li>\n<li>\n<p>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync</p>\n</li>\n</ul>\n<h1 id=\"用户登录和注销\"><a class=\"anchor\" href=\"#用户登录和注销\">#</a> 用户登录和注销</h1>\n<ol>\n<li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。</li>\n<li>可以利用普通用户登录，登录后再用”su - 用户名 &quot; 命令来切换成系统管理员身份.</li>\n<li>在提示符下输入 logout 即可注销用户</li>\n</ol>\n<p>logout -- 注销指令在图形运行级别无效，在运行级别 3 下有效</p>\n<h1 id=\"用户管理\"><a class=\"anchor\" href=\"#用户管理\">#</a> 用户管理</h1>\n<p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828172007329.png\" alt=\"image-20230828172007329\" /></p>\n<h2 id=\"添加用户\"><a class=\"anchor\" href=\"#添加用户\">#</a> 添加用户</h2>\n<ol>\n<li>useradd   用户名</li>\n</ol>\n<p>添加一个用户 milan, 默认该用户的家目录在 /home/milan</p>\n<p>当创建用户成功后，会自动的创建和用户同名的家目录</p>\n<p>也可以通过    useradd   -d    指定目录   新的用户名，给新创建的用户指定家目录</p>\n<h2 id=\"指定修改密码\"><a class=\"anchor\" href=\"#指定修改密码\">#</a> 指定 / 修改密码</h2>\n<ol>\n<li>passwd   用户名</li>\n</ol>\n<h2 id=\"显示当前用户所在的目录\"><a class=\"anchor\" href=\"#显示当前用户所在的目录\">#</a> 显示当前用户所在的目录</h2>\n<ol>\n<li>pwd</li>\n</ol>\n<h2 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h2>\n<ol>\n<li>userdel   用户名</li>\n</ol>\n<ul>\n<li>\n<p>删除用户 milan，但是要保留家目录，userdel   milan</p>\n</li>\n<li>\n<p>删除用户以及用户主目录，userdel   -r    tom</p>\n</li>\n</ul>\n<h2 id=\"查询用户信息\"><a class=\"anchor\" href=\"#查询用户信息\">#</a> 查询用户信息</h2>\n<ul>\n<li>id  用户名</li>\n</ul>\n<h2 id=\"切换用户\"><a class=\"anchor\" href=\"#切换用户\">#</a> 切换用户</h2>\n<p>在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root</p>\n<ol>\n<li>su  - 切换用户名</li>\n</ol>\n<ul>\n<li>\n<p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p>\n</li>\n<li>\n<p>当需要返回到原来用户时，使用 exit/logout 指令</p>\n</li>\n</ul>\n<h2 id=\"查看当前用户登录用户\"><a class=\"anchor\" href=\"#查看当前用户登录用户\">#</a> 查看当前用户 / 登录用户</h2>\n<ol>\n<li>whoami 或 who  am  I</li>\n</ol>\n<h1 id=\"用户组\"><a class=\"anchor\" href=\"#用户组\">#</a> 用户组</h1>\n<p>类似于角色，系统可以对有共性 / 权限的多个用户进行统一的管理</p>\n<h2 id=\"新增组\"><a class=\"anchor\" href=\"#新增组\">#</a> 新增组</h2>\n<ol>\n<li>\n<p>groupadd   组名</p>\n</li>\n<li>\n<p>增加用户时直接加上组</p>\n<p>指令 (基本语法):useradd   –g   用户组   用户名</p>\n<ul>\n<li>增加一个用户 zwj, 直接将他指定到 wudang</li>\n<li>groupadd  wudang</li>\n<li>useradd  -g   wudang  zwj</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"删除组\"><a class=\"anchor\" href=\"#删除组\">#</a> 删除组</h2>\n<ol>\n<li>groupdel   组名</li>\n</ol>\n<h2 id=\"修改用户的组\"><a class=\"anchor\" href=\"#修改用户的组\">#</a> 修改用户的组</h2>\n<ol>\n<li>usermod   –g   用户组   用户名\n<ul>\n<li>创建一个组 mojiao，把 zwj 放入到 mojiao</li>\n<li>指令:usermod   -g   mojiao   zwj</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"指定运行级别\"><a class=\"anchor\" href=\"#指定运行级别\">#</a> 指定运行级别</h1>\n<pre><code>0：关机\n1：单用户【找回丢失密码】\n2：多用户状态没有网络服务\n3：多用户状态有网络服务\n4：系统未使用保留给用户\n5：图形界面\n6：系统重启\n</code></pre>\n<ul>\n<li>init[0123456]</li>\n</ul>\n<p>通过 init 来切换不同的运行级别，常用运行级别是 3 和 5</p>\n<h1 id=\"指令大全\"><a class=\"anchor\" href=\"#指令大全\">#</a> 指令大全</h1>\n<p>man</p>\n<ol>\n<li>基本语法：man  [命令或配置文件]</li>\n</ol>\n<p>查看 ls 命令的帮助信息  man  ls</p>\n<p>在隐藏文件是以。开头，选项可以组合使用比如 ls   -al, 比如 man ls  -al/root</p>\n<ol>\n<li>help</li>\n</ol>\n<p>基本语法：help  命令（功能描述：获得 shell 内置命令的帮助信息）</p>\n<p>百度</p>\n<p>帮助更直接如果英语不太好的，也可以直接百度靠谱。(以上俩种没毛用)</p>\n<h1 id=\"文件目录类\"><a class=\"anchor\" href=\"#文件目录类\">#</a> 文件目录类</h1>\n<h2 id=\"pwd指令\"><a class=\"anchor\" href=\"#pwd指令\">#</a> pwd 指令</h2>\n<ol>\n<li>基本语法：pwd    (功能描述：显示当前工作目录的绝对路径)</li>\n</ol>\n<p>应用实例：显示当前工作目录的绝对路径</p>\n<h2 id=\"ls指令\"><a class=\"anchor\" href=\"#ls指令\">#</a> ls 指令</h2>\n<ol>\n<li>基本语法：ls   [选项]   [目录或文件]</li>\n</ol>\n<p>[选项]：</p>\n<ul>\n<li>-a：显示当前目录所有的文件和目录，包括隐藏的。</li>\n<li>-l：以列表的方式显示信息  简写 ll</li>\n</ul>\n<p>案例：查看当前目录的所有内容信息  ll</p>\n<h2 id=\"cd指令\"><a class=\"anchor\" href=\"#cd指令\">#</a> cd 指令</h2>\n<ol>\n<li>基本语法：cd  [参数]</li>\n</ol>\n<p>(功能描述：切换到指定目录)</p>\n<p>理解：绝对路径和相对路径</p>\n<ul>\n<li>cd ~  回到自己的家目录，比如你是 root，cd  ~  到 /root</li>\n<li>cd ..  回到当前目录的上一级目录</li>\n</ul>\n<p>案例 1：使用绝对路径切换到 root 目录，cd  /root</p>\n<p>案例 2: 使用相对路径到 /root 目录，比如在 /home/tom,cd  ../../root</p>\n<p>案例 3：表示回到当前目录的上一级目录，cd ..</p>\n<p>案例 4：回到家目录，cd  ~</p>\n<h2 id=\"mkdir指令\"><a class=\"anchor\" href=\"#mkdir指令\">#</a> mkdir 指令</h2>\n<p>mkdir 创建目录</p>\n<ol>\n<li>基本语法：mkdir   [选项]   要创建的目录</li>\n</ol>\n<p>常用 [选项]  -p：创建多级目录</p>\n<p>案例 1: 创建一个目录 mkdir   /home/dog</p>\n<p>案例 2: 创建多级目录 mkdir   -p   /home/animal/tiger</p>\n<h2 id=\"rmdir指令\"><a class=\"anchor\" href=\"#rmdir指令\">#</a> rmdir 指令</h2>\n<p>rmdir 删除空目录</p>\n<ol>\n<li>基本语法   rmdir   [选项]   要删除的空目录</li>\n</ol>\n<p>案例：删除一个目录   rmdir/home/dog</p>\n<p>使用细节:   rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p>\n<p>提示：如果需要删除非空目录，需要使用  rm  -  rf 要删除的目录比如：rm  -rf  /home/animal</p>\n<h2 id=\"touch指令\"><a class=\"anchor\" href=\"#touch指令\">#</a> touch 指令</h2>\n<p>touch 指令创建空文件</p>\n<ol>\n<li>基本语法   touch   文件名称</li>\n</ol>\n<p>案例：在 /home 目录下，创建一个空文件 hello.txt</p>\n<h2 id=\"cp指令\"><a class=\"anchor\" href=\"#cp指令\">#</a> cp 指令</h2>\n<p>cp 指令拷贝文件到指定目录</p>\n<ol>\n<li>基本语法  cp   [选项]   source dest</li>\n</ol>\n<p>常用 [选项]  -r  ：递归复制整个文件夹</p>\n<p>案例 1: 将 /home/hello.txt 拷贝到 /home/bbb 目录下  cp  hello.txt    /home/bbb</p>\n<p>案例 2: 递归复制整个文件夹，比如将 /home/bbb 整个目录，拷贝到 /opt cp-r/home/bbb   /opt</p>\n<p>强制覆盖不提示的方法：\\cp,  \\cp  -r  /home/bbb   /opt</p>\n<h2 id=\"rm指令\"><a class=\"anchor\" href=\"#rm指令\">#</a> rm 指令</h2>\n<p>rm 指令移除文件或目录</p>\n<ol>\n<li>基本语法  rm   [选项]   要删除的文件或目录</li>\n</ol>\n<p>常用 [选项]</p>\n<ul>\n<li>-r：递归删除整个文件夹</li>\n<li>-f ：强制删除不提示</li>\n</ul>\n<p>案例 1: 将 /home/hello.txt 删除，rm  /home/hello.txt</p>\n<p>案例 2: 递归删除整个文件夹 /home/bbb,   rm -rf  /home/bbb   [删除整个文件夹，不提示]</p>\n<p>使用细节强制删除不提示的方法：带上 - f 参数即可</p>\n<h2 id=\"mv指令\"><a class=\"anchor\" href=\"#mv指令\">#</a> mv 指令</h2>\n<p>mv 移动文件与目录或重命名</p>\n<p>基本语法</p>\n<ol>\n<li>mv   oldNameFile   newNameFile (功能描述：重命名)</li>\n<li>mv   /temp/movefile   /targetFolder (功能描述：移动文件)</li>\n</ol>\n<p>案例 1: 将 /home/cat.txt 文件重新命名为 pig.txt</p>\n<p>案例 2: 将 /home/pig.txt 文件移动到 /root 目录下</p>\n<p>案例 3: 移动整个目录，比如将 /opt/bbb 移动到 /home 下 mv   /opt/bbb   /home/</p>\n<h2 id=\"cat指令\"><a class=\"anchor\" href=\"#cat指令\">#</a> cat 指令</h2>\n<p>cat 查看文件内容</p>\n<ol>\n<li>基本语法  cat  [选项] 要查看的文件</li>\n</ol>\n<p>常用 [选项]  -n ：显示行号</p>\n<p>使用细节  cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 | more</p>\n<ul>\n<li>cat   -n   /etc/profile  |  more [进行交互]</li>\n</ul>\n<h2 id=\"more指令\"><a class=\"anchor\" href=\"#more指令\">#</a> more 指令</h2>\n<p>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键 (交互的指令)，详见操作说明</p>\n<ol>\n<li>基本语法  more   要查看的文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828191014263.png\" alt=\"image-20230828191014263\" /></p>\n<h2 id=\"less指令\"><a class=\"anchor\" href=\"#less指令\">#</a> less 指令</h2>\n<p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p>\n<ol>\n<li>基本语法  less  要查看的文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828191125138.png\" alt=\"image-20230828191125138\" /></p>\n<p>案例：采用 less 查看一个大文件文件 /opt/ 杂文.txt     less   /opt/ 杂文.txt</p>\n<h2 id=\"echo指令\"><a class=\"anchor\" href=\"#echo指令\">#</a> echo 指令</h2>\n<p>echo 输出内容到控制台</p>\n<ol>\n<li>基本语法  echo   [选项]  [输出内容]</li>\n</ol>\n<p>案例：使用 echo 指令输出环境变量，比如输出 $PATH  ,  $HOSTNAME,</p>\n<p>echo   $HOSTNAME</p>\n<p>案例：使用 echo 指令输出 hello,world!</p>\n<h2 id=\"head指令\"><a class=\"anchor\" href=\"#head指令\">#</a> head 指令</h2>\n<p>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p>\n<p>基本语法</p>\n<ol>\n<li>head   文件 (功能描述：查看文件头 10 行内容)</li>\n<li>head   -n  5  文件  (功能描述：查看文件头 5 行内容，5 可以是任意行数)</li>\n</ol>\n<p>案例：查看 /etc/profile 的前面 5 行代码  head   -n   5   /etc/profile</p>\n<h2 id=\"tail指令\"><a class=\"anchor\" href=\"#tail指令\">#</a> tail 指令</h2>\n<p>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。</p>\n<p>基本语法</p>\n<ol>\n<li>tail   文件（功能描述：查看文件尾 10 行内容）</li>\n<li>tail   -n  5  文件（功能描述：查看文件尾 5 行内容，5 可以是任意行数）</li>\n<li>tail  -f  文件（功能描述：实时追踪该文档的所有更新）</li>\n</ol>\n<p>案例 1: 查看 /etc/profile 最后 5 行的代码  tail  -n  5  /etc/profile</p>\n<p>案例 2: 实时监控 mydate.txt, 看看到文件有变化时，是否看到，实时的追加 hello,world</p>\n<p>tail  -f  /home/mydate.txt</p>\n<h2 id=\"指令和指令\"><a class=\"anchor\" href=\"#指令和指令\">#</a> &gt; 指令和 &gt;&gt; 指令</h2>\n<p>&gt; 输出重定向和 &gt;&gt; 追加</p>\n<p>基本语法</p>\n<ol>\n<li>ls  -l  &gt;  文件（功能描述：列表的内容写入文件 a.txt 中（覆盖写））</li>\n<li>ls  -al  &gt;&gt; 文件（功能描述：列表的内容追加到文件 aa.txt 的末尾）</li>\n<li>cat  文件 1  &gt; 文件 2（功能描述：将文件 1 的内容覆盖到文件 2）</li>\n<li>echo  &quot;内容&quot;  &gt;&gt; 文件 (追加)</li>\n</ol>\n<p>案例 1: 将 /home 目录下的文件列表写入到 /home/info.txt 中，覆盖写入 ls  -l  /home  &gt;  /home/info.txt [如果 info.txt 没有，则会创建]</p>\n<p>案例 2: 将当前日历信息追加到 /home/mycal 文件中指令为：cal  &gt;&gt;  /home/mycal</p>\n<h2 id=\"history指令\"><a class=\"anchor\" href=\"#history指令\">#</a> history 指令</h2>\n<p>查看已经执行过历史命令，也可以执行历史指令</p>\n<ol>\n<li>基本语法 history（功能描述：查看已经执行过历史命令）</li>\n</ol>\n<p>案例 1: 显示所有的历史命令  history</p>\n<p>案例 2: 显示最近使用过的 10 个指令。history  10</p>\n<p>案例 3：执行历史编号为 5 的指令！5</p>\n<h1 id=\"时间日期类\"><a class=\"anchor\" href=\"#时间日期类\">#</a> 时间日期类</h1>\n<h2 id=\"date指令\"><a class=\"anchor\" href=\"#date指令\">#</a> date 指令</h2>\n<h3 id=\"显示当前日期\"><a class=\"anchor\" href=\"#显示当前日期\">#</a> 显示当前日期</h3>\n<p>基本语法</p>\n<ol>\n<li>date（功能描述：显示当前时间）</li>\n<li>date+% Y（功能描述：显示当前年份）</li>\n<li>date+% m（功能描述：显示当前月份）</li>\n<li>date+% d（功能描述：显示当前是哪一天）</li>\n<li>date&quot;+% Y-% m-% d% H:% M:% S&quot;（功能描述：显示年月日时分秒）</li>\n</ol>\n<h3 id=\"指令-设置日期\"><a class=\"anchor\" href=\"#指令-设置日期\">#</a> 指令 - 设置日期</h3>\n<p>基本语法</p>\n<ol>\n<li>date  -s  字符串时间</li>\n</ol>\n<p>案例 1: 设置系统当前时间，比如设置成 2020-11-0320:02:10   date  -s  “2020-11-0320:02:10</p>\n<h2 id=\"cal指令\"><a class=\"anchor\" href=\"#cal指令\">#</a> cal 指令</h2>\n<p>查看日历指令</p>\n<p>基本语法</p>\n<ol>\n<li>cal  [选项]（功能描述：不加选项，显示本月日历）</li>\n</ol>\n<p>案例：显示 2020 年日历:cal  2020</p>\n<h1 id=\"搜索查找类\"><a class=\"anchor\" href=\"#搜索查找类\">#</a> 搜索查找类</h1>\n<h2 id=\"find指令\"><a class=\"anchor\" href=\"#find指令\">#</a> find 指令</h2>\n<p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p>\n<ol>\n<li>基本语法  find   [搜索范围]   [选项]</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828193151543.png\" alt=\"image-20230828193151543\" /></p>\n<p>案例 1: 按文件名：根据名称查找 /home 目录下的 hello.txt 文件   find   /home   -name   hello.txt</p>\n<p>案例 2：按拥有者：查找 /opt 目录下，用户名称为 nobody 的文件   find   /opt   -user   nobody</p>\n<p>案例 3：查找整个系统下大于 200M 的文件（+n 大于 - n 小于 n 等于，单位有 k,M,G）find /  -size +200M</p>\n<h2 id=\"grep指令和管道符号\"><a class=\"anchor\" href=\"#grep指令和管道符号\">#</a> grep 指令和管道符号 |</h2>\n<p>grep 过滤查找，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p>\n<ol>\n<li>grep  [选项]  查找内容源文件</li>\n</ol>\n<p><img data-src=\"../pictures/2-Linux%E5%AE%9E%E6%93%8D/image-20230828193511230.png\" alt=\"image-20230828193511230\" /></p>\n<p>案例 1: 请在 hello.txt 文件中，查找 &quot;yes&quot; 所在行，并且显示行号</p>\n<p>写法 1:cat  /home/hello.txt   |   grep &quot;yes&quot;</p>\n<p>写法 2: grep  -n &quot;yes&quot;  /home/hello.txt</p>\n<h1 id=\"压缩和解压类\"><a class=\"anchor\" href=\"#压缩和解压类\">#</a> 压缩和解压类</h1>\n<h2 id=\"gzipgunzip指令\"><a class=\"anchor\" href=\"#gzipgunzip指令\">#</a> gzip/gunzip 指令</h2>\n<p>gzip 用于压缩文件，gunzip 用于解压的</p>\n<p>基本语法</p>\n<ol>\n<li>gzip   文件（功能描述：压缩文件，只能将文件压缩为 *.gz 文件）</li>\n<li>gunzip   文件.gz（功能描述：解压缩文件命令）</li>\n</ol>\n<p>案例 1:gzip 压缩，将 /home 下的 hello.txt 文件进行压缩   gzip   /home/hello.txt</p>\n<p>案例 2:gunzip 压缩，将 /home 下的 hello.txt.gz 文件进行解压缩  gunzip  /home/hello.txt.gz</p>\n<h2 id=\"zipunzip指令\"><a class=\"anchor\" href=\"#zipunzip指令\">#</a> zip/unzip 指令</h2>\n<p>zip 用于压缩文件，unzip 用于解压的，这个在项目打包发布中很有用的</p>\n<p>基本语法</p>\n<ol>\n<li>zip  [选项]   XXX.zip  将要压缩的内容（功能描述：压缩文件和目录的命令）</li>\n<li>unzip  [选项]  XXX.zip（功能描述：解压缩文件）</li>\n<li>zip 常用选项  -r  ：递归压缩，即压缩目录</li>\n<li>unzip 的常用选项 -d &lt;目录&gt; ：指定解压后文件的存放目录</li>\n</ol>\n<p>案例 1: 将 /home 下的所有文件 / 文件夹进行压缩成 myhome.zip ；  zip  -r  myhome.zip  /home/ [将 home 目录及其包含的文件和子文件夹都压缩]</p>\n<p>案例 2: 将 myhome.zip 解压到 /opt/tmp 目录下； unzip  -d   /opt/tmp   /home/myhome.zip</p>\n<h2 id=\"tar指令\"><a class=\"anchor\" href=\"#tar指令\">#</a> tar 指令</h2>\n<p>tar 指令是打包指令，最后打包后的文件是.tar.gz 的文件。</p>\n<ol>\n<li>基本语法  tar  [选项]  XXX.tar.gz   打包的内容  (功能描述：打包目录，压缩后的文件格式.tar.gz)</li>\n</ol>\n<p>案例 1: 压缩多个文件，将 /home/pig.txt 和 /home/cat.txt 压缩成 pc.tar.gz</p>\n<p>tar    -zcvf  pc.tar.gz   /home/pig.txt  /home/cat.txt</p>\n<p>案例 2: 将 /home 的文件夹压缩成 myhome.tar.gz</p>\n<p>tar   -zcvf   myhome.tar.gz   /home/</p>\n<p>案例 3: 将 pc.tar.gz 解压到当前目录</p>\n<p>tar  -zxvf   pc.tar.gz</p>\n<p>案例 4: 将 myhome.tar.gz 解压到 /opt/tmp2 目录下</p>\n<p>tar  -zxvf   /home/myhome.tar.gz  -C  /opt/tmp2</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/1-Linux%E5%85%A5%E9%97%A8/",
            "url": "https://jihaipeng123.github.io/1-Linux%E5%85%A5%E9%97%A8/",
            "title": "1.Linux入门",
            "date_published": "2023-08-28T07:07:37.000Z",
            "content_html": "<h1 id=\"应用领域\"><a class=\"anchor\" href=\"#应用领域\">#</a> 应用领域</h1>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828151126324.png\" alt=\"image-20230828151126324\" /></p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828154542640.png\" alt=\"image-20230828154542640\" /></p>\n<h2 id=\"服务器领域\"><a class=\"anchor\" href=\"#服务器领域\">#</a> 服务器领域</h2>\n<p>​\t服务器领域 linux 在服务器领域的应用是最强的。linux 免费、稳定、高效等特点在这里得到了很好的体现，尤其在一些高端领域尤为广泛（c/c++/php/java/python/go）。</p>\n<h2 id=\"嵌入式领域\"><a class=\"anchor\" href=\"#嵌入式领域\">#</a> 嵌入式领域</h2>\n<p>​\t嵌入式领域 linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、智能硬件等都是其应用领域。以后在物联网中应用会更加广泛。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<ol>\n<li>linux 是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目 (c/c++/php/python/java/go) 都会部署到 Linux/unix 系统上。</li>\n<li>常见的操作系统 (windows、IOS、Android、MacOS,Linux,Unix)</li>\n<li>xLinux 之父 -----LinusTorvalds-----Git 创作者 ----- 世界著名黑客</li>\n<li>Linux 主要的发行版：Ubuntu (乌班图)、RedHat (红帽)、CentOS、Debain [蝶变]、Fedora、SuSE、OpenSUS</li>\n</ol>\n<p>Linux 和 Unix 的关系</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828155310706.png\" alt=\"image-20230828155310706\" /></p>\n<h2 id=\"vm和linux的安装\"><a class=\"anchor\" href=\"#vm和linux的安装\">#</a> VM 和 Linux 的安装</h2>\n<p>先安装 virtualmachine15.52.  ---- 官方地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudm13YXJlLmNvbS9jbi5odG1s\">https://www.vmware.com/cn.html</span></p>\n<p>再安装 Linux (CentOS7.6/centOS8.1)</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162218104.png\" alt=\"image-20230828162218104\" /></p>\n<h2 id=\"centos安装\"><a class=\"anchor\" href=\"#centos安装\">#</a> CentOS 安装</h2>\n<p>1. 创建虚拟机</p>\n<p>2. 开始安装系统 (CentOS7.6) 的步骤 https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso</p>\n<p>3. 提示生成复杂密码:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWlqaW1pbWFzaGVuZ2NoZW5nLjUxMjQwLmNvbS8zLkNlbnRPUw==\">https://suijimimashengcheng.51240.com/3.CentOS</span></p>\n<p>安装难点 - 网络连接方式理解</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162428999.png\" alt=\"image-20230828162428999\" /></p>\n<h2 id=\"虚拟机快照\"><a class=\"anchor\" href=\"#虚拟机快照\">#</a> 虚拟机快照</h2>\n<p>如果你在使用虚拟机系统的时候 (比如 linux)，你想回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理。</p>\n<h2 id=\"虚拟机迁移和删除\"><a class=\"anchor\" href=\"#虚拟机迁移和删除\">#</a> 虚拟机迁移和删除</h2>\n<p>​    虚拟系统安装好了，它的本质就是文件 (放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安装好的虚拟系统这个文件夹整体拷贝或者剪切到另外位置使用。删除也很简单，用 vmware 进行移除，再点击菜单 -&gt; 从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹即可</p>\n<h2 id=\"安装vmtools\"><a class=\"anchor\" href=\"#安装vmtools\">#</a> 安装 vmtools</h2>\n<p>1) 进入 centos</p>\n<p>2) 点击 vm 菜单的 -&gt;installvmwaretools</p>\n<p>3) centos 会出现一个 vm 的安装包，xx.tar.gz</p>\n<p>4) 拷贝到 /opt</p>\n<p>5) 使用解压命令 tar, 得到一个安装文件 cd/opt [进入到 opt 目录] tar-zxvfxx.tar.gz</p>\n<p>6) 进入该 vm 解压的目录，/opt 目录下 cdvmware...</p>\n<p>7) 安装./vmware-install.pl</p>\n<p>8) 全部使用默认设置即可，就可以安装成功</p>\n<p>9) 注意：安装 vmtools 需要有 gcc.gcc-v</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828162921575.png\" alt=\"image-20230828162921575\" /></p>\n<h1 id=\"目录详解\"><a class=\"anchor\" href=\"#目录详解\">#</a> 目录详解</h1>\n<ol>\n<li>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录 “/”，然后在此目录下再创建其他的目录。</li>\n<li>深刻理解 linux 树状文件目录是非常重要的记住一句经典的话：在 Linux 世界里，一切皆文件</li>\n</ol>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828163147597.png\" alt=\"image-20230828163147597\" /></p>\n<ol>\n<li>/bin  常用（/usr/bin、/usr/local/bin）是 Binary 的缩写，这个目录存放着最经常使用的命令</li>\n<li>/sbin  (/usr/sbin、/usr/local/sbin) SuperUser，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/home 常用 存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</li>\n<li>/root  常用  该目录为系统管理员，也称作超级权限者的用户主目录</li>\n<li>/lib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</li>\n<li>/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li>\n<li>/etc  常用  所有的系统管理所需要的配置文件和子目录，比如安装 mysql 数据库 my.conf</li>\n<li>/usr   常用   这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 programfiles 目录。</li>\n<li>/boot   常用   存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</li>\n<li>/proc    不能动    这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</li>\n<li>/srv   不能动   service 缩写，该目录存放一些服务启动之后需要提取的数据</li>\n<li>/sys  不能动   这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs=》【别动】</li>\n<li>/tmp  这个目录是用来存放一些临时文件的</li>\n<li>/dev   类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</li>\n<li>/media   常用   linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</li>\n<li>/mnt    常用   系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，然后进入该目录就可以查看里的内容了。d:/myshare</li>\n<li>/opt   这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</li>\n<li>/usr/local   常用   这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li>\n<li>/var    常用    这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</li>\n<li>/selinux     [security-enhancedlinux] SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置.</li>\n</ol>\n<h1 id=\"linux-xshell7\"><a class=\"anchor\" href=\"#linux-xshell7\">#</a> Linux-Xshell7</h1>\n<h2 id=\"远程登录\"><a class=\"anchor\" href=\"#远程登录\">#</a> 远程登录</h2>\n<p>1) linux 服务器是开发小组共享</p>\n<p>2) 正式上线的项目是运行在公网</p>\n<p>3) 因此程序员需要远程登录到 Linux 进行项目管理或者开发</p>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164146308.png\" alt=\"image-20230828164146308\" /></p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<ul>\n<li>Xshell 是目前最好的远程登录到 Linux 操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。</li>\n<li>Xshell 是一个强大的安全终端模拟软件，它支持 SSH1,SSH2, 以及 MicrosoftWindows 平台的 TELNET 协议。</li>\n<li>Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的</li>\n</ul>\n<h2 id=\"安装配置和使用\"><a class=\"anchor\" href=\"#安装配置和使用\">#</a> 安装配置和使用</h2>\n<p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164529802.png\" alt=\"image-20230828164529802\" /></p>\n<p>解决中文乱码<img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828164543283.png\" alt=\"image-20230828164543283\" /></p>\n<h2 id=\"vi和vim编辑器\"><a class=\"anchor\" href=\"#vi和vim编辑器\">#</a> Vi 和 Vim 编辑器</h2>\n<p>Linux 系统会内置 vi 文本编辑器 Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。vi 和 vim 常用的三种模式</p>\n<ol>\n<li>正常模式以 vim 打开一个档案就直接进入一般模式了 (这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、粘贴』来处理你的文件数据。</li>\n<li>插入模式按下 i,I,o,O,a,A,r,R 等任何一个字母之后才会进入编辑模式，一般来说按 i 即可.</li>\n<li>命令行模式输入 esc 再输入：在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开 vim、显示行号等的动作则是在此模式中达成的！</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>拷贝当前行yy<span class=\"token punctuation\">,</span>拷贝当前行向下的<span class=\"token number\">5</span>行<span class=\"token number\">5</span>yy，并粘贴（输入p）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>删除当前行dd<span class=\"token punctuation\">,</span>删除当前行向下的<span class=\"token number\">5</span>行<span class=\"token number\">5d</span>d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>在文件中查找某个单词<span class=\"token punctuation\">[</span>命令行下<span class=\"token operator\">/</span>关键字，回车查找<span class=\"token punctuation\">,</span>输入n就是查找下一个<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>设置文件的行号，取消文件的行号<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>命令行下<span class=\"token operator\">:</span>setnu和<span class=\"token operator\">:</span>setnonu<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>编辑<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile文件，在一般模式下<span class=\"token punctuation\">,</span>使用快捷键到该文档的最末行<span class=\"token punctuation\">[</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">]</span>和最首行<span class=\"token punctuation\">[</span>gg<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>在一个文件中输入<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>在一般模式下<span class=\"token punctuation\">,</span>然后又撤销这个动作u</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span>编辑<span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile文件，在一般模式下<span class=\"token punctuation\">,</span>并将光标移动到<span class=\"token punctuation\">,</span>输入<span class=\"token number\">20</span><span class=\"token punctuation\">,</span>再输入shift<span class=\"token operator\">+</span>g</pre></td></tr></table></figure><p><img data-src=\"../pictures/1-Linux%E5%85%A5%E9%97%A8/image-20230828165435437.png\" alt=\"image-20230828165435437\" /></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/11-redis/",
            "url": "https://jihaipeng123.github.io/11-redis/",
            "title": "11.redis",
            "date_published": "2023-08-28T04:38:04.000Z",
            "content_html": "<p><img data-src=\"../pictures/11-redis/image-20230824171703738.png\" alt=\"image-20230824171703738\" /></p>\n<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>redis 是一款高性能的 NOSQL 系列的非关系型数据库</p>\n<pre><code>1.什么是NOSQL\n\tNoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。\n\t随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。\n\t1.1. NOSQL和关系型数据库比较\n\t\t优点：\n\t\t1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。\n\t\t2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。\n\t\t3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。\n\t\t4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。\n\t\t缺点：\n\t\t1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。\n\t\t2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。\n\t\t3）不提供关系型数据库对事务的处理。\n\n\t\t1.2. 非关系型数据库的优势：\n\t\t1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。\n\t\t2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。\n\n\t\t1.3. 关系型数据库的优势：\n\t\t1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。\n\t\t2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。\n\t\t\n\t\t1.4. 总结\n\t\t关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，\n\t\t让NoSQL数据库对关系型数据库的不足进行弥补。\n\t\t一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据\n\n2.主流的NOSQL产品\n\t•\t键值(Key-Value)存储数据库\n\t\t相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB\n\t\t典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 \n\t\t数据模型： 一系列键值对\n\t\t优势： 快速查询\n\t\t劣势： 存储的数据缺少结构化\n\t•\t列存储数据库\n\t\t相关产品：Cassandra, HBase, Riak\n\t\t典型应用：分布式的文件系统\n\t\t数据模型：以列簇式存储，将同一列数据存在一起\n\t\t优势：查找速度快，可扩展性强，更容易进行分布式扩展\n\t\t劣势：功能相对局限\n\t•\t文档型数据库\n\t\t相关产品：CouchDB、MongoDB\n\t\t典型应用：Web应用（与Key-Value类似，Value是结构化的）\n\t\t数据模型： 一系列键值对\n\t\t优势：数据结构要求不严格\n\t\t劣势： 查询性能不高，而且缺乏统一的查询语法\n\t•\t图形(Graph)数据库\n\t\t相关数据库：Neo4J、InfoGrid、Infinite Graph\n\t\t典型应用：社交网络\n\t\t数据模型：图结构\n\t\t优势：利用图结构相关算法。\n\t\t劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。\n3 什么是Redis\n\tRedis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：\n\t\t1) 字符串类型 string\n\t\t2) 哈希类型 hash\n\t\t3) 列表类型 list\n\t\t4) 集合类型 set\n\t\t5) 有序集合类型 sortedset\n\t3.1 redis的应用场景\n\t\t•\t缓存（数据查询、短连接、新闻内容、商品内容等等）\n\t\t•\t聊天室的在线好友列表\n\t\t•\t任务队列。（秒杀、抢购、12306等等）\n\t\t•\t应用排行榜\n\t\t•\t网站访问统计\n\t\t•\t数据过期处理（可以精确到毫秒\n\t\t•\t分布式集群架构中的session分离\n</code></pre>\n<h1 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h1>\n<pre><code>\t1. 官网：https://redis.io\n\t2. 中文网：http://www.redis.net.cn/\n\t3. 解压直接可以使用：\n\t\t* redis.windows.conf：配置文件\n\t\t* redis-cli.exe：redis的客户端\n\t\t* redis-server.exe：redis服务器端\n</code></pre>\n<h1 id=\"命令操作\"><a class=\"anchor\" href=\"#命令操作\">#</a> 命令操作</h1>\n<pre><code>1. redis的数据结构：\n\t* redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构\n\t* value的数据结构：\n\t\t\t1 字符串类型 string\n\t\t\t2 哈希类型 hash ： map格式  \n\t\t\t3 列表类型 list ： linkedlist格式。支持重复元素\n\t\t\t4 集合类型 set  ： 不允许重复元素\n\t\t\t5 有序集合类型 sortedset：不允许重复元素，且元素有顺序\n\t\t\n2. 字符串类型 string\n\t1. 存储： set key value\n\t\t127.0.0.1:6379&gt; set username zhangsan\n\t\tOK\n\t2. 获取： get key\n\t\t127.0.0.1:6379&gt; get username\n\t\t&quot;zhangsan&quot;\n\t3. 删除： del key\n\t\t127.0.0.1:6379&gt; del age\n\t\t(integer) 1\n3. 哈希类型 hash\n\t1. 存储： hset key field value\n\t\t127.0.0.1:6379&gt; hset myhash username lisi\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; hset myhash password 123\n\t\t(integer) 1\n\t2. 获取： \n\t\t* hget key field: 获取指定的field对应的值\n\t\t\t127.0.0.1:6379&gt; hget myhash username\n\t\t\t&quot;lisi&quot;\n\t\t* hgetall key：获取所有的field和value\n\t\t\t127.0.0.1:6379&gt; hgetall myhash\n\t\t\t1) &quot;username&quot;\n\t\t\t2) &quot;lisi&quot;\n\t\t\t3) &quot;password&quot;\n\t\t\t4) &quot;123&quot;\t\t\n\t3. 删除： hdel key field\n\t\t\t127.0.0.1:6379&gt; hdel myhash username\n\t\t\t(integer) 1\n\t\n4. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）\n\t1. 添加：\n\t\t1. lpush key value: 将元素加入列表左表\n\t\t2. rpush key value：将元素加入列表右边\t\n\t\t\t127.0.0.1:6379&gt; lpush myList a\n\t\t\t(integer) 1\n\t\t\t127.0.0.1:6379&gt; lpush myList b\n\t\t\t(integer) 2\n\t\t\t127.0.0.1:6379&gt; rpush myList c\n\t\t\t(integer) 3\n\t2. 获取：\n\t\t* lrange key start end ：范围获取\n\t\t\t127.0.0.1:6379&gt; lrange myList 0 -1\n\t\t\t1) &quot;b&quot;\n\t\t\t2) &quot;a&quot;\n\t\t\t3) &quot;c&quot;\n\t3. 删除：\n\t\t* lpop key： 删除列表最左边的元素，并将元素返回\n\t\t* rpop key： 删除列表最右边的元素，并将元素返回\n5. 集合类型 set ： 不允许重复元素\n\t1. 存储：sadd key value\n\t\t127.0.0.1:6379&gt; sadd myset a\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; sadd myset a\n\t\t(integer) 0\n\t2. 获取：smembers key:获取set集合中所有元素\n\t\t127.0.0.1:6379&gt; smembers myset\n\t\t1) &quot;a&quot;\n\t3. 删除：srem key value:删除set集合中的某个元素\t\n\t\t127.0.0.1:6379&gt; srem myset a\n\t\t(integer) 1\n6. 有序集合类型 sortedset\n\t不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\t1. 存储：zadd key score value\n\t\t127.0.0.1:6379&gt; zadd mysort 60 zhangsan\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; zadd mysort 50 lisi\n\t\t(integer) 1\n\t\t127.0.0.1:6379&gt; zadd mysort 80 wangwu\n\t\t(integer) 1\n\t2. 获取：zrange key start end [withscores]\n\t\t127.0.0.1:6379&gt; zrange mysort 0 -1\n\t\t1) &quot;lisi&quot;\n\t\t2) &quot;zhangsan&quot;\n\t\t3) &quot;wangwu&quot;\n\t\t127.0.0.1:6379&gt; zrange mysort 0 -1 withscores\n\t\t1) &quot;zhangsan&quot;\n\t\t2) &quot;60&quot;\n\t\t3) &quot;wangwu&quot;\n\t\t4) &quot;80&quot;\n\t\t5) &quot;lisi&quot;\n\t\t6) &quot;500&quot;\n\t3. 删除：zrem key value\n\t\t127.0.0.1:6379&gt; zrem mysort lisi\n\t\t(integer) 1\n7. 通用命令\n\t1. keys * : 查询所有的键\n\t2. type key ： 获取键对应的value的类型\n\t3. del key：删除指定的key value\n</code></pre>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<pre><code>   1. redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。\n   2. redis持久化机制：\n\t\t1. RDB：默认方式，不需要进行配置，默认就使用这种机制\n\t\t\t* 在一定的间隔时间中，检测key的变化情况，然后持久化数据\n\t\t\t1. 编辑redis.windwos.conf文件\n\t\t\t\t#   after 900 sec (15 min) if at least 1 key changed\n\t\t\t\tsave 900 1\n\t\t\t\t#   after 300 sec (5 min) if at least 10 keys changed\n\t\t\t\tsave 300 10\n\t\t\t\t#   after 60 sec if at least 10000 keys changed\n\t\t\t\tsave 60 10000\n\t\t\t\t\n\t\t\t2. 重新启动redis服务器，并指定配置文件名称\n\t\t\t\tD:\\JavaWeb2018\\day23_redis\\资料\\redis\\windows-64\\redis-2.8.9&gt;redis-server.exe redis.windows.conf\t\n\t\t\t\n\t\t2. AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据\n\t\t\t1. 编辑redis.windwos.conf文件\n\t\t\t\tappendonly no（关闭aof） --&gt; appendonly yes （开启aof）\n\t\t\t\t\n\t\t\t\t# appendfsync always ： 每一次操作都进行持久化\n\t\t\t\tappendfsync everysec ： 每隔一秒进行一次持久化\n\t\t\t\t# appendfsync no\t ： 不进行持久化\n</code></pre>\n<p>​</p>\n<h1 id=\"java客户端-jedis\"><a class=\"anchor\" href=\"#java客户端-jedis\">#</a> Java 客户端 Jedis</h1>\n<ul>\n<li>Jedis: 一款 java 操作 redis 数据库的工具.</li>\n<li>使用步骤：\n<ol>\n<li>下载 jedis 的 jar 包</li>\n<li>使用</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tjedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tjedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"jedis操作各种redis中的数据结构\"><a class=\"anchor\" href=\"#jedis操作各种redis中的数据结构\">#</a> Jedis 操作各种 redis 中的数据结构</h1>\n<h2 id=\"字符串类型-string\"><a class=\"anchor\" href=\"#字符串类型-string\">#</a> 字符串类型 string</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// 存储</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 可以使用 setex () 方法存储可以指定过期时间的 key value\t\t        jedis.setex (\"activecode\",20,\"hehe\");// 将 activecode：hehe 键值对存入 redis，并且 20 秒后自动删除该键值对</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"哈希类型-hash\"><a class=\"anchor\" href=\"#哈希类型-hash\">#</a> 哈希类型 hash :</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map格式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hget</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hgetAll</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 存储 hash</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 获取 hash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取 hash 的所有 map 中的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> user <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// keyset</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t            <span class=\"token comment\">// 获取 value</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"列表类型-list\"><a class=\"anchor\" href=\"#列表类型-list\">#</a> 列表类型 list</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>linkedlist格式。支持重复元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tlpush <span class=\"token operator\">/</span> rpush</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tlpop <span class=\"token operator\">/</span> rpop</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tlrange start end <span class=\"token operator\">:</span> 范围获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t <span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        <span class=\"token comment\">//list 存储</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lpush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从左边存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">rpush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从右边存</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        <span class=\"token comment\">//list 范围获取</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mylist <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        <span class=\"token comment\">//list 弹出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t        <span class=\"token class-name\">String</span> element1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lpop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token class-name\">String</span> element2 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">rpop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t        <span class=\"token comment\">//list 范围获取</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mylist2 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mylist2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t        <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"集合类型-set\"><a class=\"anchor\" href=\"#集合类型-set\">#</a> 集合类型 set</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不允许重复元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tsadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tsmembers<span class=\"token operator\">:</span>获取所有元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        <span class=\"token comment\">//set 存储</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myset\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"php\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t     <span class=\"token comment\">//set 获取</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myset <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"有序集合类型-sortedset\"><a class=\"anchor\" href=\"#有序集合类型-sortedset\">#</a> 有序集合类型 sortedset</h2>\n<p>​</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不允许重复元素，且元素有顺序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tzadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tzrange</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token comment\">//1. 获取连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空参构造，默认值 \"localhost\",6379 端口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t        <span class=\"token comment\">//2. 操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t        <span class=\"token comment\">//sortedset 存储</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"亚瑟\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"后裔\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"孙悟空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t        <span class=\"token comment\">//sortedset 获取</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mysortedset <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysortedset\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mysortedset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        <span class=\"token comment\">//3. 关闭连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t      jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​</p>\n<p>​</p>\n<h1 id=\"jedis连接池-jedispool\"><a class=\"anchor\" href=\"#jedis连接池-jedispool\">#</a> jedis 连接池： JedisPool</h1>\n<ul>\n<li>\n<p>使用：<br />\n​\t\t\t\t1. 创建 JedisPool 连接池对象<br />\n​\t\t\t\t2. 调用方法 getResource () 方法获取 Jedis 连接<br />\n​</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>​\t<span class=\"token comment\">//0. 创建一个配置对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">JedisPoolConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ​\t\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     ​\t\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     ​\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//1. 创建 Jedis 连接池对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">JedisPool</span> jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ​\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//2. 获取连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ​\t\t\t        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     ​\t\t\t        <span class=\"token comment\">//3. 使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     ​\t\t\t        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hehe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"heihei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>​\t\t\t            <span class=\"token comment\">//4. 关闭 归还到连接池中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​\t\t\t           jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>​</pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"连接池工具类\"><a class=\"anchor\" href=\"#连接池工具类\">#</a> 连接池工具类</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisPoolUtils</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t        <span class=\"token comment\">// 读取配置文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token class-name\">JedisPoolUtils</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jedis.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t        <span class=\"token comment\">// 创建 Properties 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t        <span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t        <span class=\"token comment\">// 关联文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t            pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t        <span class=\"token comment\">// 获取数据，设置到 JedisPoolConfig 中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t        <span class=\"token class-name\">JedisPoolConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxTotal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxIdle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t        <span class=\"token comment\">// 初始化 JedisPool</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t        jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t     * 获取连接方法</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t\t\t<br />\n​</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p><img data-src=\"../pictures/11-redis/image-20230825100655015.png\" alt=\"image-20230825100655015\" /></p>\n<p>案例需求：<br />\n1. 提供 index.html 页面，页面中有一个省份 下拉列表<br />\n 2. 当 页面加载完成后 发送 ajax 请求，加载所有省份</p>\n<ul>\n<li>注意：使用 redis 缓存一些不经常发生变化的数据。\n<ul>\n<li>数据库的数据一旦发生改变，则需要更新缓存。\n<ul>\n<li>数据库的表执行 增删改的相关操作，需要将 redis 缓存数据情况，再次存入</li>\n<li>在 service 对应的增删改方法中，将 redis 数据删除。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/10-Ajax-Json/",
            "url": "https://jihaipeng123.github.io/10-Ajax-Json/",
            "title": "10.Ajax&Json",
            "date_published": "2023-08-28T04:25:53.000Z",
            "content_html": "<h1 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> AJAX</h1>\n<pre><code>1. 概念： ASynchronous JavaScript And XML\t异步的JavaScript 和 XML\n\t1. 异步和同步：客户端和服务器端相互通信的基础上\n\t\t* 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。\n\t\t* 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。\n\t\tAjax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1] \n\t\t通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\t\t传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。\n\t\t提升用户的体验\n\n2. 实现方式：\n\t1. 原生的JS实现方式（了解）\n\t\t//1.创建核心对象\n\t            var xmlhttp;\n\t            if (window.XMLHttpRequest)\n\t            &#123;// code for IE7+, Firefox, Chrome, Opera, Safari\n\t                xmlhttp=new XMLHttpRequest();\n\t            &#125;\n\t            else\n\t            &#123;// code for IE6, IE5\n\t                xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n\t            &#125;\n\t\n\t    //2. 建立连接\n\t            /* 参数：\n\t                    1. 请求方式：GET、POST\n\t                        * get方式，请求参数在URL后边拼接。send方法为空参\n\t                        * post方式，请求参数在send方法中定义\n\t                    2. 请求的URL：\n\t                    3. 同步或异步请求：true（异步）或 false（同步）*/\n\t            xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);\n\t\n\t    //3.发送请求\n\t            xmlhttp.send();\n\t\n\t    //4.接受并处理来自服务器的响应结果\n\t    //获取方式 ：xmlhttp.responseText\n\t    //什么时候获取？当服务器响应成功后再获取\n\t\n\t    //当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。\n\t            xmlhttp.onreadystatechange=function()\n\t            &#123;\n\t                //判断readyState就绪状态是否为4，判断status响应状态码是否为200\n\t                if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)\n\t                &#123;\n\t                   //获取服务器的响应结果\n\t                    var responseText = xmlhttp.responseText;\n\t                    alert(responseText);\n\t                &#125;\n\t            &#125;\n\t2. JQeury实现方式\n\t\t1. $.ajax()\n\t\t\t* 语法：$.ajax(&#123;键值对&#125;);\n\t\t\t //使用$.ajax()发送异步请求\n\t            $.ajax(&#123;\n\t                url:&quot;ajaxServlet1111&quot; , // 请求路径\n\t                type:&quot;POST&quot; , //请求方式,默认get\n\t                //data: &quot;username=jack&amp;age=23&quot;,//请求参数\n\t                data:&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23&#125;,\n\t                success:function (data) &#123;\n\t                    alert(data);\n\t                &#125;,//响应成功后的回调函数\n\t                error:function () &#123;\n\t                    alert(&quot;出错啦...&quot;)\n\t                &#125;,//表示如果请求响应出现错误，会执行的回调函数\n\t                dataType:&quot;text&quot;//设置接受到的响应数据的格式\n\t            &#125;);\n\t\t2. $.get()：发送get请求\n\t\t\t* 语法：$.get(url, [data], [callback], [type])\n\t\t\t\t* 参数：\n\t\t\t\t\t* url：请求路径\n\t\t\t\t\t* data：请求参数\n\t\t\t\t\t* callback：回调函数\n\t\t\t\t\t* type：响应结果的类型\n\n\t\t3. $.post()：发送post请求\n\t\t\t* 语法：$.post(url, [data], [callback], [type])\n\t\t\t\t* 参数：\n\t\t\t\t\t* url：请求路径\n\t\t\t\t\t* data：请求参数\n\t\t\t\t\t* callback：回调函数\n\t\t\t\t\t* type：响应结果的类型\n</code></pre>\n<p><img data-src=\"../pictures/10-Ajax-Json/image-20230824091008576.png\" alt=\"image-20230824091008576\" /></p>\n<h1 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h1>\n<pre><code>1. 概念： JavaScript Object Notation\t\tJavaScript对象表示法\n\tPerson p = new Person();\n\tp.setName(&quot;张三&quot;);\n\tp.setAge(23);\n\tp.setGender(&quot;男&quot;);\n\n\tvar p = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;;\n\n\t* json现在多用于存储和交换文本信息的语法\n\t* 进行数据的传输\n\t* JSON 比 XML 更小、更快，更易解析。\n\n2. 语法：\n\t1. 基本规则\n\t\t* 数据在名称/值对中：json数据是由键值对构成的\n\t\t\t* 键用引号(单双都行)引起来，也可以不使用引号\n\t\t\t* 值得取值类型：\n\t\t\t\t1. 数字（整数或浮点数）\n\t\t\t\t2. 字符串（在双引号中）\n\t\t\t\t3. 逻辑值（true 或 false）\n\t\t\t\t4. 数组（在方括号中）\t&#123;&quot;persons&quot;:[&#123;&#125;,&#123;&#125;]&#125;\n\t\t\t\t5. 对象（在花括号中） &#123;&quot;address&quot;:&#123;&quot;province&quot;：&quot;陕西&quot;....&#125;&#125;\n\t\t\t\t6. null\n\t\t* 数据由逗号分隔：多个键值对由逗号分隔\n\t\t* 花括号保存对象：使用&#123;&#125;定义json 格式\n\t\t* 方括号保存数组：[]\n\t2. 获取数据:\n\t\t1. json对象.键名\n\t\t2. json对象[&quot;键名&quot;]\n\t\t3. 数组对象[索引]\n\t\t4. 遍历\n\t\t\t//1.定义基本格式\n\t\t        var person = &#123;&quot;name&quot;: &quot;张三&quot;, age: 23, 'gender': true&#125;;\n\t\t\n\t\t        var ps = [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,\n\t\t            &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true&#125;,\n\t\t            &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false&#125;];\n\t\t          //获取person对象中所有的键和值\n\t\t\t  //for in 循环\n\t\t\t       /* for(var key in person)&#123;\n\t\t\t            //这样的方式获取不行。因为相当于  person.&quot;name&quot;\n\t\t\t            //alert(key + &quot;:&quot; + person.key);\n\t\t\t            alert(key+&quot;:&quot;+person[key]);\n\t\t\t        &#125;*/\n\t\t\t//获取ps中的所有值\n\t\t        for (var i = 0; i &lt; ps.length; i++) &#123;\n\t\t            var p = ps[i];\n\t\t            for(var key in p)&#123;\n\t\t                alert(key+&quot;:&quot;+p[key]);\n\t\t            &#125;\n\t\t        &#125;\n\n\n3. JSON数据和Java对象的相互转换\n\n\t* JSON解析器：\n\t\t* 常见的解析器：Jsonlib，Gson，fastjson，jackson\n\t\n\t1. JSON转为Java对象\n\t\t1. 导入jackson的相关jar包\n\t\t2. 创建Jackson核心对象 ObjectMapper\n\t\t3. 调用ObjectMapper的相关方法进行转换\n\t\t\t1. readValue(json字符串数据,Class)\n\t2. Java对象转换JSON\n\t\t1. 使用步骤：\n\t\t\t1. 导入jackson的相关jar包\n\t\t\t2. 创建Jackson核心对象 ObjectMapper\n\t\t\t3. 调用ObjectMapper的相关方法进行转换\n\t\t\t\t1. 转换方法：\n\t\t\t\t\t* writeValue(参数1，obj):\n\t                    参数1：\n\t              File：将obj对象转换为JSON字符串，并保存到指定的文件中\n\t              Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中\n\t              OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中\n\t                * writeValueAsString(obj):将对象转为json字符串\n\t\t\t\t2. 注解：\n\t\t\t\t\t1. @JsonIgnore：排除属性。\n\t\t\t\t\t2. @JsonFormat：属性值得格式化\n\t\t\t\t\t\t* @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)\n\t\t\t\t3. 复杂java对象转换\n\t\t\t\t\t1. List：数组\n\t\t\t\t\t2. Map：对象格式一致\n</code></pre>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例：</h1>\n<pre><code>* 校验用户名是否存在\n\t1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：\n\t\t1. $.get(type):将最后一个参数type指定为&quot;json&quot;\n\t\t2. 在服务器端设置MIME类型\n\t\t\tresponse.setContentType(&quot;application/json;charset=utf-8&quot;);\n</code></pre>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/9-JQuery/",
            "url": "https://jihaipeng123.github.io/9-JQuery/",
            "title": "9.JQuery",
            "date_published": "2023-08-28T03:31:17.000Z",
            "content_html": "<h1 id=\"jquery-基础\"><a class=\"anchor\" href=\"#jquery-基础\">#</a> JQuery 基础</h1>\n<ol>\n<li>概念： 一个 JavaScript 框架。简化 JS 开发</li>\n</ol>\n<ul>\n<li>\n<p>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库（或 JavaScript 框架）。jQuery 设计的宗旨\t是 “write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装 JavaScript 常用的功能代码，提供一种简便的 JavaScript 设计模式，优\t化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。</p>\n</li>\n<li>\n<p>JavaScript 框架：本质上就是一些 js 文件，封装了 js 的原生代码而已</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>快速入门</p>\n</li>\n<li>\n<p>步骤：<br />\n1. 下载 JQuery</p>\n<ul>\n<li>目前 jQuery 有三个大版本：<br />\n1.x：兼容 ie678, 使用最为广泛的，官方只做 BUG 维护，<br />\n功能不再新增。因此一般项目来说，使用 1.x 版本就可以了，<br />\n最终版本：1.12.4 (2016 年 5 月 20 日)<br />\n 2.x：不兼容 ie678，很少有人使用，官方只做 BUG 维护，<br />\n功能不再新增。如果不考虑兼容低版本的浏览器可以使用 2.x，<br />\n最终版本：2.2.4 (2016 年 5 月 20 日)<br />\n 3.x：不兼容 ie678，只支持最新的浏览器。除非特殊要求，<br />\n一般不会使用 3.x 版本的，很多老的 jQuery 插件不支持这个版本。<br />\n目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017 年 3 月 20 日）</li>\n<li>jquery-xxx.js 与 jquery-xxx.min.js 区别：\n<ol>\n<li>jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</li>\n<li>jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p>导入 JQuery 的 js 文件：导入 min.js 文件</p>\n<p>使用</p>\n<pre><code>  var div1 = $(&quot;#div1&quot;);\n  alert(div1.html());\n</code></pre>\n<p>JQuery 对象和 JS 对象区别与转换</p>\n<p>JQuery 对象在操作时，更加方便。</p>\n<p>JQuery 对象和 js 对象方法不通用的.</p>\n<p>两者相互转换</p>\n<ul>\n<li>jq -- &gt; js : jq 对象 [索引] 或者 jq 对象.get (索引)</li>\n<li>js -- &gt; jq : $(js 对象)</li>\n</ul>\n<p>选择器：筛选具有相似特征的元素 (标签)</p>\n<ol>\n<li>事件绑定<br />\n<a href=\"//1.xn--b1-wi6co09cbr2bwjv\"> //1. 获取 b1 按钮</a><br />\n $(&quot;#b1&quot;).click (function (){</li>\n</ol>\n<pre><code>alert(&quot;abc&quot;);\n &#125;);\n</code></pre>\n<ol start=\"2\">\n<li>入口函数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">(</span>function <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>window.onload  和 $(function) 区别</p>\n<pre><code> * window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉\n    $(function)可以定义多次的。\n</code></pre>\n<ol start=\"3\">\n<li>样式控制：css 方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// $(\"#div1\").css(\"background-color\",\"red\");</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t$<span class=\"token punctuation\">(</span><span class=\"token string\">\"#div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"backgroundColor\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​</p>\n<h1 id=\"选择器分类\"><a class=\"anchor\" href=\"#选择器分类\">#</a> 选择器分类</h1>\n<h2 id=\"基本选择器\"><a class=\"anchor\" href=\"#基本选择器\">#</a> 基本选择器</h2>\n<ol>\n<li>\n<p>标签选择器（元素选择器）</p>\n<ul>\n<li>语法： $(&quot;html 标签名&quot;) 获得所有匹配标签名称的元素语法： $(&quot;html 标签名&quot;) 获得所有匹配标签名称的元素</li>\n</ul>\n</li>\n<li>\n<p>id 选择器</p>\n<ul>\n<li>语法： $(&quot;#id 的属性值&quot;) 获得与指定 id 属性值匹配的元素</li>\n</ul>\n</li>\n<li>\n<p>类选择器</p>\n<ul>\n<li>语法： $(&quot;.class 的属性值&quot;) 获得与指定的 class 属性值匹配的元素</li>\n</ul>\n</li>\n<li>\n<p>并集选择器：</p>\n<ul>\n<li>语法： $(&quot;选择器 1, 选择器 2....&quot;) 获取多个选择器选中的所有元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"层级选择器\"><a class=\"anchor\" href=\"#层级选择器\">#</a> 层级选择器</h2>\n<ol>\n<li>\n<p>后代选择器</p>\n<ul>\n<li>语法： $(&quot;A B&quot;) 选择 A 元素内部的所有 B 元素</li>\n</ul>\n</li>\n<li>\n<p>子选择器</p>\n<ul>\n<li>语法： $(&quot;A&gt; B&quot;) 选择 A 元素内部的所有 B 子元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"属性选择器\"><a class=\"anchor\" href=\"#属性选择器\">#</a> 属性选择器</h2>\n<ol>\n<li>\n<p>属性名称选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名]&quot;) 包含指定属性的选择器</li>\n</ul>\n</li>\n<li>\n<p>属性选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名 =' 值 ']&quot;) 包含指定属性等于指定值的选择器</li>\n</ul>\n</li>\n<li>\n<p>复合属性选择器</p>\n<ul>\n<li>语法： $(&quot;A [属性名 =' 值 '][]...&quot;) 包含多个属性条件的选择器</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"过滤选择器\"><a class=\"anchor\" href=\"#过滤选择器\">#</a> 过滤选择器</h2>\n<ol>\n<li>\n<p>首元素选择器</p>\n<ul>\n<li>语法： :first 获得选择的元素中的第一个元素</li>\n</ul>\n</li>\n<li>\n<p>尾元素选择器</p>\n<ul>\n<li>语法： :last 获得选择的元素中的最后一个元素</li>\n</ul>\n</li>\n<li>\n<p>非元素选择器</p>\n<ul>\n<li>语法： :not (selector) 不包括指定内容的元素</li>\n</ul>\n</li>\n<li>\n<p>偶数选择器</p>\n<ul>\n<li>语法： :even 偶数，从 0 开始计数</li>\n</ul>\n</li>\n<li>\n<p>奇数选择器</p>\n<ul>\n<li>语法： :odd 奇数，从 0 开始计数</li>\n</ul>\n</li>\n<li>\n<p>等于索引选择器</p>\n<ul>\n<li>语法： :eq (index) 指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>大于索引选择器</p>\n<ul>\n<li>语法： :gt (index) 大于指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>小于索引选择器</p>\n<ul>\n<li>语法： :lt (index) 小于指定索引元素</li>\n</ul>\n</li>\n<li>\n<p>标题选择器</p>\n<ul>\n<li>语法： :header 获得标题（h1~h6）元素，固定写法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"表单过滤选择器\"><a class=\"anchor\" href=\"#表单过滤选择器\">#</a> 表单过滤选择器</h2>\n<ol>\n<li>\n<p>可用元素选择器</p>\n<ul>\n<li>语法： :enabled 获得可用元素</li>\n</ul>\n</li>\n<li>\n<p>不可用元素选择器</p>\n<ul>\n<li>语法： :disabled 获得不可用元素</li>\n</ul>\n</li>\n<li>\n<p>选中选择器</p>\n<ul>\n<li>语法： :checked 获得单选 / 复选框选中的元素</li>\n</ul>\n</li>\n<li>\n<p>选中选择器</p>\n<ul>\n<li>语法： :selected 获得下拉框选中的元素</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"dom操作\"><a class=\"anchor\" href=\"#dom操作\">#</a> DOM 操作</h1>\n<h2 id=\"内容操作\"><a class=\"anchor\" href=\"#内容操作\">#</a> 内容操作</h2>\n<ol>\n<li>html (): 获取 / 设置元素的标签体内容   &lt;a&gt;&lt;font &gt; 内容 &lt;/font&gt;&lt;/a&gt;  --&gt; &lt;font &gt; 内容 &lt;/font&gt;</li>\n<li>text (): 获取 / 设置元素的标签体纯文本内容   &lt;a&gt;&lt;font &gt; 内容 &lt;/font&gt;&lt;/a&gt; --&gt; 内容</li>\n<li>val ()： 获取 / 设置元素的 value 属性值</li>\n</ol>\n<h2 id=\"属性操作\"><a class=\"anchor\" href=\"#属性操作\">#</a> 属性操作</h2>\n<ol>\n<li>通用属性操作\n<ol>\n<li>attr (): 获取 / 设置元素的属性</li>\n<li>removeAttr (): 删除属性</li>\n<li>prop (): 获取 / 设置元素的属性</li>\n<li>removeProp (): 删除属性</li>\n</ol>\n<ul>\n<li>attr 和 prop 区别？<br />\n1. 如果操作的是元素的固有属性，则建议使用 prop<br />\n2. 如果操作的是元素自定义的属性，则建议使用 attr</li>\n</ul>\n</li>\n<li>对 class 属性操作\n<ol>\n<li>addClass (): 添加 class 属性值</li>\n<li>removeClass (): 删除 class 属性值</li>\n<li>toggleClass (): 切换 class 属性</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>toggleClass(&quot;one&quot;):\n<ul>\n<li>判断如果元素对象上存在 class=&quot;one&quot;，则将属性值 one 删除掉。  如果元素对象上不存在 class=&quot;one&quot;，则添加</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"crud操作\"><a class=\"anchor\" href=\"#crud操作\">#</a> CRUD 操作</h2>\n<ol>\n<li>\n<p>append (): 父元素将子元素追加到末尾</p>\n<ul>\n<li>对象 1.append (对象 2): 将对象 2 添加到对象 1 元素内部，并且在末尾</li>\n</ul>\n</li>\n<li>\n<p>prepend (): 父元素将子元素追加到开头</p>\n<ul>\n<li>对象 1.prepend (对象 2): 将对象 2 添加到对象 1 元素内部，并且在开头</li>\n</ul>\n</li>\n<li>\n<p>appendTo():</p>\n<ul>\n<li>对象 1.appendTo (对象 2): 将对象 1 添加到对象 2 内部，并且在末尾</li>\n</ul>\n</li>\n<li>\n<p>prependTo()：</p>\n<ul>\n<li>对象 1.prependTo (对象 2): 将对象 1 添加到对象 2 内部，并且在开头</li>\n</ul>\n</li>\n<li>\n<p>after (): 添加元素到元素后边</p>\n<ul>\n<li>对象 1.after (对象 2)： 将对象 2 添加到对象 1 后边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>before (): 添加元素到元素前边</p>\n<ul>\n<li>对象 1.before (对象 2)： 将对象 2 添加到对象 1 前边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>insertAfter()</p>\n<ul>\n<li>对象 1.insertAfter (对象 2)：将对象 2 添加到对象 1 后边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>insertBefore()</p>\n<ul>\n<li>对象 1.insertBefore (对象 2)： 将对象 2 添加到对象 1 前边。对象 1 和对象 2 是兄弟关系</li>\n</ul>\n</li>\n<li>\n<p>remove (): 移除元素</p>\n<ul>\n<li>对象.remove (): 将对象删除掉</li>\n</ul>\n</li>\n<li>\n<p>empty (): 清空元素的所有后代元素。</p>\n<ul>\n<li>对象.empty (): 将对象的后代元素全部清空，但是保留当前对象以及其属性节点<br />\n注意： $(&quot;#b&quot;).clone (); 克隆所有 b 元素；</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"jquery-高级\"><a class=\"anchor\" href=\"#jquery-高级\">#</a> JQuery 高级</h1>\n<h1 id=\"动画\"><a class=\"anchor\" href=\"#动画\">#</a> 动画</h1>\n<ol>\n<li>三种方式显示和隐藏元素\n<ol>\n<li>\n<p>默认显示和隐藏方式</p>\n<ol>\n<li>\n<p>show([speed,[easing],[fn]])</p>\n<ol>\n<li>speed：动画的速度。三个预定义的值 (&quot;slow&quot;,&quot;normal&quot;, &quot;fast&quot;) 或表示动画时长的毫秒数值 (如：1000)</li>\n<li>easing：用来指定切换效果，默认是 &quot;swing&quot;，可用参数 &quot;linear&quot;\n<ul>\n<li>swing：动画执行时效果是 先慢，中间快，最后又慢</li>\n<li>linear：动画执行时速度是匀速的</li>\n</ul>\n</li>\n<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>\n</ol>\n</li>\n<li>\n<p>hide([speed,[easing],[fn]])</p>\n</li>\n<li>\n<p>toggle([speed],[easing],[fn])</p>\n</li>\n</ol>\n</li>\n<li>\n<p>滑动显示和隐藏方式</p>\n<ol>\n<li>slideDown([speed],[easing],[fn])</li>\n<li>slideUp([speed,[easing],[fn]])</li>\n<li>slideToggle([speed],[easing],[fn])</li>\n</ol>\n</li>\n<li>\n<p>淡入淡出显示和隐藏方式</p>\n<ol>\n<li>fadeIn([speed],[easing],[fn])</li>\n<li>fadeOut([speed],[easing],[fn])</li>\n<li>fadeToggle([speed,[easing],[fn]])</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"遍历\"><a class=\"anchor\" href=\"#遍历\">#</a> 遍历</h1>\n<ol>\n<li>js 的遍历方式\n<ul>\n<li>for (初始化值；循环结束条件；步长)</li>\n</ul>\n</li>\n<li>jq 的遍历方式\n<ol>\n<li>jq 对象.each (callback)\n<ol>\n<li>\n<p>语法：<br />\njquery 对象.each (function (index,element){});<br />\n* index: 就是元素在集合中的索引<br />\n * element：就是集合中的每一个元素对象</p>\n<p>​    * this：集合中的每一个元素对象</p>\n</li>\n<li>\n<p>回调函数返回值：</p>\n<ul>\n<li>true: 如果当前 function 返回为 false，则结束循环 (break)。</li>\n<li>false: 如果当前 function 返回为 true，则结束本次循环，继续下次循环 (continue)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>$.each(object, [callback])</li>\n<li>for..of: jquery 3.0 版本之后提供的方式<br />\n for (元素对象 of 容器对象)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"事件绑定\"><a class=\"anchor\" href=\"#事件绑定\">#</a> 事件绑定</h1>\n<ol>\n<li>jquery 标准的绑定方式\n<ul>\n<li>jq 对象。事件方法 (回调函数)；</li>\n<li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</li>\n<li>表单对象.submit ();// 让表单提交</li>\n</ul>\n</li>\n<li>on 绑定事件 /off 解除绑定\n<ul>\n<li>jq 对象.on (&quot;事件名称&quot;, 回调函数)</li>\n<li>jq 对象.off (&quot;事件名称&quot;)</li>\n<li>如果 off 方法不传递任何参数，则将组件上的所有事件全部解绑</li>\n</ul>\n</li>\n<li>事件切换：toggle\n<ul>\n<li>\n<p>jq 对象.toggle (fn1,fn2...)</p>\n</li>\n<li>\n<p>当单击 jq 对象对应的组件后，会执行 fn1. 第二次点击会执行 fn2.....</p>\n</li>\n<li>\n<p>注意：1.9 版本 .toggle () 方法删除，jQuery Migrate（迁移）插件可以恢复此功能。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/jquery-migrate-1.0.0.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p>见代码</p>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/8JSP-EL-JSTL/",
            "url": "https://jihaipeng123.github.io/8JSP-EL-JSTL/",
            "title": "8.JSP&EL&JSTL",
            "date_published": "2023-08-28T02:08:20.000Z",
            "content_html": "<h1 id=\"jsp入门学习\"><a class=\"anchor\" href=\"#jsp入门学习\">#</a> JSP：入门学习</h1>\n<ol>\n<li>\n<p>概念：</p>\n<ul>\n<li>Java Server Pages： java 服务器端页面\n<ul>\n<li>可以理解为：一个特殊的页面，其中既可以指定定义 html 标签，又可以定义 java 代码</li>\n<li>用于简化书写！！！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>原理</p>\n<ul>\n<li>JSP 本质上就是一个 Servlet</li>\n</ul>\n</li>\n<li>\n<p>JSP 的脚本：JSP 定义 Java 代码的方式</p>\n<ol>\n<li>&lt;%  代码 %&gt;：定义的 java 代码，在 service 方法中。service 方法中可以定义什么，该脚本中就可以定义什么。</li>\n<li>&lt;%! 代码 %&gt;：定义的 java 代码，在 jsp 转换后的 java 类的成员位置。</li>\n<li>&lt;%= 代码 %&gt;：定义的 java 代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li>\n</ol>\n</li>\n<li>\n<p>JSP 的内置对象：</p>\n<ul>\n<li>在 jsp 页面中不需要获取和创建，可以直接使用的对象</li>\n<li>jsp 一共有 9 个内置对象。</li>\n<li>今天学习 3 个：\n<ul>\n<li>request</li>\n<li>response</li>\n<li>out：字符输出流对象。可以将数据输出到页面上。和 response.getWriter () 类似\n<ul>\n<li>response.getWriter () 和 out.write () 的区别：\n<ul>\n<li>在 tomcat 服务器真正给客户端做出响应之前，会先找 response 缓冲区数据，再找 out 缓冲区数据。</li>\n<li>response.getWriter () 数据输出永远在 out.write () 之前</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h2>\n<ul>\n<li>作用：用于配置 JSP 页面，导入资源文件</li>\n<li>格式：<br />\n&lt;%@ 指令名称 属性名 1 = 属性值 1 属性名 2 = 属性值 2 ... %&gt;</li>\n<li>分类：\n<ol>\n<li>\n<p>page\t\t： 配置 JSP 页面的<br />\n * contentType：等同于 response.setContentType ()</p>\n<ol>\n<li>设置响应体的 mime 类型以及字符集</li>\n<li>设置当前 jsp 页面的编码（只能是高级的 IDE 才能生效，如果使用低级工具，则需要设置 pageEncoding 属性设置当前页面的字符集）</li>\n</ol>\n</li>\n</ol>\n<pre><code>* import：导包\n* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面\n* isErrorPage：标识当前也是是否是错误页面。\n\t* true：是，可以使用内置对象exception\n\t* false：否。默认值。不可以使用内置对象exception\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>include\t： 页面包含的。导入页面的资源文件</p>\n<ul>\n<li>&lt;%@include file=&quot;top.jsp&quot;%&gt;</li>\n</ul>\n</li>\n<li>\n<p>taglib\t： 导入资源<br />\n * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuc3VuLmNvbS9qc3AvanN0bC9jb3Jl\">http://java.sun.com/jsp/jstl/core</span>&quot; %&gt;<br />\n* prefix：前缀，自定义的</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<ol>\n<li>html 注释：<br />\n&lt;!-- --&gt;: 只能注释 html 代码片段</li>\n<li>jsp 注释：推荐使用<br />\n &lt;%-- --%&gt;：可以注释所有</li>\n</ol>\n<h2 id=\"内置对象\"><a class=\"anchor\" href=\"#内置对象\">#</a> 内置对象</h2>\n<ul>\n<li>在 jsp 页面中不需要创建，直接使用的对象</li>\n<li>一共有 9 个：<br />\n变量名\t\t\t\t\t真实类型\t\t\t\t\t\t作用\n<ul>\n<li>pageContext\t\t\t\tPageContext\t\t\t\t\t当前页面共享数据，还可以获取其他八个内置对象</li>\n<li>request\t\t\t\t\tHttpServletRequest\t\t\t一次请求访问的多个资源 (转发)</li>\n<li>session\t\t\t\t\tHttpSession\t\t\t\t\t一次会话的多个请求间</li>\n<li>application\t\t\t\tServletContext\t\t\t\t所有用户间共享数据</li>\n<li>response\t\t\t\t\tHttpServletResponse\t\t\t响应对象</li>\n<li>page\t\t\t\t\t\tObject\t\t\t\t\t\t当前页面 (Servlet) 的对象  this</li>\n<li>out\t\t\t\t\t\tJspWriter\t\t\t\t\t输出对象，数据输出到页面上</li>\n<li>config\t\t\t\t\tServletConfig\t\t\t\tServlet 的配置对象</li>\n<li>exception\t\t\t\t\tThrowable\t\t\t\t\t异常对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"mvc开发模式\"><a class=\"anchor\" href=\"#mvc开发模式\">#</a> MVC：开发模式</h1>\n<ol>\n<li>\n<p>jsp 演变历史</p>\n<ol>\n<li>早期只有 servlet，只能使用 response 输出标签数据，非常麻烦</li>\n<li>后来又 jsp，简化了 Servlet 的开发，如果过度使用 jsp，在 jsp 中即写大量的 java 代码，有写 html 表，造成难于维护，难于分工协作</li>\n<li>再后来，java 的 web 开发，借鉴 mvc 开发模式，使得程序的设计更加合理性</li>\n</ol>\n</li>\n<li>\n<p>MVC：</p>\n<ol>\n<li>M：Model，模型。JavaBean\n<ul>\n<li>完成具体的业务操作，如：查询数据库，封装对象</li>\n</ul>\n</li>\n<li>V：View，视图。JSP\n<ul>\n<li>展示数据</li>\n</ul>\n</li>\n<li>C：Controller，控制器。Servlet\n<ul>\n<li>获取用户的输入</li>\n<li>调用模型</li>\n<li>将数据交给视图进行展示</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>优缺点：\n<ol>\n<li>\n<p>优点：</p>\n<ol>\n<li>耦合性低，方便维护，可以利于分工协作</li>\n<li>重用性高</li>\n</ol>\n</li>\n<li>\n<p>缺点：</p>\n<ol>\n<li>使得项目架构变得复杂，对开发人员要求高</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"../pictures/8JSP-EL-JSTL/image-20230828102729900.png\" alt=\"image-20230828102729900\" /></p>\n<h1 id=\"el表达式\"><a class=\"anchor\" href=\"#el表达式\">#</a> EL 表达式</h1>\n<ol>\n<li>\n<p>概念：Expression Language 表达式语言</p>\n</li>\n<li>\n<p>作用：替换和简化 jsp 页面中 java 代码的编写</p>\n</li>\n<li 表达式=\"\">\n<p>语法：$</p>\n</li>\n<li>\n<p>注意：</p>\n<ul>\n<li>jsp 默认支持 el 表达式的。如果要忽略 el 表达式\n<ol>\n<li>设置 jsp 中 page 指令中：isELIgnored=&quot;true&quot; 忽略当前 jsp 页面中所有的 el 表达式</li>\n<li>${表达式} ：忽略当前这个 el 表达式</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>使用：</p>\n<ol>\n<li>\n<p>运算：</p>\n<ul>\n<li>运算符：\n<ol>\n<li>算数运算符： + - * /(div) %(mod)</li>\n<li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li>\n<li>逻辑运算符： &amp;&amp;(and) ||(or) !(not)</li>\n<li>空运算符： empty\n<ul>\n<li>功能：用于判断字符串、集合、数组对象是否为 null 或者长度是否为 0</li>\n<li>${empty list}: 判断字符串、集合、数组对象是否为 null 或者长度为 0</li>\n<li>${not empty str}: 表示判断字符串、集合、数组对象是否不为 null 并且 长度 &gt; 0</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>获取值</p>\n<ol>\n<li>el 表达式只能从域对象中获取值</li>\n<li>语法：</li>\n<li>${域名称。键名}：从指定域中获取指定键的值</li>\n</ol>\n<pre><code> * 域名称：\n \t1. pageScope\t\t--&gt; pageContext\n \t2. requestScope \t--&gt; request\n \t3. sessionScope \t--&gt; session\n \t4. applicationScope --&gt; application（ServletContext）\n * 举例：在request域中存储了name=张三\n * 获取：$&#123;requestScope.name&#125;\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p>\n</li>\n<li 域名称.键名.属性名=\"\">\n<p>获取对象、List 集合、Map 集合的值<br />\n 1. 对象：$</p>\n<ul>\n<li>本质上会去调用对象的 getter 方法</li>\n</ul>\n</li>\n</ol>\n<pre><code> 2. List集合：$&#123;域名称.键名[索引]&#125;\n 3. Map集合：\n \t* $&#123;域名称.键名.key名称&#125;\n \t* $&#123;域名称.键名[&quot;key名称&quot;]&#125;\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>隐式对象：</p>\n<ul>\n<li>el 表达式中有 11 个隐式对象</li>\n<li>pageContext：\n<ul>\n<li>获取 jsp 其他八个内置对象\n<ul>\n<li>${pageContext.request.contextPath}：动态获取虚拟目录.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"jstl\"><a class=\"anchor\" href=\"#jstl\">#</a> JSTL</h1>\n<ol>\n<li>\n<p>概念：JavaServer Pages Tag Library  JSP 标准标签库</p>\n<ul>\n<li>是由 Apache 组织提供的开源的免费的 jsp 标签\t\t&lt;标签&gt;</li>\n</ul>\n</li>\n<li>\n<p>作用：用于简化和替换 jsp 页面上的 java 代码</p>\n</li>\n<li>\n<p>使用步骤：</p>\n<ol>\n<li>导入 jstl 相关 jar 包</li>\n<li>引入标签库：taglib 指令：  &lt;%@ taglib %&gt;</li>\n<li>使用标签</li>\n</ol>\n</li>\n<li>\n<p>常用的 JSTL 标签</p>\n<ol>\n<li>\n<p>if: 相当于 java 代码的 if 语句</p>\n<ol>\n<li>属性：\n<ul>\n<li>test 必须属性，接受 boolean 表达式\n<ul>\n<li>如果表达式为 true，则显示 if 标签体内容，如果为 false，则不显示标签体内容</li>\n<li>一般情况下，test 属性值会结合 el 表达式一起使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span> c<span class=\"token operator\">:</span><span class=\"token keyword\">if</span>标签没有<span class=\"token keyword\">else</span>情况，想要<span class=\"token keyword\">else</span>情况，则可以在定义一个c<span class=\"token operator\">:</span><span class=\"token keyword\">if</span>标签</pre></td></tr></table></figure></li>\n</ol>\n<pre><code>2. choose:相当于java代码的switch语句\n1. 使用choose标签声明         \t\t\t相当于switch声明\n   2. 使用when标签做判断         \t\t\t相当于case\n  3. 使用otherwise标签做其他情况的声明    \t相当于default\n\n3. foreach:相当于java代码的for语句\n  1. 完成重复的操作\n      for(int i = 0; i &lt; 10; i ++)&#123;\n\n      &#125;\n      * 属性：\n          begin：开始值（包含）\n          end：结束值（包含）\n          var：临时变量\n          step：步长\n          varStatus:循环状态对象\n              index:容器中元素的索引，从0开始\n              count:循环次数，从1开始\n  2. 遍历容器\n      List&lt;User&gt; list;\n      for(User user : list)&#123;\n\n      &#125;\n\n      * 属性：\n          items:容器对象\n          var:容器中元素的临时变量\n          varStatus:循环状态对象\n              index:容器中元素的索引，从0开始\n              count:循环次数，从1开始\n</code></pre>\n</li>\n<li>\n<p>练习：</p>\n<ul>\n<li>需求：在 request 域中有一个存有 User 对象的 List 集合。需要使用 jstl+el 将 list 集合数据展示到 jsp 页面的表格 table 中</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"三层架构软件设计架构\"><a class=\"anchor\" href=\"#三层架构软件设计架构\">#</a> 三层架构：软件设计架构</h1>\n<ol>\n<li>界面层 (表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li>\n<li>业务逻辑层：处理业务逻辑的。</li>\n<li>数据访问层：操作数据存储文件。</li>\n</ol>\n<p><img data-src=\"../pictures/8JSP-EL-JSTL/image-20230828103017151.png\" alt=\"image-20230828103017151\" /></p>\n<h1 id=\"案例用户信息列表展示\"><a class=\"anchor\" href=\"#案例用户信息列表展示\">#</a> 案例：用户信息列表展示</h1>\n<ol>\n<li>需求：用户信息的增删改查操作</li>\n<li>设计：</li>\n<li>技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</li>\n<li>数据库设计：</li>\n</ol>\n<pre><code>create database day17; -- 创建数据库\nuse day17; \t\t\t   -- 使用数据库\ncreate table user(   -- 创建表\n\tid int primary key auto_increment,\n\tname varchar(20) not null,\n\tgender varchar(5),\n\tage int,\n\taddress varchar(32),\n\tqq\tvarchar(20),\n\temail varchar(50)\n);\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>开发：</p>\n</li>\n<li>\n<p>环境搭建</p>\n<ol>\n<li>创建数据库环境<br />\n 2. 创建项目，导入需要的 jar 包</li>\n</ol>\n</li>\n<li>\n<p>编码</p>\n</li>\n<li>\n<p>测试</p>\n</li>\n<li>\n<p>部署运维</p>\n</li>\n</ol>\n",
            "tags": [
                "JavaWeb"
            ]
        },
        {
            "id": "https://jihaipeng123.github.io/7Cookie&Session/",
            "url": "https://jihaipeng123.github.io/7Cookie&Session/",
            "title": "7.Cookie&Session",
            "date_published": "2023-08-28T01:25:43.000Z",
            "content_html": "<p>会话技术</p>\n<ol>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n<h2 id=\"会话技术\"><a class=\"anchor\" href=\"#会话技术\">#</a> 会话技术</h2>\n<ol>\n<li>会话：一次会话中包含多次请求和响应。\n<ul>\n<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>\n</ul>\n</li>\n<li>功能：在一次会话的范围内的多次请求间，共享数据</li>\n<li>方式：\n<ol>\n<li>客户端会话技术：Cookie</li>\n<li>服务器端会话技术：Session</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie：</h2>\n<ol>\n<li>\n<p>概念：客户端会话技术，将数据保存到客户端</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ul>\n<li>使用步骤：\n<ol>\n<li>创建 Cookie 对象，绑定数据\n<ul>\n<li>new Cookie(String name, String value)</li>\n</ul>\n</li>\n<li>发送 Cookie 对象\n<ul>\n<li>response.addCookie(Cookie cookie)</li>\n</ul>\n</li>\n<li>获取 Cookie，拿到数据\n<ul>\n<li>Cookie[]  request.getCookies()</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>实现原理</p>\n<ul>\n<li>基于响应头 set-cookie 和请求头 cookie 实现</li>\n</ul>\n</li>\n<li>\n<p>cookie 的细节</p>\n<ol>\n<li>一次可不可以发送多个 cookie?\n<ul>\n<li>可以</li>\n<li>可以创建多个 Cookie 对象，使用 response 调用多次 addCookie 方法发送 cookie 即可。</li>\n</ul>\n</li>\n<li>cookie 在浏览器中保存多长时间？\n<ol>\n<li>默认情况下，当浏览器关闭后，Cookie 数据被销毁</li>\n<li>持久化存储：\n<ul>\n<li>setMaxAge(int seconds)\n<ol>\n<li>正数：将 Cookie 数据写到硬盘的文件中。持久化存储。并指定 cookie 存活时间，时间到后，cookie 文件自动失效</li>\n<li>负数：默认值</li>\n<li>零：删除 cookie 信息</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>cookie 能不能存中文？\n<ul>\n<li>在 tomcat 8 之前 cookie 中不能直接存储中文数据。\n<ul>\n<li>需要将中文数据转码 --- 一般采用 URL 编码 (% E3)</li>\n</ul>\n</li>\n<li>在 tomcat 8 之后，cookie 支持中文数据。特殊字符还是不支持，建议使用 URL 编码存储，URL 解码解析</li>\n</ul>\n</li>\n<li>cookie 共享问题？\n<ol>\n<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？</li>\n</ol>\n<ul>\n<li>\n<p>默认情况下 cookie 不能共享</p>\n</li>\n<li>\n<p>setPath (String path): 设置 cookie 的获取范围。默认情况下，设置当前的虚拟目录</p>\n<ul>\n<li>如果要共享，则可以将 path 设置为 &quot;/&quot;</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>不同的 tomcat 服务器间 cookie 共享问题？\n<ul>\n<li>setDomain (String path): 如果设置一级域名相同，那么多个服务器之间 cookie 可以共享</li>\n<li>setDomain (&quot;.baidu.com&quot;), 那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>​\t\t\t<br />\n​</p>\n<ol start=\"5\">\n<li>\n<p>Cookie 的特点和作用</p>\n<ol>\n<li>cookie 存储数据在客户端浏览器</li>\n<li>浏览器对于单个 cookie 的大小有限制 (4kb) 以及 对同一个域名下的总 cookie 数量也有限制 (20 个)</li>\n</ol>\n<ul>\n<li>作用：\n<ol>\n<li>cookie 一般用于存出少量的不太敏感的数据</li>\n<li>在不登录的情况下，完成服务器对客户端的身份识别</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>案例：记住上一次访问时间</p>\n<ol>\n<li>\n<p>需求：</p>\n<ol>\n<li>访问一个 Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li>\n<li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串</li>\n</ol>\n</li>\n<li>\n<p>分析：</p>\n<ol>\n<li>可以采用 Cookie 来完成</li>\n<li>在服务器中的 Servlet 判断是否有一个名为 lastTime 的 cookie\n<ol>\n<li>有：不是第一次访问\n<ol>\n<li>响应数据：欢迎回来，您上次访问时间为：2018 年 6 月 10 日 11:50:20</li>\n<li>写回 Cookie：lastTime=2018 年 6 月 10 日 11:50:01</li>\n</ol>\n</li>\n<li>没有：是第一次访问\n<ol>\n<li>响应数据：您好，欢迎您首次访问</li>\n<li>写回 Cookie：lastTime=2018 年 6 月 10 日 11:50:01</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>代码实现：</p>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLDecoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLEncoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookieTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t        <span class=\"token comment\">// 设置响应的消息体的数据格式以及编码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t        <span class=\"token comment\">//1. 获取所有 Cookie</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有 cookie 为 lastTime</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t        <span class=\"token comment\">//2. 遍历 cookie 数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cookies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">:</span> cookies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t                <span class=\"token comment\">//3. 获取 cookie 的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t                <span class=\"token comment\">//4. 判断名称是否是：lastTime</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t                    <span class=\"token comment\">// 有该 Cookie，不是第一次访问</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有 lastTime 的 cookie</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t                    <span class=\"token comment\">// 设置 Cookie 的 value</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t                    <span class=\"token comment\">// 获取当前时间的字符串，重新设置 Cookie 的值，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t                    <span class=\"token class-name\">Date</span> date  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t                    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t                    <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码前：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t                    <span class=\"token comment\">//URL 编码</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t                    str_date <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码后：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t                    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t                    <span class=\"token comment\">// 设置 cookie 的存活时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t                    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个月</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t                    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                         <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t                <span class=\"token comment\">// 获取 Cookie 的 value，时间</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t                 <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t                 <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码前：\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t                 <span class=\"token comment\">//URL 解码：</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t                 value <span class=\"token operator\">=</span> <span class=\"token class-name\">URLDecoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t                 <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解码后：\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t                 response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>欢迎回来，您上次访问时间为:\"</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> cookies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t            <span class=\"token comment\">// 没有，第一次访问</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 设置 Cookie 的 value</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t            <span class=\"token comment\">// 获取当前时间的字符串，重新设置 Cookie 的值，重新发送 cookie</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t            <span class=\"token class-name\">Date</span> date  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t            <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t            <span class=\"token class-name\">String</span> str_date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码前：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t            <span class=\"token comment\">//URL 编码</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t            str_date <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str_date<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编码后：\"</span><span class=\"token operator\">+</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t            <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastTime\"</span><span class=\"token punctuation\">,</span>str_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t            <span class=\"token comment\">// 设置 cookie 的存活时间</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t            cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个月</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>您好，欢迎您首次访问&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"session主菜\"><a class=\"anchor\" href=\"#session主菜\">#</a> Session：主菜</h2>\n<ol>\n<li>\n<p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p>\n</li>\n<li>\n<p>快速入门：</p>\n<ol>\n<li>获取 HttpSession 对象：<br />\nHttpSession session = request.getSession();</li>\n<li>使用 HttpSession 对象：<br />\nObject getAttribute(String name)<br />\nvoid setAttribute(String name, Object value)<br />\nvoid removeAttribute(String name)</li>\n</ol>\n</li>\n<li>\n<p>原理</p>\n<ul>\n<li>Session 的实现是依赖于 Cookie 的。</li>\n</ul>\n</li>\n<li>\n<p>细节</p>\n<p>1. 当客户端关闭后，服务器不关闭，两次获取 session 是否为同一个？</p>\n<p>默认情况下。不是。</p>\n<p>如果需要相同，则可以创建 Cookie, 键为 JSESSIONID，设置最大存活时间，让 cookie 持久化保存。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Cookie</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  c<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2. 客户端不关闭，服务器关闭后，两次获取的 session 是同一个吗？</p>\n<ul>\n<li>不是同一个，但是要确保数据不丢失。tomcat 自动完成以下工作\n<ul>\n<li>session 的钝化：\n<ul>\n<li>在服务器正常关闭之前，将 session 对象系列化到硬盘上</li>\n</ul>\n</li>\n<li>session 的活化：\n<ul>\n<li>在服务器启动后，将 session 文件转化为内存中的 session 对象即可。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>3.session 什么时候被销毁？</p>\n<ol>\n<li>\n<p>服务器关闭</p>\n</li>\n<li>\n<p>session 对象调用 invalidate () 。</p>\n</li>\n<li>\n<p>session 默认失效时间 30 分钟<br />\n选择性配置修改</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>session<span class=\"token operator\">-</span>config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>session<span class=\"token operator\">-</span>timeout<span class=\"token operator\">></span><span class=\"token number\">30</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>session<span class=\"token operator\">-</span>timeout<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>session<span class=\"token operator\">-</span>config<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>session 的特点</p>\n<ol>\n<li>session 用于存储一次会话的多次请求的数据，存在服务器端</li>\n<li>session 可以存储任意类型，任意大小的数据</li>\n</ol>\n<ul>\n<li>session 与 Cookie 的区别：\n<ol>\n<li>session 存储数据在服务器端，Cookie 在客户端</li>\n<li>session 没有数据大小限制，Cookie 有</li>\n<li>session 数据安全，Cookie 相对于不安全</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"案例验证码\"><a class=\"anchor\" href=\"#案例验证码\">#</a> 案例：验证码</h2>\n<ol>\n<li>案例需求：\n<ol>\n<li>访问带有验证码的登录页面 login.jsp</li>\n<li>用户输入用户名，密码以及验证码。\n<ul>\n<li>如果用户名和密码输入有误，跳转登录页面，提示：用户名或密码错误</li>\n<li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li>\n<li>如果全部输入正确，则跳转到主页 success.jsp，显示：用户名，欢迎您</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>​</p>\n",
            "tags": [
                "JavaWeb"
            ]
        }
    ]
}